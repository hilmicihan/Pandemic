define(['dart_sdk', 'packages/proj4dart/src/classes/point.dart', 'packages/proj4dart/src/constants/values.dart', 'packages/proj4dart/src/classes/proj_params.dart', 'packages/wkt_parser/wkt_parser.dart', 'packages/proj4dart/src/common/datum_transform.dart', 'packages/proj4dart/src/classes/datum.dart', 'packages/proj4dart/src/constants/faces.dart', 'packages/proj4dart/src/constants/areas.dart', 'packages/proj4dart/src/common/datum_utils.dart'], (function load__packages__proj4dart__src__classes__projection_tuple_dart(dart_sdk, packages__proj4dart__src__classes__point$46dart, packages__proj4dart__src__constants__values$46dart, packages__proj4dart__src__classes__proj_params$46dart, packages__wkt_parser__wkt_parser$46dart, packages__proj4dart__src__common__datum_transform$46dart, packages__proj4dart__src__classes__datum$46dart, packages__proj4dart__src__constants__faces$46dart, packages__proj4dart__src__constants__areas$46dart, packages__proj4dart__src__common__datum_utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const point$ = packages__proj4dart__src__classes__point$46dart.src__classes__point;
  const values = packages__proj4dart__src__constants__values$46dart.src__constants__values;
  const proj_params = packages__proj4dart__src__classes__proj_params$46dart.src__classes__proj_params;
  const wkt_parser = packages__wkt_parser__wkt_parser$46dart.wkt_parser;
  const datum_transform = packages__proj4dart__src__common__datum_transform$46dart.src__common__datum_transform;
  const datum = packages__proj4dart__src__classes__datum$46dart.src__classes__datum;
  const faces = packages__proj4dart__src__constants__faces$46dart.src__constants__faces;
  const areas = packages__proj4dart__src__constants__areas$46dart.src__constants__areas;
  const datum_utils = packages__proj4dart__src__common__datum_utils$46dart.src__common__datum_utils;
  var projection_tuple = Object.create(dart.library);
  var vandg = Object.create(dart.library);
  var utm = Object.create(dart.library);
  var tmerc = Object.create(dart.library);
  var sterea = Object.create(dart.library);
  var stere = Object.create(dart.library);
  var somerc = Object.create(dart.library);
  var sinu = Object.create(dart.library);
  var robin = Object.create(dart.library);
  var qsc = Object.create(dart.library);
  var poly = Object.create(dart.library);
  var ortho = Object.create(dart.library);
  var omerc = Object.create(dart.library);
  var nzmg = Object.create(dart.library);
  var moll = Object.create(dart.library);
  var mill = Object.create(dart.library);
  var merc = Object.create(dart.library);
  var longlat = Object.create(dart.library);
  var lcc = Object.create(dart.library);
  var laea = Object.create(dart.library);
  var krovak = Object.create(dart.library);
  var gstmerc = Object.create(dart.library);
  var gnom = Object.create(dart.library);
  var geocent = Object.create(dart.library);
  var gauss = Object.create(dart.library);
  var etmerc = Object.create(dart.library);
  var eqdc = Object.create(dart.library);
  var eqc = Object.create(dart.library);
  var cea = Object.create(dart.library);
  var cass = Object.create(dart.library);
  var aeqd = Object.create(dart.library);
  var aea = Object.create(dart.library);
  var initializers = Object.create(dart.library);
  var projection_store = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var projection = Object.create(dart.library);
  var proj4dart = Object.create(dart.library);
  var $abs = dartx.abs;
  var $_get = dartx._get;
  var $contains = dartx.contains;
  var $isNaN = dartx.isNaN;
  var $_set = dartx._set;
  var $floor = dartx.floor;
  var $isEmpty = dartx.isEmpty;
  var $entries = dartx.entries;
  var $clear = dartx.clear;
  var $containsKey = dartx.containsKey;
  var $length = dartx.length;
  var $floorToDouble = dartx.floorToDouble;
  var $isFinite = dartx.isFinite;
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var JSArrayOfStringL = () => (JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(StringL())))();
  var ListOfdoubleL = () => (ListOfdoubleL = dart.constFn(core.List$(doubleL())))();
  var dynamicTodoubleL = () => (dynamicTodoubleL = dart.constFn(dart.fnType(doubleL(), [dart.dynamic])))();
  var JSArrayOfdoubleL = () => (JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(doubleL())))();
  var ListLOfdoubleL = () => (ListLOfdoubleL = dart.constFn(dart.legacy(ListOfdoubleL())))();
  var JSArrayOfListLOfdoubleL = () => (JSArrayOfListLOfdoubleL = dart.constFn(_interceptors.JSArray$(ListLOfdoubleL())))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var IdentityMapOfStringL$intL = () => (IdentityMapOfStringL$intL = dart.constFn(_js_helper.IdentityMap$(StringL(), intL())))();
  var IdentityMapOfStringL$doubleL = () => (IdentityMapOfStringL$doubleL = dart.constFn(_js_helper.IdentityMap$(StringL(), doubleL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var ProjectionL = () => (ProjectionL = dart.constFn(dart.legacy(projection.Projection)))();
  var ProjParamsL = () => (ProjParamsL = dart.constFn(dart.legacy(proj_params.ProjParams)))();
  var ProjParamsLToProjectionL = () => (ProjParamsLToProjectionL = dart.constFn(dart.fnType(ProjectionL(), [ProjParamsL()])))();
  var ProjParamsLToLProjectionL = () => (ProjParamsLToLProjectionL = dart.constFn(dart.legacy(ProjParamsLToProjectionL())))();
  var IdentityMapOfStringL$ProjParamsLToLProjectionL = () => (IdentityMapOfStringL$ProjParamsLToLProjectionL = dart.constFn(_js_helper.IdentityMap$(StringL(), ProjParamsLToLProjectionL())))();
  var PseudoMercatorProjectionL = () => (PseudoMercatorProjectionL = dart.constFn(dart.legacy(merc.PseudoMercatorProjection)))();
  var ProjParamsLToPseudoMercatorProjectionL = () => (ProjParamsLToPseudoMercatorProjectionL = dart.constFn(dart.fnType(PseudoMercatorProjectionL(), [ProjParamsL()])))();
  var LongLatL = () => (LongLatL = dart.constFn(dart.legacy(longlat.LongLat)))();
  var ProjParamsLToLongLatL = () => (ProjParamsLToLongLatL = dart.constFn(dart.fnType(LongLatL(), [ProjParamsL()])))();
  var SwissObliqueMercatorProjectionL = () => (SwissObliqueMercatorProjectionL = dart.constFn(dart.legacy(somerc.SwissObliqueMercatorProjection)))();
  var ProjParamsLToSwissObliqueMercatorProjectionL = () => (ProjParamsLToSwissObliqueMercatorProjectionL = dart.constFn(dart.fnType(SwissObliqueMercatorProjectionL(), [ProjParamsL()])))();
  var AlbersProjectionL = () => (AlbersProjectionL = dart.constFn(dart.legacy(aea.AlbersProjection)))();
  var ProjParamsLToAlbersProjectionL = () => (ProjParamsLToAlbersProjectionL = dart.constFn(dart.fnType(AlbersProjectionL(), [ProjParamsL()])))();
  var AzimuthalEquidistantProjectionL = () => (AzimuthalEquidistantProjectionL = dart.constFn(dart.legacy(aeqd.AzimuthalEquidistantProjection)))();
  var ProjParamsLToAzimuthalEquidistantProjectionL = () => (ProjParamsLToAzimuthalEquidistantProjectionL = dart.constFn(dart.fnType(AzimuthalEquidistantProjectionL(), [ProjParamsL()])))();
  var CassiniProjectionL = () => (CassiniProjectionL = dart.constFn(dart.legacy(cass.CassiniProjection)))();
  var ProjParamsLToCassiniProjectionL = () => (ProjParamsLToCassiniProjectionL = dart.constFn(dart.fnType(CassiniProjectionL(), [ProjParamsL()])))();
  var CentralCylindricalProjectionL = () => (CentralCylindricalProjectionL = dart.constFn(dart.legacy(cea.CentralCylindricalProjection)))();
  var ProjParamsLToCentralCylindricalProjectionL = () => (ProjParamsLToCentralCylindricalProjectionL = dart.constFn(dart.fnType(CentralCylindricalProjectionL(), [ProjParamsL()])))();
  var EquidistantCylindricalProjectionL = () => (EquidistantCylindricalProjectionL = dart.constFn(dart.legacy(eqc.EquidistantCylindricalProjection)))();
  var ProjParamsLToEquidistantCylindricalProjectionL = () => (ProjParamsLToEquidistantCylindricalProjectionL = dart.constFn(dart.fnType(EquidistantCylindricalProjectionL(), [ProjParamsL()])))();
  var EquidistantConicProjectionL = () => (EquidistantConicProjectionL = dart.constFn(dart.legacy(eqdc.EquidistantConicProjection)))();
  var ProjParamsLToEquidistantConicProjectionL = () => (ProjParamsLToEquidistantConicProjectionL = dart.constFn(dart.fnType(EquidistantConicProjectionL(), [ProjParamsL()])))();
  var ExtendedTransverseMercatorProjectionL = () => (ExtendedTransverseMercatorProjectionL = dart.constFn(dart.legacy(etmerc.ExtendedTransverseMercatorProjection)))();
  var ProjParamsLToExtendedTransverseMercatorProjectionL = () => (ProjParamsLToExtendedTransverseMercatorProjectionL = dart.constFn(dart.fnType(ExtendedTransverseMercatorProjectionL(), [ProjParamsL()])))();
  var UniversalTransverseMercatorProjectionL = () => (UniversalTransverseMercatorProjectionL = dart.constFn(dart.legacy(utm.UniversalTransverseMercatorProjection)))();
  var ProjParamsLToUniversalTransverseMercatorProjectionL = () => (ProjParamsLToUniversalTransverseMercatorProjectionL = dart.constFn(dart.fnType(UniversalTransverseMercatorProjectionL(), [ProjParamsL()])))();
  var VanDerGrintenProjectionL = () => (VanDerGrintenProjectionL = dart.constFn(dart.legacy(vandg.VanDerGrintenProjection)))();
  var ProjParamsLToVanDerGrintenProjectionL = () => (ProjParamsLToVanDerGrintenProjectionL = dart.constFn(dart.fnType(VanDerGrintenProjectionL(), [ProjParamsL()])))();
  var GaussProjectionL = () => (GaussProjectionL = dart.constFn(dart.legacy(gauss.GaussProjection)))();
  var ProjParamsLToGaussProjectionL = () => (ProjParamsLToGaussProjectionL = dart.constFn(dart.fnType(GaussProjectionL(), [ProjParamsL()])))();
  var StereographicNorthProjectionL = () => (StereographicNorthProjectionL = dart.constFn(dart.legacy(sterea.StereographicNorthProjection)))();
  var ProjParamsLToStereographicNorthProjectionL = () => (ProjParamsLToStereographicNorthProjectionL = dart.constFn(dart.fnType(StereographicNorthProjectionL(), [ProjParamsL()])))();
  var StereographicSouthProjectionL = () => (StereographicSouthProjectionL = dart.constFn(dart.legacy(stere.StereographicSouthProjection)))();
  var ProjParamsLToStereographicSouthProjectionL = () => (ProjParamsLToStereographicSouthProjectionL = dart.constFn(dart.fnType(StereographicSouthProjectionL(), [ProjParamsL()])))();
  var SinusoidalProjectionL = () => (SinusoidalProjectionL = dart.constFn(dart.legacy(sinu.SinusoidalProjection)))();
  var ProjParamsLToSinusoidalProjectionL = () => (ProjParamsLToSinusoidalProjectionL = dart.constFn(dart.fnType(SinusoidalProjectionL(), [ProjParamsL()])))();
  var RobinsonProjectionL = () => (RobinsonProjectionL = dart.constFn(dart.legacy(robin.RobinsonProjection)))();
  var ProjParamsLToRobinsonProjectionL = () => (ProjParamsLToRobinsonProjectionL = dart.constFn(dart.fnType(RobinsonProjectionL(), [ProjParamsL()])))();
  var GeocentricProjectionL = () => (GeocentricProjectionL = dart.constFn(dart.legacy(geocent.GeocentricProjection)))();
  var ProjParamsLToGeocentricProjectionL = () => (ProjParamsLToGeocentricProjectionL = dart.constFn(dart.fnType(GeocentricProjectionL(), [ProjParamsL()])))();
  var GnomicProjectionL = () => (GnomicProjectionL = dart.constFn(dart.legacy(gnom.GnomicProjection)))();
  var ProjParamsLToGnomicProjectionL = () => (ProjParamsLToGnomicProjectionL = dart.constFn(dart.fnType(GnomicProjectionL(), [ProjParamsL()])))();
  var GaussSchreiberTransverseMercatorProjectionL = () => (GaussSchreiberTransverseMercatorProjectionL = dart.constFn(dart.legacy(gstmerc.GaussSchreiberTransverseMercatorProjection)))();
  var ProjParamsLToGaussSchreiberTransverseMercatorProjectionL = () => (ProjParamsLToGaussSchreiberTransverseMercatorProjectionL = dart.constFn(dart.fnType(GaussSchreiberTransverseMercatorProjectionL(), [ProjParamsL()])))();
  var KrovakProjectionL = () => (KrovakProjectionL = dart.constFn(dart.legacy(krovak.KrovakProjection)))();
  var ProjParamsLToKrovakProjectionL = () => (ProjParamsLToKrovakProjectionL = dart.constFn(dart.fnType(KrovakProjectionL(), [ProjParamsL()])))();
  var LambertAzimuthalEqualAreaProjectionL = () => (LambertAzimuthalEqualAreaProjectionL = dart.constFn(dart.legacy(laea.LambertAzimuthalEqualAreaProjection)))();
  var ProjParamsLToLambertAzimuthalEqualAreaProjectionL = () => (ProjParamsLToLambertAzimuthalEqualAreaProjectionL = dart.constFn(dart.fnType(LambertAzimuthalEqualAreaProjectionL(), [ProjParamsL()])))();
  var LambertConformalConicProjectionL = () => (LambertConformalConicProjectionL = dart.constFn(dart.legacy(lcc.LambertConformalConicProjection)))();
  var ProjParamsLToLambertConformalConicProjectionL = () => (ProjParamsLToLambertConformalConicProjectionL = dart.constFn(dart.fnType(LambertConformalConicProjectionL(), [ProjParamsL()])))();
  var MillerCylindricalProjectionL = () => (MillerCylindricalProjectionL = dart.constFn(dart.legacy(mill.MillerCylindricalProjection)))();
  var ProjParamsLToMillerCylindricalProjectionL = () => (ProjParamsLToMillerCylindricalProjectionL = dart.constFn(dart.fnType(MillerCylindricalProjectionL(), [ProjParamsL()])))();
  var MollweideProjectionL = () => (MollweideProjectionL = dart.constFn(dart.legacy(moll.MollweideProjection)))();
  var ProjParamsLToMollweideProjectionL = () => (ProjParamsLToMollweideProjectionL = dart.constFn(dart.fnType(MollweideProjectionL(), [ProjParamsL()])))();
  var NewZealandMapGridProjectionL = () => (NewZealandMapGridProjectionL = dart.constFn(dart.legacy(nzmg.NewZealandMapGridProjection)))();
  var ProjParamsLToNewZealandMapGridProjectionL = () => (ProjParamsLToNewZealandMapGridProjectionL = dart.constFn(dart.fnType(NewZealandMapGridProjectionL(), [ProjParamsL()])))();
  var HotineObliqueMercatorProjectionL = () => (HotineObliqueMercatorProjectionL = dart.constFn(dart.legacy(omerc.HotineObliqueMercatorProjection)))();
  var ProjParamsLToHotineObliqueMercatorProjectionL = () => (ProjParamsLToHotineObliqueMercatorProjectionL = dart.constFn(dart.fnType(HotineObliqueMercatorProjectionL(), [ProjParamsL()])))();
  var OrthographicProjectionL = () => (OrthographicProjectionL = dart.constFn(dart.legacy(ortho.OrthographicProjection)))();
  var ProjParamsLToOrthographicProjectionL = () => (ProjParamsLToOrthographicProjectionL = dart.constFn(dart.fnType(OrthographicProjectionL(), [ProjParamsL()])))();
  var PolyconicProjectionL = () => (PolyconicProjectionL = dart.constFn(dart.legacy(poly.PolyconicProjection)))();
  var ProjParamsLToPolyconicProjectionL = () => (ProjParamsLToPolyconicProjectionL = dart.constFn(dart.fnType(PolyconicProjectionL(), [ProjParamsL()])))();
  var QuadrilateralizedSphericalCubeProjectionL = () => (QuadrilateralizedSphericalCubeProjectionL = dart.constFn(dart.legacy(qsc.QuadrilateralizedSphericalCubeProjection)))();
  var ProjParamsLToQuadrilateralizedSphericalCubeProjectionL = () => (ProjParamsLToQuadrilateralizedSphericalCubeProjectionL = dart.constFn(dart.fnType(QuadrilateralizedSphericalCubeProjectionL(), [ProjParamsL()])))();
  var TransverseMercatorProjectionL = () => (TransverseMercatorProjectionL = dart.constFn(dart.legacy(tmerc.TransverseMercatorProjection)))();
  var ProjParamsLToTransverseMercatorProjectionL = () => (ProjParamsLToTransverseMercatorProjectionL = dart.constFn(dart.fnType(TransverseMercatorProjectionL(), [ProjParamsL()])))();
  var IdentityMapOfStringL$ProjectionL = () => (IdentityMapOfStringL$ProjectionL = dart.constFn(_js_helper.IdentityMap$(StringL(), ProjectionL())))();
  var PointL = () => (PointL = dart.constFn(dart.legacy(point$.Point)))();
  const CT = Object.create(null);
  var L17 = "package:proj4dart/src/projections/nzmg.dart";
  var L0 = "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/proj4dart-1.0.5/lib/src/classes/projection_tuple.dart";
  var L2 = "package:proj4dart/src/classes/projection.dart";
  var L7 = "package:proj4dart/src/projections/gauss.dart";
  var L5 = "package:proj4dart/src/projections/utm.dart";
  var L22 = "package:proj4dart/src/projections/lcc.dart";
  var L8 = "package:proj4dart/src/projections/sterea.dart";
  var L21 = "package:proj4dart/src/projections/longlat.dart";
  var L30 = "package:proj4dart/src/projections/cea.dart";
  var L11 = "package:proj4dart/src/projections/sinu.dart";
  var L24 = "package:proj4dart/src/projections/krovak.dart";
  var L12 = "package:proj4dart/src/projections/robin.dart";
  var L23 = "package:proj4dart/src/projections/laea.dart";
  var L14 = "package:proj4dart/src/projections/poly.dart";
  var L20 = "package:proj4dart/src/projections/merc.dart";
  var L25 = "package:proj4dart/src/projections/gstmerc.dart";
  var L15 = "package:proj4dart/src/projections/ortho.dart";
  var L26 = "package:proj4dart/src/projections/gnom.dart";
  var L10 = "package:proj4dart/src/projections/somerc.dart";
  var L3 = "package:proj4dart/src/projections/vandg.dart";
  var L32 = "package:proj4dart/src/projections/aeqd.dart";
  var L33 = "package:proj4dart/src/projections/aea.dart";
  var L18 = "package:proj4dart/src/projections/moll.dart";
  var L9 = "package:proj4dart/src/projections/stere.dart";
  var L19 = "package:proj4dart/src/projections/mill.dart";
  var L4 = "package:proj4dart/src/projections/etmerc.dart";
  var L34 = "package:proj4dart/src/globals/projection_store.dart";
  var L16 = "package:proj4dart/src/projections/omerc.dart";
  var L6 = "package:proj4dart/src/projections/tmerc.dart";
  var L31 = "package:proj4dart/src/projections/cass.dart";
  var L29 = "package:proj4dart/src/projections/eqc.dart";
  var L27 = "package:proj4dart/src/projections/geocent.dart";
  var L13 = "package:proj4dart/src/projections/qsc.dart";
  var L1 = "package:proj4dart/src/classes/projection_tuple.dart";
  var L28 = "package:proj4dart/src/projections/eqdc.dart";
  var fromProj$ = dart.privateName(projection_tuple, "ProjectionTuple.fromProj");
  var toProj$ = dart.privateName(projection_tuple, "ProjectionTuple.toProj");
  projection_tuple.ProjectionTuple = class ProjectionTuple extends core.Object {
    get fromProj() {
      return this[fromProj$];
    }
    set fromProj(value) {
      super.fromProj = value;
    }
    get toProj() {
      return this[toProj$];
    }
    set toProj(value) {
      super.toProj = value;
    }
    forward(point) {
      return this.fromProj.transform(this.toProj, point);
    }
    inverse(point) {
      return this.toProj.transform(this.fromProj, point);
    }
  };
  (projection_tuple.ProjectionTuple.new = function(opts) {
    let fromProj = opts && 'fromProj' in opts ? opts.fromProj : null;
    let toProj = opts && 'toProj' in opts ? opts.toProj : null;
    this[fromProj$] = fromProj;
    this[toProj$] = toProj;
    if (!(null != fromProj)) dart.assertFailed(null, L0, 10, 16, "null != fromProj");
    if (!(null != toProj)) dart.assertFailed(null, L0, 11, 16, "null != toProj");
    ;
  }).prototype = projection_tuple.ProjectionTuple.prototype;
  dart.addTypeTests(projection_tuple.ProjectionTuple);
  dart.addTypeCaches(projection_tuple.ProjectionTuple);
  dart.setMethodSignature(projection_tuple.ProjectionTuple, () => ({
    __proto__: dart.getMethods(projection_tuple.ProjectionTuple.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(projection_tuple.ProjectionTuple, L1);
  dart.setFieldSignature(projection_tuple.ProjectionTuple, () => ({
    __proto__: dart.getFields(projection_tuple.ProjectionTuple.__proto__),
    fromProj: dart.finalFieldType(dart.legacy(projection.Projection)),
    toProj: dart.finalFieldType(dart.legacy(projection.Projection))
  }));
  var projName = dart.privateName(projection, "Projection.projName");
  var ellps = dart.privateName(projection, "Projection.ellps");
  var noDefs = dart.privateName(projection, "Projection.noDefs");
  var k0 = dart.privateName(projection, "Projection.k0");
  var axis = dart.privateName(projection, "Projection.axis");
  var a = dart.privateName(projection, "Projection.a");
  var b = dart.privateName(projection, "Projection.b");
  var rf = dart.privateName(projection, "Projection.rf");
  var sphere = dart.privateName(projection, "Projection.sphere");
  var es = dart.privateName(projection, "Projection.es");
  var e = dart.privateName(projection, "Projection.e");
  var ep2 = dart.privateName(projection, "Projection.ep2");
  var datum$ = dart.privateName(projection, "Projection.datum");
  var from_greenwich = dart.privateName(projection, "Projection.from_greenwich");
  var to_meter = dart.privateName(projection, "Projection.to_meter");
  projection.Projection = class Projection extends core.Object {
    get projName() {
      return this[projName];
    }
    set projName(value) {
      this[projName] = value;
    }
    get ellps() {
      return this[ellps];
    }
    set ellps(value) {
      this[ellps] = value;
    }
    get noDefs() {
      return this[noDefs];
    }
    set noDefs(value) {
      this[noDefs] = value;
    }
    get k0() {
      return this[k0];
    }
    set k0(value) {
      this[k0] = value;
    }
    get axis() {
      return this[axis];
    }
    set axis(value) {
      this[axis] = value;
    }
    get a() {
      return this[a];
    }
    set a(value) {
      this[a] = value;
    }
    get b() {
      return this[b];
    }
    set b(value) {
      this[b] = value;
    }
    get rf() {
      return this[rf];
    }
    set rf(value) {
      this[rf] = value;
    }
    get sphere() {
      return this[sphere];
    }
    set sphere(value) {
      this[sphere] = value;
    }
    get es() {
      return this[es];
    }
    set es(value) {
      this[es] = value;
    }
    get e() {
      return this[e];
    }
    set e(value) {
      this[e] = value;
    }
    get ep2() {
      return this[ep2];
    }
    set ep2(value) {
      this[ep2] = value;
    }
    get datum() {
      return this[datum$];
    }
    set datum(value) {
      this[datum$] = value;
    }
    get from_greenwich() {
      return this[from_greenwich];
    }
    set from_greenwich(value) {
      this[from_greenwich] = value;
    }
    get to_meter() {
      return this[to_meter];
    }
    set to_meter(value) {
      this[to_meter] = value;
    }
    static get WGS84() {
      return projection_store.ProjectionStore.new().WGS84;
    }
    static get GOOGLE() {
      return projection_store.ProjectionStore.new().GOOGLE;
    }
    static new(code) {
      let result = projection_store.ProjectionStore.new().get(code);
      return result;
    }
    static add(code, defString) {
      let params = projection.Projection.parse(defString);
      return projection_store.ProjectionStore.new().register(code, params);
    }
    static parse(defString) {
      let params = null;
      if (defString[$_get](0) === "+") {
        params = new proj_params.ProjParams.new(defString);
      } else {
        let projWKT = wkt_parser.parseWKT(defString);
        if (dart.test(projection.Projection._checkMercator(projWKT))) {
          return projection.Projection.GOOGLE;
        }
        let extensionProjStr = projection.Projection._checkProjStr(projWKT);
        if (extensionProjStr != null) {
          params = new proj_params.ProjParams.new(extensionProjStr);
        } else {
          params = new proj_params.ProjParams.fromWKT(projWKT);
        }
      }
      let projName = params.proj;
      let initializer = initializers.initializers[$_get](projName);
      if (initializer == null) {
        dart.throw(core.Exception.new("Projection initializer not found by projname: " + dart.str(projName)));
      }
      return initializer(params);
    }
    static _checkMercator(wkt) {
      let authority = wkt.AUTHORITY;
      if (authority == null) {
        return false;
      }
      let epsg = null;
      if (authority[$_get]("EPSG") != null) {
        epsg = StringL().as(authority[$_get]("EPSG"));
      } else if (authority[$_get]("epsg") != null) {
        epsg = StringL().as(authority[$_get]("epsg"));
      }
      return epsg != null && dart.test(projection.Projection._mercatorCodes[$contains](epsg));
    }
    static _checkProjStr(wkt) {
      let ext = wkt.EXTENSION;
      if (ext == null) {
        return null;
      }
      if (ext[$_get]("PROJ4") != null) {
        return StringL().as(ext[$_get]("PROJ4"));
      } else if (ext[$_get]("proj4") != null) {
        return StringL().as(ext[$_get]("proj4"));
      }
      return null;
    }
    static _checkNotWGS(source, dest) {
      return (source.datum.datumType == values.PJD_3PARAM || source.datum.datumType == values.PJD_7PARAM) && dest.projName !== "longlat" || (dest.datum.datumType == values.PJD_3PARAM || dest.datum.datumType == values.PJD_7PARAM) && source.projName !== "longlat";
    }
    transform(dest, point) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      if (null == dest) {
        dart.throw(core.Exception.new("Destination Projection cannot be null!"));
      }
      let source = this;
      point = new point$.Point.copy(point);
      let shouldRemoveZ = point.z == null;
      utils.checkSanity(point);
      if (source.datum != null && dest.datum != null && dart.test(projection.Projection._checkNotWGS(source, dest))) {
        let wgs84 = projection.Projection.WGS84;
        point = source.transform(wgs84, point);
        source = wgs84;
      }
      if (source.axis !== "enu") {
        point = utils.adjust_axis(source, false, point);
      }
      if (source.projName === "longlat") {
        point = new point$.Point.withZ({x: dart.notNull(point.x) * dart.notNull(values.D2R), y: dart.notNull(point.y) * dart.notNull(values.D2R), z: (t0 = point.z, t0 == null ? 0.0 : t0)});
      } else {
        if (source.to_meter != null) {
          point = new point$.Point.withZ({x: dart.notNull(point.x) * dart.notNull(source.to_meter), y: dart.notNull(point.y) * dart.notNull(source.to_meter), z: (t0$ = point.z, t0$ == null ? 0.0 : t0$)});
        }
        point = source.inverse(point);
      }
      if (source.from_greenwich != null) {
        t0$0 = point;
        t0$0.x = dart.notNull(t0$0.x) + dart.notNull(source.from_greenwich);
      }
      point = datum_transform.transform(source.datum, dest.datum, point);
      if (dest.from_greenwich != null) {
        point = new point$.Point.withZ({x: dart.notNull(point.x) - dart.notNull(dest.from_greenwich), y: point.y, z: (t0$1 = point.z, t0$1 == null ? 0.0 : t0$1)});
      }
      if (dest.projName === "longlat") {
        point = new point$.Point.withZ({x: dart.notNull(point.x) * dart.notNull(values.R2D), y: dart.notNull(point.y) * dart.notNull(values.R2D), z: (t0$2 = point.z, t0$2 == null ? 0.0 : t0$2)});
      } else {
        point = dest.forward(point);
        if (dest.to_meter != null) {
          point = new point$.Point.withZ({x: dart.notNull(point.x) / dart.notNull(dest.to_meter), y: dart.notNull(point.y) / dart.notNull(dest.to_meter), z: (t0$3 = point.z, t0$3 == null ? 0.0 : t0$3)});
        }
      }
      if (dest.axis !== "enu") {
        point = utils.adjust_axis(dest, true, point);
      }
      if (shouldRemoveZ) {
        point.z = null;
        point.m = null;
        return point;
      } else {
        return point;
      }
    }
  };
  (projection.Projection.init = function(params) {
    this[projName] = params.proj;
    this[ellps] = params.ellps;
    this[noDefs] = params.no_defs;
    this[k0] = params.k0;
    this[axis] = params.axis;
    this[a] = params.a;
    this[b] = params.b;
    this[rf] = params.rf;
    this[sphere] = params.sphere;
    this[es] = params.es;
    this[e] = params.e;
    this[ep2] = params.ep2;
    this[datum$] = params.datum;
    this[from_greenwich] = params.from_greenwich;
    this[to_meter] = params.to_meter;
    ;
  }).prototype = projection.Projection.prototype;
  dart.addTypeTests(projection.Projection);
  dart.addTypeCaches(projection.Projection);
  dart.setMethodSignature(projection.Projection, () => ({
    __proto__: dart.getMethods(projection.Projection.__proto__),
    transform: dart.fnType(dart.legacy(point$.Point), [dart.legacy(projection.Projection), dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(projection.Projection, L2);
  dart.setFieldSignature(projection.Projection, () => ({
    __proto__: dart.getFields(projection.Projection.__proto__),
    projName: dart.fieldType(dart.legacy(core.String)),
    ellps: dart.fieldType(dart.legacy(core.String)),
    noDefs: dart.fieldType(dart.legacy(core.bool)),
    k0: dart.fieldType(dart.legacy(core.double)),
    axis: dart.fieldType(dart.legacy(core.String)),
    a: dart.fieldType(dart.legacy(core.double)),
    b: dart.fieldType(dart.legacy(core.double)),
    rf: dart.fieldType(dart.legacy(core.double)),
    sphere: dart.fieldType(dart.legacy(core.bool)),
    es: dart.fieldType(dart.legacy(core.double)),
    e: dart.fieldType(dart.legacy(core.double)),
    ep2: dart.fieldType(dart.legacy(core.double)),
    datum: dart.fieldType(dart.legacy(datum.Datum)),
    from_greenwich: dart.fieldType(dart.legacy(core.double)),
    to_meter: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(projection.Projection, {
    /*projection.Projection._mercatorCodes*/get _mercatorCodes() {
      return JSArrayOfStringL().of(["3857", "900913", "3785", "102113"]);
    }
  }, true);
  var R = dart.privateName(vandg, "VanDerGrintenProjection.R");
  var long0 = dart.privateName(vandg, "VanDerGrintenProjection.long0");
  var x0 = dart.privateName(vandg, "VanDerGrintenProjection.x0");
  var y0 = dart.privateName(vandg, "VanDerGrintenProjection.y0");
  vandg.VanDerGrintenProjection = class VanDerGrintenProjection extends projection.Projection {
    get R() {
      return this[R];
    }
    set R(value) {
      this[R] = value;
    }
    get long0() {
      return this[long0];
    }
    set long0(value) {
      this[long0] = value;
    }
    get x0() {
      return this[x0];
    }
    set x0(value) {
      this[x0] = value;
    }
    get y0() {
      return this[y0];
    }
    set y0(value) {
      this[y0] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      let x = null;
      let y = null;
      if (lat[$abs]() <= dart.notNull(values.EPSLN)) {
        x = dart.notNull(this.x0) + dart.notNull(this.R) * dart.notNull(dlon);
        y = this.y0;
      }
      let theta = utils.asinz(2 * (dart.notNull(lat) / 3.141592653589793)[$abs]());
      if (dlon[$abs]() <= dart.notNull(values.EPSLN) || (lat[$abs]() - dart.notNull(values.HALF_PI))[$abs]() <= dart.notNull(values.EPSLN)) {
        x = this.x0;
        if (dart.notNull(lat) >= 0) {
          y = dart.notNull(this.y0) + 3.141592653589793 * dart.notNull(this.R) * math.tan(0.5 * dart.notNull(theta));
        } else {
          y = dart.notNull(this.y0) + 3.141592653589793 * dart.notNull(this.R) * -math.tan(0.5 * dart.notNull(theta));
        }
      }
      let al = 0.5 * (3.141592653589793 / dart.notNull(dlon) - dart.notNull(dlon) / 3.141592653589793)[$abs]();
      let asq = al * al;
      let sinth = math.sin(theta);
      let costh = math.cos(theta);
      let g = costh / (sinth + costh - 1);
      let gsq = g * g;
      let m = g * (2 / sinth - 1);
      let msq = m * m;
      let con = 3.141592653589793 * dart.notNull(this.R) * (al * (g - msq) + math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);
      if (dart.notNull(dlon) < 0) {
        con = -con;
      }
      x = dart.notNull(this.x0) + con;
      let q = asq + g;
      con = 3.141592653589793 * dart.notNull(this.R) * (m * q - al * math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);
      if (dart.notNull(lat) >= 0) {
        y = dart.notNull(this.y0) + con;
      } else {
        y = dart.notNull(this.y0) - con;
      }
      p.x = doubleL().as(x);
      p.y = doubleL().as(y);
      return p;
    }
    inverse(p) {
      let t0, t0$;
      let lon = null;
      let lat = null;
      let xx = null;
      let yy = null;
      let xys = null;
      let c1 = null;
      let c2 = null;
      let c3 = null;
      let a1 = null;
      let m1 = null;
      let con = null;
      let th1 = null;
      let d = null;
      t0 = p;
      t0.x = dart.notNull(t0.x) - dart.notNull(this.x0);
      t0$ = p;
      t0$.y = dart.notNull(t0$.y) - dart.notNull(this.y0);
      con = 3.141592653589793 * dart.notNull(this.R);
      xx = dart.notNull(p.x) / dart.notNull(con);
      yy = dart.notNull(p.y) / dart.notNull(con);
      xys = dart.notNull(xx) * dart.notNull(xx) + dart.notNull(yy) * dart.notNull(yy);
      c1 = -yy[$abs]() * (1 + dart.notNull(xys));
      c2 = dart.notNull(c1) - 2 * dart.notNull(yy) * dart.notNull(yy) + dart.notNull(xx) * dart.notNull(xx);
      c3 = -2 * dart.notNull(c1) + 1 + 2 * dart.notNull(yy) * dart.notNull(yy) + dart.notNull(xys) * dart.notNull(xys);
      d = dart.notNull(yy) * dart.notNull(yy) / dart.notNull(c3) + (2 * dart.notNull(c2) * dart.notNull(c2) * dart.notNull(c2) / dart.notNull(c3) / dart.notNull(c3) / dart.notNull(c3) - 9 * dart.notNull(c1) * dart.notNull(c2) / dart.notNull(c3) / dart.notNull(c3)) / 27;
      a1 = (dart.notNull(c1) - dart.notNull(c2) * dart.notNull(c2) / 3 / dart.notNull(c3)) / dart.notNull(c3);
      m1 = 2 * math.sqrt(-dart.notNull(a1) / 3);
      con = 3 * dart.notNull(d) / dart.notNull(a1) / dart.notNull(m1);
      if (con[$abs]() > 1) {
        if (dart.notNull(con) >= 0) {
          con = 1.0;
        } else {
          con = -1.0;
        }
      }
      th1 = math.acos(con) / 3;
      if (dart.notNull(p.y) >= 0) {
        lat = (-dart.notNull(m1) * math.cos(dart.notNull(th1) + 3.141592653589793 / 3) - dart.notNull(c2) / 3 / dart.notNull(c3)) * 3.141592653589793;
      } else {
        lat = -(-dart.notNull(m1) * math.cos(dart.notNull(th1) + 3.141592653589793 / 3) - dart.notNull(c2) / 3 / dart.notNull(c3)) * 3.141592653589793;
      }
      if (xx[$abs]() < dart.notNull(values.EPSLN)) {
        lon = this.long0;
      } else {
        lon = utils.adjust_lon(dart.notNull(this.long0) + 3.141592653589793 * (dart.notNull(xys) - 1 + math.sqrt(1 + 2 * (dart.notNull(xx) * dart.notNull(xx) - dart.notNull(yy) * dart.notNull(yy)) + dart.notNull(xys) * dart.notNull(xys))) / 2 / dart.notNull(xx));
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (vandg.VanDerGrintenProjection.init = function(params) {
    this[R] = null;
    this[long0] = null;
    this[x0] = null;
    this[y0] = null;
    vandg.VanDerGrintenProjection.__proto__.init.call(this, params);
    this.R = params.a;
    this.long0 = params.long0;
    this.x0 = params.x0;
    this.y0 = params.y0;
  }).prototype = vandg.VanDerGrintenProjection.prototype;
  dart.addTypeTests(vandg.VanDerGrintenProjection);
  dart.addTypeCaches(vandg.VanDerGrintenProjection);
  dart.setMethodSignature(vandg.VanDerGrintenProjection, () => ({
    __proto__: dart.getMethods(vandg.VanDerGrintenProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(vandg.VanDerGrintenProjection, L3);
  dart.setFieldSignature(vandg.VanDerGrintenProjection, () => ({
    __proto__: dart.getFields(vandg.VanDerGrintenProjection.__proto__),
    R: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(vandg.VanDerGrintenProjection, {
    /*vandg.VanDerGrintenProjection.names*/get names() {
      return JSArrayOfStringL().of(["Van_der_Grinten_I", "VanDerGrinten", "vandg"]);
    }
  }, true);
  var x0$ = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.x0");
  var y0$ = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.y0");
  var long0$ = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.long0");
  var lat0 = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.lat0");
  var Qn = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.Qn");
  var Zb = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.Zb");
  var cgb = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.cgb");
  var cbg = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.cbg");
  var utg = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.utg");
  var gtu = dart.privateName(etmerc, "ExtendedTransverseMercatorProjection.gtu");
  etmerc.ExtendedTransverseMercatorProjection = class ExtendedTransverseMercatorProjection extends projection.Projection {
    get x0() {
      return this[x0$];
    }
    set x0(value) {
      this[x0$] = value;
    }
    get y0() {
      return this[y0$];
    }
    set y0(value) {
      this[y0$] = value;
    }
    get long0() {
      return this[long0$];
    }
    set long0(value) {
      this[long0$] = value;
    }
    get lat0() {
      return this[lat0];
    }
    set lat0(value) {
      this[lat0] = value;
    }
    get Qn() {
      return this[Qn];
    }
    set Qn(value) {
      this[Qn] = value;
    }
    get Zb() {
      return this[Zb];
    }
    set Zb(value) {
      this[Zb] = value;
    }
    get cgb() {
      return this[cgb];
    }
    set cgb(value) {
      this[cgb] = value;
    }
    get cbg() {
      return this[cbg];
    }
    set cbg(value) {
      this[cbg] = value;
    }
    get utg() {
      return this[utg];
    }
    set utg(value) {
      this[utg] = value;
    }
    get gtu() {
      return this[gtu];
    }
    set gtu(value) {
      this[gtu] = value;
    }
    forward(p) {
      let Ce = utils.adjust_lon(dart.notNull(p.x) - dart.notNull(this.long0));
      let Cn = p.y;
      Cn = utils.gatg(this.cbg, Cn);
      let sin_Cn = math.sin(Cn);
      let cos_Cn = math.cos(Cn);
      let sin_Ce = math.sin(Ce);
      let cos_Ce = math.cos(Ce);
      Cn = math.atan2(sin_Cn, cos_Ce * cos_Cn);
      Ce = math.atan2(sin_Ce * cos_Cn, utils.hypot(sin_Cn, cos_Cn * cos_Ce));
      Ce = utils.asinhy(math.tan(Ce));
      let tmp = utils.clens_cmplx(this.gtu, 2 * dart.notNull(Cn), 2 * dart.notNull(Ce));
      Cn = dart.notNull(Cn) + dart.notNull(tmp[$_get](0));
      Ce = dart.notNull(Ce) + dart.notNull(tmp[$_get](1));
      let x = null;
      let y = null;
      if (Ce[$abs]() <= 2.623395162778) {
        x = dart.notNull(this.a) * (dart.notNull(this.Qn) * dart.notNull(Ce)) + dart.notNull(this.x0);
        y = dart.notNull(this.a) * (dart.notNull(this.Qn) * dart.notNull(Cn) + dart.notNull(this.Zb)) + dart.notNull(this.y0);
      } else {
        x = 1 / 0;
        y = 1 / 0;
      }
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let Ce = (dart.notNull(p.x) - dart.notNull(this.x0)) * (1 / dart.notNull(this.a));
      let Cn = (dart.notNull(p.y) - dart.notNull(this.y0)) * (1 / dart.notNull(this.a));
      Cn = (Cn - dart.notNull(this.Zb)) / dart.notNull(this.Qn);
      Ce = Ce / dart.notNull(this.Qn);
      let lon = null;
      let lat = null;
      if (Ce[$abs]() <= 2.623395162778) {
        let tmp = utils.clens_cmplx(this.utg, 2 * Cn, 2 * Ce);
        Cn = Cn + dart.notNull(tmp[$_get](0));
        Ce = Ce + dart.notNull(tmp[$_get](1));
        Ce = math.atan(utils.sinh(Ce));
        let sin_Cn = math.sin(Cn);
        let cos_Cn = math.cos(Cn);
        let sin_Ce = math.sin(Ce);
        let cos_Ce = math.cos(Ce);
        Cn = math.atan2(sin_Cn * cos_Ce, utils.hypot(sin_Ce, cos_Ce * cos_Cn));
        Ce = math.atan2(sin_Ce, cos_Ce * cos_Cn);
        lon = utils.adjust_lon(Ce + dart.notNull(this.long0));
        lat = utils.gatg(this.cgb, Cn);
      } else {
        lon = 1 / 0;
        lat = 1 / 0;
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (etmerc.ExtendedTransverseMercatorProjection.init = function(params) {
    let t0, t0$, t0$0;
    this[x0$] = null;
    this[y0$] = null;
    this[long0$] = null;
    this[lat0] = null;
    this[Qn] = null;
    this[Zb] = null;
    this[cgb] = null;
    this[cbg] = null;
    this[utg] = null;
    this[gtu] = null;
    etmerc.ExtendedTransverseMercatorProjection.__proto__.init.call(this, params);
    this.es = params.es;
    if (this.es == null || dart.notNull(this.es) <= 0) {
      dart.throw(core.Exception.new("Incorrect elliptical usage"));
    }
    this.x0 = (t0 = this.x0, t0 == null ? 0.0 : t0);
    this.y0 = (t0$ = this.y0, t0$ == null ? 0.0 : t0$);
    if (this.long0 == null || this.long0[$isNaN]) {
      this.long0 = 0.0;
    }
    this.lat0 = (t0$0 = this.lat0, t0$0 == null ? 0.0 : t0$0);
    this.cgb = ListOfdoubleL().new(6);
    this.cbg = ListOfdoubleL().new(6);
    this.utg = ListOfdoubleL().new(6);
    this.gtu = ListOfdoubleL().new(6);
    let f = dart.notNull(this.es) / (1 + math.sqrt(1 - dart.notNull(this.es)));
    let n = f / (2 - f);
    let np = n;
    this.cgb[$_set](0, n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675)))))));
    this.cbg[$_set](0, n * (-2 + n * (2 / 3 + n * (4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725)))))));
    np = np * n;
    this.cgb[$_set](1, np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945))))));
    this.cbg[$_set](1, np * (5 / 3 + n * (-16 / 15 + n * (-13 / 9 + n * (904 / 315 + n * (-1522 / 945))))));
    np = np * n;
    this.cgb[$_set](2, np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835)))));
    this.cbg[$_set](2, np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835)))));
    np = np * n;
    this.cgb[$_set](3, np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175))));
    this.cbg[$_set](3, np * (1237 / 630 + n * (-12 / 5 + n * (-24832 / 14175))));
    np = np * n;
    this.cgb[$_set](4, np * (4174 / 315 + n * (-144838 / 6237)));
    this.cbg[$_set](4, np * (-734 / 315 + n * (109598 / 31185)));
    np = np * n;
    this.cgb[$_set](5, np * (601676 / 22275));
    this.cbg[$_set](5, np * (444337 / 155925));
    np = math.pow(n, 2);
    this.Qn = dart.notNull(this.k0) / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));
    this.utg[$_set](0, n * (-0.5 + n * (2 / 3 + n * (-37 / 96 + n * (1 / 360 + n * (81 / 512 + n * (-96199 / 604800)))))));
    this.gtu[$_set](0, n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800)))))));
    this.utg[$_set](1, np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720))))));
    this.gtu[$_set](1, np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360))))));
    np = np * n;
    this.utg[$_set](2, np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720)))));
    this.gtu[$_set](2, np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440)))));
    np = np * n;
    this.utg[$_set](3, np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600))));
    this.gtu[$_set](3, np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600))));
    np = np * n;
    this.utg[$_set](4, np * (-4583 / 161280 + n * (108847 / 3991680)));
    this.gtu[$_set](4, np * (34729 / 80640 + n * (-3418889 / 1995840)));
    np = np * n;
    this.utg[$_set](5, np * (-20648693 / 638668800));
    this.gtu[$_set](5, np * (212378941 / 319334400));
    let Z = utils.gatg(this.cbg, this.lat0);
    this.Zb = -dart.notNull(this.Qn) * (dart.notNull(Z) + dart.notNull(utils.clens(this.gtu, 2 * dart.notNull(Z))));
  }).prototype = etmerc.ExtendedTransverseMercatorProjection.prototype;
  dart.addTypeTests(etmerc.ExtendedTransverseMercatorProjection);
  dart.addTypeCaches(etmerc.ExtendedTransverseMercatorProjection);
  dart.setMethodSignature(etmerc.ExtendedTransverseMercatorProjection, () => ({
    __proto__: dart.getMethods(etmerc.ExtendedTransverseMercatorProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(etmerc.ExtendedTransverseMercatorProjection, L4);
  dart.setFieldSignature(etmerc.ExtendedTransverseMercatorProjection, () => ({
    __proto__: dart.getFields(etmerc.ExtendedTransverseMercatorProjection.__proto__),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    lat0: dart.fieldType(dart.legacy(core.double)),
    Qn: dart.fieldType(dart.legacy(core.double)),
    Zb: dart.fieldType(dart.legacy(core.double)),
    cgb: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    cbg: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    utg: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    gtu: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double))))
  }));
  dart.defineLazy(etmerc.ExtendedTransverseMercatorProjection, {
    /*etmerc.ExtendedTransverseMercatorProjection.names*/get names() {
      return JSArrayOfStringL().of(["Extended_Transverse_Mercator", "Extended Transverse Mercator", "etmerc"]);
    }
  }, true);
  var zone = dart.privateName(utm, "UniversalTransverseMercatorProjection.zone");
  var utmSouth = dart.privateName(utm, "UniversalTransverseMercatorProjection.utmSouth");
  var lat0$ = dart.privateName(utm, "UniversalTransverseMercatorProjection.lat0");
  var long0$0 = dart.privateName(utm, "UniversalTransverseMercatorProjection.long0");
  var x0$0 = dart.privateName(utm, "UniversalTransverseMercatorProjection.x0");
  var y0$0 = dart.privateName(utm, "UniversalTransverseMercatorProjection.y0");
  var k0$ = dart.privateName(utm, "UniversalTransverseMercatorProjection.k0");
  utm.UniversalTransverseMercatorProjection = class UniversalTransverseMercatorProjection extends etmerc.ExtendedTransverseMercatorProjection {
    get zone() {
      return this[zone];
    }
    set zone(value) {
      this[zone] = value;
    }
    get utmSouth() {
      return this[utmSouth];
    }
    set utmSouth(value) {
      this[utmSouth] = value;
    }
    get lat0() {
      return this[lat0$];
    }
    set lat0(value) {
      this[lat0$] = value;
    }
    get long0() {
      return this[long0$0];
    }
    set long0(value) {
      this[long0$0] = value;
    }
    get x0() {
      return this[x0$0];
    }
    set x0(value) {
      this[x0$0] = value;
    }
    get y0() {
      return this[y0$0];
    }
    set y0(value) {
      this[y0$0] = value;
    }
    get k0() {
      return this[k0$];
    }
    set k0(value) {
      this[k0$] = value;
    }
  };
  (utm.UniversalTransverseMercatorProjection.init = function(params) {
    this[zone] = utils.adjust_zone(params.zone, params.long0);
    this[utmSouth] = params.utmSouth;
    this[lat0$] = 0.0;
    this[long0$0] = (6 * params.zone[$abs]() - 183) * dart.notNull(values.D2R);
    this[x0$0] = 500000.0;
    this[y0$0] = params.utmSouth != null && dart.test(params.utmSouth) ? 10000000.0 : 0.0;
    this[k0$] = 0.9996;
    utm.UniversalTransverseMercatorProjection.__proto__.init.call(this, params);
    if (this.zone == null) {
      dart.throw(core.Exception.new("Unknown utm zone"));
    }
  }).prototype = utm.UniversalTransverseMercatorProjection.prototype;
  dart.addTypeTests(utm.UniversalTransverseMercatorProjection);
  dart.addTypeCaches(utm.UniversalTransverseMercatorProjection);
  dart.setLibraryUri(utm.UniversalTransverseMercatorProjection, L5);
  dart.setFieldSignature(utm.UniversalTransverseMercatorProjection, () => ({
    __proto__: dart.getFields(utm.UniversalTransverseMercatorProjection.__proto__),
    zone: dart.fieldType(dart.legacy(core.int)),
    utmSouth: dart.fieldType(dart.legacy(core.bool)),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    k0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(utm.UniversalTransverseMercatorProjection, {
    /*utm.UniversalTransverseMercatorProjection.names*/get names() {
      return JSArrayOfStringL().of(["Universal Transverse Mercator System", "utm"]);
    }
  }, true);
  var lat0$0 = dart.privateName(tmerc, "TransverseMercatorProjection.lat0");
  var long0$1 = dart.privateName(tmerc, "TransverseMercatorProjection.long0");
  var x0$1 = dart.privateName(tmerc, "TransverseMercatorProjection.x0");
  var y0$1 = dart.privateName(tmerc, "TransverseMercatorProjection.y0");
  var en = dart.privateName(tmerc, "TransverseMercatorProjection.en");
  var ml0 = dart.privateName(tmerc, "TransverseMercatorProjection.ml0");
  tmerc.TransverseMercatorProjection = class TransverseMercatorProjection extends projection.Projection {
    get lat0() {
      return this[lat0$0];
    }
    set lat0(value) {
      this[lat0$0] = value;
    }
    get long0() {
      return this[long0$1];
    }
    set long0(value) {
      this[long0$1] = value;
    }
    get x0() {
      return this[x0$1];
    }
    set x0(value) {
      this[x0$1] = value;
    }
    get y0() {
      return this[y0$1];
    }
    set y0(value) {
      this[y0$1] = value;
    }
    get en() {
      return this[en];
    }
    set en(value) {
      this[en] = value;
    }
    get ml0() {
      return this[ml0];
    }
    set ml0(value) {
      this[ml0] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let delta_lon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      let con = null;
      let x = null;
      let y = null;
      let sin_phi = math.sin(lat);
      let cos_phi = math.cos(lat);
      if (this.es == null) {
        let b = cos_phi * math.sin(delta_lon);
        if ((b[$abs]() - 1)[$abs]() < dart.notNull(values.EPSLN)) {
          return p;
        } else {
          x = 0.5 * dart.notNull(this.a) * dart.notNull(this.k0) * math.log((1 + b) / (1 - b)) + dart.notNull(this.x0);
          y = cos_phi * math.cos(delta_lon) / math.sqrt(1 - math.pow(b, 2));
          b = y[$abs]();
          if (b >= 1) {
            if (b - 1 > dart.notNull(values.EPSLN)) {
              return p;
            } else {
              y = 0.0;
            }
          } else {
            y = math.acos(y);
          }
          if (dart.notNull(lat) < 0) {
            y = -dart.notNull(y);
          }
          y = dart.notNull(this.a) * dart.notNull(this.k0) * (dart.notNull(y) - dart.notNull(this.lat0)) + dart.notNull(this.y0);
        }
      } else {
        let al = cos_phi * dart.notNull(delta_lon);
        let als = math.pow(al, 2);
        let c = dart.notNull(this.ep2) * math.pow(cos_phi, 2);
        let cs = math.pow(c, 2);
        let tq = cos_phi[$abs]() > dart.notNull(values.EPSLN) ? math.tan(lat) : 0;
        let t = math.pow(tq, 2);
        let ts = math.pow(t, 2);
        con = 1 - dart.notNull(this.es) * math.pow(sin_phi, 2);
        al = al / math.sqrt(con);
        let ml = utils.pj_mlfn(lat, sin_phi, cos_phi, this.en);
        x = dart.notNull(this.a) * (dart.notNull(this.k0) * al * (1 + als / 6 * (1 - t + c + als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c + als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) + dart.notNull(this.x0);
        y = dart.notNull(this.a) * (dart.notNull(this.k0) * (dart.notNull(ml) - dart.notNull(this.ml0) + sin_phi * dart.notNull(delta_lon) * al / 2 * (1 + als / 12 * (5 - t + 9 * c + 4 * cs + als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c + als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) + dart.notNull(this.y0);
      }
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let con = null;
      let phi = null;
      let lat = null;
      let lon = null;
      let x = (dart.notNull(p.x) - dart.notNull(this.x0)) * (1 / dart.notNull(this.a));
      let y = (dart.notNull(p.y) - dart.notNull(this.y0)) * (1 / dart.notNull(this.a));
      if (this.es == null) {
        let f = math.exp(x / dart.notNull(this.k0));
        let g = 0.5 * (f - 1 / f);
        let temp = dart.notNull(this.lat0) + y / dart.notNull(this.k0);
        let h = math.cos(temp);
        con = math.sqrt((1 - math.pow(h, 2)) / (1 + math.pow(g, 2)));
        lat = math.asin(con);
        if (y < 0) {
          lat = -dart.notNull(lat);
        }
        if (g === 0 && h === 0) {
          lon = 0.0;
        } else {
          lon = utils.adjust_lon(math.atan2(g, h) + dart.notNull(this.long0));
        }
      } else {
        con = dart.notNull(this.ml0) + y / dart.notNull(this.k0);
        phi = utils.pj_inv_mlfn(con, this.es, this.en);
        if (phi[$abs]() < dart.notNull(values.HALF_PI)) {
          let sin_phi = math.sin(phi);
          let cos_phi = math.cos(phi);
          let tan_phi = cos_phi[$abs]() > dart.notNull(values.EPSLN) ? math.tan(phi) : 0;
          let c = dart.notNull(this.ep2) * math.pow(cos_phi, 2);
          let cs = math.pow(c, 2);
          let t = math.pow(tan_phi, 2);
          let ts = math.pow(t, 2);
          con = 1 - dart.notNull(this.es) * math.pow(sin_phi, 2);
          let d = x * math.sqrt(con) / dart.notNull(this.k0);
          let ds = math.pow(d, 2);
          con = dart.notNull(con) * tan_phi;
          lat = dart.notNull(phi) - dart.notNull(con) * ds / (1 - dart.notNull(this.es)) * 0.5 * (1 - ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs - ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c - ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));
          lon = utils.adjust_lon(dart.notNull(this.long0) + d * (1 - ds / 6 * (1 + 2 * t + c - ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c - ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi);
        } else {
          lat = dart.notNull(values.HALF_PI) * dart.notNull(utils.sign(y));
          lon = 0.0;
        }
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (tmerc.TransverseMercatorProjection.init = function(params) {
    let t0, t0$, t0$0;
    this[en] = null;
    this[ml0] = null;
    this[lat0$0] = params.lat0;
    this[long0$1] = params.long0;
    this[x0$1] = params.x0;
    this[y0$1] = params.y0;
    tmerc.TransverseMercatorProjection.__proto__.init.call(this, params);
    this.x0 = (t0 = this.x0, t0 == null ? 0.0 : t0);
    this.y0 = (t0$ = this.y0, t0$ == null ? 0.0 : t0$);
    if (this.long0 == null || this.long0[$isNaN]) {
      this.long0 = 0.0;
    }
    this.lat0 = (t0$0 = this.lat0, t0$0 == null ? 0.0 : t0$0);
    if (this.es != null) {
      this.en = utils.pj_enfn(this.es);
      this.ml0 = utils.pj_mlfn(this.lat0, math.sin(this.lat0), math.cos(this.lat0), this.en);
    }
  }).prototype = tmerc.TransverseMercatorProjection.prototype;
  dart.addTypeTests(tmerc.TransverseMercatorProjection);
  dart.addTypeCaches(tmerc.TransverseMercatorProjection);
  dart.setMethodSignature(tmerc.TransverseMercatorProjection, () => ({
    __proto__: dart.getMethods(tmerc.TransverseMercatorProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(tmerc.TransverseMercatorProjection, L6);
  dart.setFieldSignature(tmerc.TransverseMercatorProjection, () => ({
    __proto__: dart.getFields(tmerc.TransverseMercatorProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    en: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    ml0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(tmerc.TransverseMercatorProjection, {
    /*tmerc.TransverseMercatorProjection.names*/get names() {
      return JSArrayOfStringL().of(["Transverse_Mercator", "Transverse Mercator", "tmerc"]);
    }
  }, true);
  var lat0$1 = dart.privateName(gauss, "GaussProjection.lat0");
  var long0$2 = dart.privateName(gauss, "GaussProjection.long0");
  var rc = dart.privateName(gauss, "GaussProjection.rc");
  var C = dart.privateName(gauss, "GaussProjection.C");
  var phic0 = dart.privateName(gauss, "GaussProjection.phic0");
  var ratexp = dart.privateName(gauss, "GaussProjection.ratexp");
  var K = dart.privateName(gauss, "GaussProjection.K");
  var x0$2 = dart.privateName(gauss, "GaussProjection.x0");
  var y0$2 = dart.privateName(gauss, "GaussProjection.y0");
  gauss.GaussProjection = class GaussProjection extends projection.Projection {
    get lat0() {
      return this[lat0$1];
    }
    set lat0(value) {
      this[lat0$1] = value;
    }
    get long0() {
      return this[long0$2];
    }
    set long0(value) {
      this[long0$2] = value;
    }
    get rc() {
      return this[rc];
    }
    set rc(value) {
      this[rc] = value;
    }
    get C() {
      return this[C];
    }
    set C(value) {
      this[C] = value;
    }
    get phic0() {
      return this[phic0];
    }
    set phic0(value) {
      this[phic0] = value;
    }
    get ratexp() {
      return this[ratexp];
    }
    set ratexp(value) {
      this[ratexp] = value;
    }
    get K() {
      return this[K];
    }
    set K(value) {
      this[K] = value;
    }
    get x0() {
      return this[x0$2];
    }
    set x0(value) {
      this[x0$2] = value;
    }
    get y0() {
      return this[y0$2];
    }
    set y0(value) {
      this[y0$2] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      p.y = 2 * math.atan(dart.notNull(this.K) * math.pow(math.tan(0.5 * dart.notNull(lat) + dart.notNull(values.FORTPI)), this.C) * dart.notNull(utils.srat(dart.notNull(this.e) * math.sin(lat), this.ratexp))) - dart.notNull(values.HALF_PI);
      p.x = dart.notNull(this.C) * dart.notNull(lon);
      return p;
    }
    inverse(p) {
      let DEL_TOL = 1e-14;
      let lon = dart.notNull(p.x) / dart.notNull(this.C);
      let lat = p.y;
      let num = math.pow(math.tan(0.5 * dart.notNull(lat) + dart.notNull(values.FORTPI)) / dart.notNull(this.K), 1 / dart.notNull(this.C));
      for (let i = 0; i < dart.notNull(gauss.MAX_ITER); i = i + 1) {
        lat = 2 * math.atan(num * dart.notNull(utils.srat(dart.notNull(this.e) * math.sin(p.y), -0.5 * dart.notNull(this.e)))) - dart.notNull(values.HALF_PI);
        if ((dart.notNull(lat) - dart.notNull(p.y))[$abs]() < DEL_TOL) {
          break;
        }
        p.y = lat;
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (gauss.GaussProjection.init = function(params) {
    this[rc] = null;
    this[C] = null;
    this[phic0] = null;
    this[ratexp] = null;
    this[K] = null;
    this[lat0$1] = params.lat0;
    this[long0$2] = params.long0;
    this[x0$2] = params.x0;
    this[y0$2] = params.y0;
    gauss.GaussProjection.__proto__.init.call(this, params);
    let sphi = math.sin(this.lat0);
    let cphi = math.cos(this.lat0);
    cphi = cphi * cphi;
    this.rc = math.sqrt(1 - dart.notNull(this.es)) / (1 - dart.notNull(this.es) * sphi * sphi);
    this.C = math.sqrt(1 + dart.notNull(this.es) * cphi * cphi / (1 - dart.notNull(this.es)));
    this.phic0 = math.asin(sphi / dart.notNull(this.C));
    this.ratexp = 0.5 * dart.notNull(this.C) * dart.notNull(this.e);
    this.K = math.tan(0.5 * dart.notNull(this.phic0) + dart.notNull(values.FORTPI)) / (math.pow(math.tan(0.5 * dart.notNull(this.lat0) + dart.notNull(values.FORTPI)), this.C) * dart.notNull(utils.srat(dart.notNull(this.e) * sphi, this.ratexp)));
  }).prototype = gauss.GaussProjection.prototype;
  dart.addTypeTests(gauss.GaussProjection);
  dart.addTypeCaches(gauss.GaussProjection);
  dart.setMethodSignature(gauss.GaussProjection, () => ({
    __proto__: dart.getMethods(gauss.GaussProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(gauss.GaussProjection, L7);
  dart.setFieldSignature(gauss.GaussProjection, () => ({
    __proto__: dart.getFields(gauss.GaussProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    rc: dart.fieldType(dart.legacy(core.double)),
    C: dart.fieldType(dart.legacy(core.double)),
    phic0: dart.fieldType(dart.legacy(core.double)),
    ratexp: dart.fieldType(dart.legacy(core.double)),
    K: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(gauss.GaussProjection, {
    /*gauss.GaussProjection.names*/get names() {
      return JSArrayOfStringL().of(["gauss"]);
    }
  }, true);
  var sinc0 = dart.privateName(sterea, "StereographicNorthProjection.sinc0");
  var cosc0 = dart.privateName(sterea, "StereographicNorthProjection.cosc0");
  var R2 = dart.privateName(sterea, "StereographicNorthProjection.R2");
  sterea.StereographicNorthProjection = class StereographicNorthProjection extends gauss.GaussProjection {
    get sinc0() {
      return this[sinc0];
    }
    set sinc0(value) {
      this[sinc0] = value;
    }
    get cosc0() {
      return this[cosc0];
    }
    set cosc0(value) {
      this[cosc0] = value;
    }
    get R2() {
      return this[R2];
    }
    set R2(value) {
      this[R2] = value;
    }
    forward(p) {
      let sinc = null;
      let cosc = null;
      let cosl = null;
      let k = null;
      p.x = utils.adjust_lon(dart.notNull(p.x) - dart.notNull(this.long0));
      super.forward(p);
      sinc = math.sin(p.y);
      cosc = math.cos(p.y);
      cosl = math.cos(p.x);
      k = dart.notNull(this.k0) * dart.notNull(this.R2) / (1 + dart.notNull(this.sinc0) * dart.notNull(sinc) + dart.notNull(this.cosc0) * dart.notNull(cosc) * dart.notNull(cosl));
      p.x = dart.notNull(k) * dart.notNull(cosc) * math.sin(p.x);
      p.y = dart.notNull(k) * (dart.notNull(this.cosc0) * dart.notNull(sinc) - dart.notNull(this.sinc0) * dart.notNull(cosc) * dart.notNull(cosl));
      p.x = dart.notNull(this.a) * dart.notNull(p.x) + dart.notNull(this.x0);
      p.y = dart.notNull(this.a) * dart.notNull(p.y) + dart.notNull(this.y0);
      return p;
    }
    inverse(p) {
      let t0, t0$;
      let sinc = null;
      let cosc = null;
      let lon = null;
      let lat = null;
      let rho = null;
      p.x = (dart.notNull(p.x) - dart.notNull(this.x0)) / dart.notNull(this.a);
      p.y = (dart.notNull(p.y) - dart.notNull(this.y0)) / dart.notNull(this.a);
      t0 = p;
      t0.x = dart.notNull(t0.x) / dart.notNull(this.k0);
      t0$ = p;
      t0$.y = dart.notNull(t0$.y) / dart.notNull(this.k0);
      if (!(rho = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y)))[$isNaN]) {
        let c = 2 * math.atan2(rho, this.R2);
        sinc = math.sin(c);
        cosc = math.cos(c);
        lat = math.asin(dart.notNull(cosc) * dart.notNull(this.sinc0) + dart.notNull(p.y) * dart.notNull(sinc) * dart.notNull(this.cosc0) / dart.notNull(rho));
        lon = math.atan2(dart.notNull(p.x) * dart.notNull(sinc), dart.notNull(rho) * dart.notNull(this.cosc0) * dart.notNull(cosc) - dart.notNull(p.y) * dart.notNull(this.sinc0) * dart.notNull(sinc));
      } else {
        lat = this.phic0;
        lon = 0.0;
      }
      p.x = lon;
      p.y = lat;
      super.inverse(p);
      p.x = utils.adjust_lon(dart.notNull(p.x) + dart.notNull(this.long0));
      return p;
    }
  };
  (sterea.StereographicNorthProjection.init = function(params) {
    this[sinc0] = null;
    this[cosc0] = null;
    this[R2] = null;
    sterea.StereographicNorthProjection.__proto__.init.call(this, params);
    if (this.rc == null) {
      return;
    }
    this.sinc0 = math.sin(this.phic0);
    this.cosc0 = math.cos(this.phic0);
    this.R2 = 2 * dart.notNull(this.rc);
  }).prototype = sterea.StereographicNorthProjection.prototype;
  dart.addTypeTests(sterea.StereographicNorthProjection);
  dart.addTypeCaches(sterea.StereographicNorthProjection);
  dart.setLibraryUri(sterea.StereographicNorthProjection, L8);
  dart.setFieldSignature(sterea.StereographicNorthProjection, () => ({
    __proto__: dart.getFields(sterea.StereographicNorthProjection.__proto__),
    sinc0: dart.fieldType(dart.legacy(core.double)),
    cosc0: dart.fieldType(dart.legacy(core.double)),
    R2: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(sterea.StereographicNorthProjection, {
    /*sterea.StereographicNorthProjection.names*/get names() {
      return JSArrayOfStringL().of(["Stereographic_North_Pole", "Oblique_Stereographic", "Polar_Stereographic", "sterea", "Oblique Stereographic Alternative", "Double_Stereographic"]);
    }
  }, true);
  var _ssfn = dart.privateName(stere, "_ssfn");
  var lat0$2 = dart.privateName(stere, "StereographicSouthProjection.lat0");
  var long0$3 = dart.privateName(stere, "StereographicSouthProjection.long0");
  var lat_ts = dart.privateName(stere, "StereographicSouthProjection.lat_ts");
  var x0$3 = dart.privateName(stere, "StereographicSouthProjection.x0");
  var y0$3 = dart.privateName(stere, "StereographicSouthProjection.y0");
  var sinlat0 = dart.privateName(stere, "StereographicSouthProjection.sinlat0");
  var coslat0 = dart.privateName(stere, "StereographicSouthProjection.coslat0");
  var rh = dart.privateName(stere, "StereographicSouthProjection.rh");
  var con = dart.privateName(stere, "StereographicSouthProjection.con");
  var cons = dart.privateName(stere, "StereographicSouthProjection.cons");
  var ms1 = dart.privateName(stere, "StereographicSouthProjection.ms1");
  var X0 = dart.privateName(stere, "StereographicSouthProjection.X0");
  var cosX0 = dart.privateName(stere, "StereographicSouthProjection.cosX0");
  var sinX0 = dart.privateName(stere, "StereographicSouthProjection.sinX0");
  stere.StereographicSouthProjection = class StereographicSouthProjection extends projection.Projection {
    get lat0() {
      return this[lat0$2];
    }
    set lat0(value) {
      this[lat0$2] = value;
    }
    get long0() {
      return this[long0$3];
    }
    set long0(value) {
      this[long0$3] = value;
    }
    get lat_ts() {
      return this[lat_ts];
    }
    set lat_ts(value) {
      this[lat_ts] = value;
    }
    get x0() {
      return this[x0$3];
    }
    set x0(value) {
      this[x0$3] = value;
    }
    get y0() {
      return this[y0$3];
    }
    set y0(value) {
      this[y0$3] = value;
    }
    get sinlat0() {
      return this[sinlat0];
    }
    set sinlat0(value) {
      this[sinlat0] = value;
    }
    get coslat0() {
      return this[coslat0];
    }
    set coslat0(value) {
      this[coslat0] = value;
    }
    get rh() {
      return this[rh];
    }
    set rh(value) {
      this[rh] = value;
    }
    get con() {
      return this[con];
    }
    set con(value) {
      this[con] = value;
    }
    get cons() {
      return this[cons];
    }
    set cons(value) {
      this[cons] = value;
    }
    get ms1() {
      return this[ms1];
    }
    set ms1(value) {
      this[ms1] = value;
    }
    get X0() {
      return this[X0];
    }
    set X0(value) {
      this[X0] = value;
    }
    get cosX0() {
      return this[cosX0];
    }
    set cosX0(value) {
      this[cosX0] = value;
    }
    get sinX0() {
      return this[sinX0];
    }
    set sinX0(value) {
      this[sinX0] = value;
    }
    [_ssfn](phit, sinphi, eccen) {
      sinphi = dart.notNull(sinphi) * dart.notNull(eccen);
      return math.tan(0.5 * (dart.notNull(values.HALF_PI) + dart.notNull(phit))) * math.pow((1 - dart.notNull(sinphi)) / (1 + dart.notNull(sinphi)), 0.5 * dart.notNull(eccen));
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let sinlat = math.sin(lat);
      let coslat = math.cos(lat);
      let A = null;
      let X = null;
      let sinX = null;
      let cosX = null;
      let ts = null;
      let rh = null;
      let dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      if (((dart.notNull(lon) - dart.notNull(this.long0))[$abs]() - 3.141592653589793)[$abs]() <= dart.notNull(values.EPSLN) && (dart.notNull(lat) + dart.notNull(this.lat0))[$abs]() <= dart.notNull(values.EPSLN)) {
        p.x = 0 / 0;
        p.y = 0 / 0;
        return p;
      }
      if (this.sphere != null && dart.test(this.sphere)) {
        A = 2 * dart.notNull(this.k0) / (1 + dart.notNull(this.sinlat0) * sinlat + dart.notNull(this.coslat0) * coslat * math.cos(dlon));
        p.x = dart.notNull(this.a) * dart.notNull(core.num.as(A)) * coslat * math.sin(dlon) + dart.notNull(this.x0);
        p.y = dart.notNull(this.a) * dart.notNull(core.num.as(A)) * (dart.notNull(this.coslat0) * sinlat - dart.notNull(this.sinlat0) * coslat * math.cos(dlon)) + dart.notNull(this.y0);
        return p;
      } else {
        X = 2 * math.atan(this[_ssfn](lat, sinlat, this.e)) - dart.notNull(values.HALF_PI);
        cosX = math.cos(core.num.as(X));
        sinX = math.sin(core.num.as(X));
        if (this.coslat0[$abs]() <= dart.notNull(values.EPSLN)) {
          ts = utils.tsfnz(this.e, dart.notNull(lat) * dart.notNull(this.con), dart.notNull(this.con) * sinlat);
          rh = 2 * dart.notNull(this.a) * dart.notNull(this.k0) * dart.notNull(core.num.as(ts)) / dart.notNull(this.cons);
          p.x = dart.notNull(this.x0) + dart.notNull(core.num.as(dart.dsend(rh, '*', [math.sin(dart.notNull(lon) - dart.notNull(this.long0))])));
          p.y = dart.notNull(this.y0) - dart.notNull(this.con) * dart.notNull(core.num.as(rh)) * math.cos(dart.notNull(lon) - dart.notNull(this.long0));
          return p;
        } else if (this.sinlat0[$abs]() < dart.notNull(values.EPSLN)) {
          A = 2 * dart.notNull(this.a) * dart.notNull(this.k0) / (1 + dart.notNull(core.num.as(dart.dsend(cosX, '*', [math.cos(dlon)]))));
          p.y = doubleL().as(dart.dsend(A, '*', [sinX]));
        } else {
          A = 2 * dart.notNull(this.a) * dart.notNull(this.k0) * dart.notNull(this.ms1) / (dart.notNull(this.cosX0) * (1 + dart.notNull(this.sinX0) * dart.notNull(core.num.as(sinX)) + dart.notNull(this.cosX0) * dart.notNull(core.num.as(cosX)) * math.cos(dlon)));
          p.y = doubleL().as(dart.dsend(dart.dsend(A, '*', [dart.notNull(this.cosX0) * dart.notNull(core.num.as(sinX)) - dart.notNull(this.sinX0) * dart.notNull(core.num.as(cosX)) * math.cos(dlon)]), '+', [this.y0]));
        }
        p.x = doubleL().as(dart.dsend(dart.dsend(dart.dsend(A, '*', [cosX]), '*', [math.sin(dlon)]), '+', [this.x0]));
      }
      return p;
    }
    inverse(p) {
      let t0, t0$, t0$0, t0$1;
      t0 = p;
      t0.x = dart.notNull(t0.x) - dart.notNull(this.x0);
      t0$ = p;
      t0$.y = dart.notNull(t0$.y) - dart.notNull(this.y0);
      let lon = null;
      let lat = null;
      let ts = null;
      let ce = null;
      let Chi = null;
      let rh = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
      if (this.sphere != null && dart.test(this.sphere)) {
        let c = 2 * math.atan(rh / (2 * dart.notNull(this.a) * dart.notNull(this.k0)));
        lon = this.long0;
        lat = this.lat0;
        if (rh <= dart.notNull(values.EPSLN)) {
          p.x = lon;
          p.y = lat;
          return p;
        }
        lat = math.asin(math.cos(c) * dart.notNull(this.sinlat0) + dart.notNull(p.y) * math.sin(c) * dart.notNull(this.coslat0) / rh);
        if (this.coslat0[$abs]() < dart.notNull(values.EPSLN)) {
          if (dart.notNull(this.lat0) > 0) {
            lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(p.x, -1 * dart.notNull(p.y)));
          } else {
            lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(p.x, p.y));
          }
        } else {
          lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(dart.notNull(p.x) * math.sin(c), rh * dart.notNull(this.coslat0) * math.cos(c) - dart.notNull(p.y) * dart.notNull(this.sinlat0) * math.sin(c)));
        }
        p.x = lon;
        p.y = lat;
        return p;
      } else {
        if (this.coslat0[$abs]() <= dart.notNull(values.EPSLN)) {
          if (rh <= dart.notNull(values.EPSLN)) {
            lat = this.lat0;
            lon = this.long0;
            p.x = lon;
            p.y = lat;
            return p;
          }
          t0$0 = p;
          t0$0.x = dart.notNull(t0$0.x) * dart.notNull(this.con);
          t0$1 = p;
          t0$1.y = dart.notNull(t0$1.y) * dart.notNull(this.con);
          ts = rh * dart.notNull(this.cons) / (2 * dart.notNull(this.a) * dart.notNull(this.k0));
          lat = dart.notNull(this.con) * dart.notNull(utils.phi2z(this.e, ts));
          lon = dart.notNull(this.con) * dart.notNull(utils.adjust_lon(dart.notNull(this.con) * dart.notNull(this.long0) + math.atan2(p.x, -1 * dart.notNull(p.y))));
        } else {
          ce = 2 * math.atan(rh * dart.notNull(this.cosX0) / (2 * dart.notNull(this.a) * dart.notNull(this.k0) * dart.notNull(this.ms1)));
          lon = this.long0;
          if (rh <= dart.notNull(values.EPSLN)) {
            Chi = this.X0;
          } else {
            Chi = math.asin(math.cos(ce) * dart.notNull(this.sinX0) + dart.notNull(p.y) * math.sin(ce) * dart.notNull(this.cosX0) / rh);
            lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(dart.notNull(p.x) * math.sin(ce), rh * dart.notNull(this.cosX0) * math.cos(ce) - dart.notNull(p.y) * dart.notNull(this.sinX0) * math.sin(ce)));
          }
          lat = -1 * dart.notNull(utils.phi2z(this.e, math.tan(0.5 * (dart.notNull(values.HALF_PI) + dart.notNull(Chi)))));
        }
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (stere.StereographicSouthProjection.init = function(params) {
    let t0;
    this[sinlat0] = null;
    this[coslat0] = null;
    this[rh] = null;
    this[con] = null;
    this[cons] = null;
    this[ms1] = null;
    this[X0] = null;
    this[cosX0] = null;
    this[sinX0] = null;
    this[lat0$2] = params.lat0;
    this[long0$3] = params.long0;
    this[lat_ts] = (t0 = params.lat_ts, t0 == null ? 0 / 0 : t0);
    this[x0$3] = params.x0;
    this[y0$3] = params.y0;
    stere.StereographicSouthProjection.__proto__.init.call(this, params);
    this.coslat0 = math.cos(this.lat0);
    this.sinlat0 = math.sin(this.lat0);
    if (this.sphere != null && dart.test(this.sphere)) {
      if (this.k0 === 1.0 && !this.lat_ts[$isNaN] && this.coslat0[$abs]() <= dart.notNull(values.EPSLN)) {
        this.k0 = 0.5 * (1 + dart.notNull(utils.sign(this.lat0)) * math.sin(this.lat_ts));
      }
    } else {
      if (this.coslat0[$abs]() <= dart.notNull(values.EPSLN)) {
        if (dart.notNull(this.lat0) > 0) {
          this.con = 1.0;
        } else {
          this.con = -1.0;
        }
      }
      this.cons = math.sqrt(math.pow(1 + dart.notNull(this.e), 1 + dart.notNull(this.e)) * math.pow(1 - dart.notNull(this.e), 1 - dart.notNull(this.e)));
      if (this.k0 === 1 && !this.lat_ts[$isNaN] && this.coslat0[$abs]() <= dart.notNull(values.EPSLN)) {
        this.k0 = 0.5 * dart.notNull(this.cons) * dart.notNull(utils.msfnz(this.e, math.sin(this.lat_ts), math.cos(this.lat_ts))) / dart.notNull(utils.tsfnz(this.e, dart.notNull(this.con) * dart.notNull(this.lat_ts), dart.notNull(this.con) * math.sin(this.lat_ts)));
      }
      this.ms1 = utils.msfnz(this.e, this.sinlat0, this.coslat0);
      this.X0 = 2 * math.atan(this[_ssfn](this.lat0, this.sinlat0, this.e)) - dart.notNull(values.HALF_PI);
      this.cosX0 = math.cos(this.X0);
      this.sinX0 = math.sin(this.X0);
    }
  }).prototype = stere.StereographicSouthProjection.prototype;
  dart.addTypeTests(stere.StereographicSouthProjection);
  dart.addTypeCaches(stere.StereographicSouthProjection);
  dart.setMethodSignature(stere.StereographicSouthProjection, () => ({
    __proto__: dart.getMethods(stere.StereographicSouthProjection.__proto__),
    [_ssfn]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(stere.StereographicSouthProjection, L9);
  dart.setFieldSignature(stere.StereographicSouthProjection, () => ({
    __proto__: dart.getFields(stere.StereographicSouthProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    lat_ts: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    sinlat0: dart.fieldType(dart.legacy(core.double)),
    coslat0: dart.fieldType(dart.legacy(core.double)),
    rh: dart.fieldType(dart.legacy(core.double)),
    con: dart.fieldType(dart.legacy(core.double)),
    cons: dart.fieldType(dart.legacy(core.double)),
    ms1: dart.fieldType(dart.legacy(core.double)),
    X0: dart.fieldType(dart.legacy(core.double)),
    cosX0: dart.fieldType(dart.legacy(core.double)),
    sinX0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(stere.StereographicSouthProjection, {
    /*stere.StereographicSouthProjection.names*/get names() {
      return JSArrayOfStringL().of(["stere", "Stereographic_South_Pole", "Polar Stereographic (variant B)"]);
    }
  }, true);
  var x0$4 = dart.privateName(somerc, "SwissObliqueMercatorProjection.x0");
  var y0$4 = dart.privateName(somerc, "SwissObliqueMercatorProjection.y0");
  var lambda0 = dart.privateName(somerc, "SwissObliqueMercatorProjection.lambda0");
  var R$ = dart.privateName(somerc, "SwissObliqueMercatorProjection.R");
  var alpha = dart.privateName(somerc, "SwissObliqueMercatorProjection.alpha");
  var b0 = dart.privateName(somerc, "SwissObliqueMercatorProjection.b0");
  var K$ = dart.privateName(somerc, "SwissObliqueMercatorProjection.K");
  somerc.SwissObliqueMercatorProjection = class SwissObliqueMercatorProjection extends projection.Projection {
    get x0() {
      return this[x0$4];
    }
    set x0(value) {
      this[x0$4] = value;
    }
    get y0() {
      return this[y0$4];
    }
    set y0(value) {
      this[y0$4] = value;
    }
    get lambda0() {
      return this[lambda0];
    }
    set lambda0(value) {
      this[lambda0] = value;
    }
    get R() {
      return this[R$];
    }
    set R(value) {
      this[R$] = value;
    }
    get alpha() {
      return this[alpha];
    }
    set alpha(value) {
      this[alpha] = value;
    }
    get b0() {
      return this[b0];
    }
    set b0(value) {
      this[b0] = value;
    }
    get K() {
      return this[K$];
    }
    set K(value) {
      this[K$] = value;
    }
    forward(p) {
      let Sa1 = math.log(math.tan(3.141592653589793 / 4 - dart.notNull(p.y) / 2));
      let Sa2 = dart.notNull(this.e) / 2 * math.log((1 + dart.notNull(this.e) * math.sin(p.y)) / (1 - dart.notNull(this.e) * math.sin(p.y)));
      let S = -dart.notNull(this.alpha) * (Sa1 + Sa2) + dart.notNull(this.K);
      let b = 2 * (math.atan(math.exp(S)) - 3.141592653589793 / 4);
      let I = dart.notNull(this.alpha) * (dart.notNull(p.x) - dart.notNull(this.lambda0));
      let rotI = math.atan(math.sin(I) / (math.sin(this.b0) * math.tan(b) + math.cos(this.b0) * math.cos(I)));
      let rotB = math.asin(math.cos(this.b0) * math.sin(b) - math.sin(this.b0) * math.cos(b) * math.cos(I));
      p.y = dart.notNull(this.R) / 2 * math.log((1 + math.sin(rotB)) / (1 - math.sin(rotB))) + dart.notNull(this.y0);
      p.x = dart.notNull(this.R) * rotI + dart.notNull(this.x0);
      return p;
    }
    inverse(p) {
      let Y = dart.notNull(p.x) - dart.notNull(this.x0);
      let X = dart.notNull(p.y) - dart.notNull(this.y0);
      let rotI = Y / dart.notNull(this.R);
      let rotB = 2 * (math.atan(math.exp(X / dart.notNull(this.R))) - 3.141592653589793 / 4);
      let b = math.asin(math.cos(this.b0) * math.sin(rotB) + math.sin(this.b0) * math.cos(rotB) * math.cos(rotI));
      let I = math.atan(math.sin(rotI) / (math.cos(this.b0) * math.cos(rotI) - math.sin(this.b0) * math.tan(rotB)));
      let lambda = dart.notNull(this.lambda0) + I / dart.notNull(this.alpha);
      let S = 0.0;
      let phy = b;
      let prevPhy = -1000.0;
      let iteration = 0;
      while ((phy - prevPhy)[$abs]() > 1e-7) {
        if ((iteration = iteration + 1) > 20) {
          return p;
        }
        S = 1 / dart.notNull(this.alpha) * (math.log(math.tan(3.141592653589793 / 4 + b / 2)) - dart.notNull(this.K)) + dart.notNull(this.e) * math.log(math.tan(3.141592653589793 / 4 + math.asin(dart.notNull(this.e) * math.sin(phy)) / 2));
        prevPhy = phy;
        phy = 2 * math.atan(math.exp(S)) - 3.141592653589793 / 2;
      }
      p.x = lambda;
      p.y = phy;
      return p;
    }
  };
  (somerc.SwissObliqueMercatorProjection.init = function(params) {
    this[x0$4] = null;
    this[y0$4] = null;
    this[lambda0] = null;
    this[R$] = null;
    this[alpha] = null;
    this[b0] = null;
    this[K$] = null;
    somerc.SwissObliqueMercatorProjection.__proto__.init.call(this, params);
    let lat0 = params.lat0;
    let long0 = params.long0;
    this.x0 = params.x0;
    this.y0 = params.y0;
    let phy0 = lat0;
    this.lambda0 = long0;
    let sinPhy0 = math.sin(phy0);
    let semiMajorAxis = this.a;
    let invF = this.rf;
    let flattening = 1 / dart.notNull(invF);
    let e2 = 2 * flattening - math.pow(flattening, 2);
    this.e = math.sqrt(e2);
    this.R = dart.notNull(this.k0) * dart.notNull(semiMajorAxis) * math.sqrt(1 - e2) / (1 - e2 * math.pow(sinPhy0, 2));
    this.alpha = math.sqrt(1 + e2 / (1 - e2) * math.pow(math.cos(phy0), 4));
    this.b0 = math.asin(sinPhy0 / dart.notNull(this.alpha));
    let k1 = math.log(math.tan(3.141592653589793 / 4 + dart.notNull(this.b0) / 2));
    let k2 = math.log(math.tan(3.141592653589793 / 4 + dart.notNull(phy0) / 2));
    let k3 = math.log((1 + dart.notNull(this.e) * sinPhy0) / (1 - dart.notNull(this.e) * sinPhy0));
    this.K = k1 - dart.notNull(this.alpha) * k2 + dart.notNull(this.alpha) * dart.notNull(this.e) / 2 * k3;
  }).prototype = somerc.SwissObliqueMercatorProjection.prototype;
  dart.addTypeTests(somerc.SwissObliqueMercatorProjection);
  dart.addTypeCaches(somerc.SwissObliqueMercatorProjection);
  dart.setMethodSignature(somerc.SwissObliqueMercatorProjection, () => ({
    __proto__: dart.getMethods(somerc.SwissObliqueMercatorProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(somerc.SwissObliqueMercatorProjection, L10);
  dart.setFieldSignature(somerc.SwissObliqueMercatorProjection, () => ({
    __proto__: dart.getFields(somerc.SwissObliqueMercatorProjection.__proto__),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    lambda0: dart.fieldType(dart.legacy(core.double)),
    R: dart.fieldType(dart.legacy(core.double)),
    alpha: dart.fieldType(dart.legacy(core.double)),
    b0: dart.fieldType(dart.legacy(core.double)),
    K: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(somerc.SwissObliqueMercatorProjection, {
    /*somerc.SwissObliqueMercatorProjection.names*/get names() {
      return JSArrayOfStringL().of(["somerc"]);
    }
  }, true);
  var en$ = dart.privateName(sinu, "SinusoidalProjection.en");
  var lat0$3 = dart.privateName(sinu, "SinusoidalProjection.lat0");
  var long0$4 = dart.privateName(sinu, "SinusoidalProjection.long0");
  var x0$5 = dart.privateName(sinu, "SinusoidalProjection.x0");
  var y0$5 = dart.privateName(sinu, "SinusoidalProjection.y0");
  var n = dart.privateName(sinu, "SinusoidalProjection.n");
  var m = dart.privateName(sinu, "SinusoidalProjection.m");
  var C_y = dart.privateName(sinu, "SinusoidalProjection.C_y");
  var C_x = dart.privateName(sinu, "SinusoidalProjection.C_x");
  sinu.SinusoidalProjection = class SinusoidalProjection extends projection.Projection {
    get en() {
      return this[en$];
    }
    set en(value) {
      this[en$] = value;
    }
    get lat0() {
      return this[lat0$3];
    }
    set lat0(value) {
      this[lat0$3] = value;
    }
    get long0() {
      return this[long0$4];
    }
    set long0(value) {
      this[long0$4] = value;
    }
    get x0() {
      return this[x0$5];
    }
    set x0(value) {
      this[x0$5] = value;
    }
    get y0() {
      return this[y0$5];
    }
    set y0(value) {
      this[y0$5] = value;
    }
    get n() {
      return this[n];
    }
    set n(value) {
      this[n] = value;
    }
    get m() {
      return this[m];
    }
    set m(value) {
      this[m] = value;
    }
    get C_y() {
      return this[C_y];
    }
    set C_y(value) {
      this[C_y] = value;
    }
    get C_x() {
      return this[C_x];
    }
    set C_x(value) {
      this[C_x] = value;
    }
    forward(p) {
      let x = null;
      let y = null;
      let lon = p.x;
      let lat = p.y;
      lon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      if (this.sphere != null && dart.test(this.sphere)) {
        if (this.m == null) {
          lat = this.n !== 1 ? math.asin(dart.notNull(this.n) * math.sin(lat)) : lat;
        } else {
          let k = dart.notNull(this.n) * math.sin(lat);
          for (let i = 0; i < dart.notNull(sinu.SinusoidalProjection.MAX_ITER); i = i + 1) {
            let V = (dart.notNull(this.m) * dart.notNull(lat) + math.sin(lat) - k) / (dart.notNull(this.m) + math.cos(lat));
            lat = dart.notNull(lat) - V;
            if (V[$abs]() < dart.notNull(values.EPSLN)) {
              break;
            }
          }
        }
        x = dart.notNull(this.a) * dart.notNull(this.C_x) * dart.notNull(lon) * (dart.notNull(this.m) + math.cos(lat));
        y = dart.notNull(this.a) * dart.notNull(this.C_y) * dart.notNull(lat);
      } else {
        let s = math.sin(lat);
        let c = math.cos(lat);
        y = dart.notNull(this.a) * dart.notNull(utils.pj_mlfn(lat, s, c, this.en));
        x = dart.notNull(this.a) * dart.notNull(lon) * c / math.sqrt(1 - dart.notNull(this.es) * s * s);
      }
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let t0, t0$;
      let lat = null;
      let temp = null;
      let lon = null;
      let s = null;
      t0 = p;
      t0.x = dart.notNull(t0.x) - dart.notNull(this.x0);
      lon = dart.notNull(p.x) / dart.notNull(this.a);
      t0$ = p;
      t0$.y = dart.notNull(t0$.y) - dart.notNull(this.y0);
      lat = dart.notNull(p.y) / dart.notNull(this.a);
      if (this.sphere != null && dart.test(this.sphere)) {
        lat = dart.notNull(lat) / dart.notNull(this.C_y);
        lon = dart.notNull(lon) / (dart.notNull(this.C_x) * (dart.notNull(this.m) + math.cos(lat)));
        if (this.m != null) {
          lat = utils.asinz((dart.notNull(this.m) * dart.notNull(lat) + math.sin(lat)) / dart.notNull(this.n));
        } else if (this.n !== 1) {
          lat = utils.asinz(math.sin(lat) / dart.notNull(this.n));
        }
        lon = utils.adjust_lon(dart.notNull(lon) + dart.notNull(this.long0));
        lat = utils.adjust_lat(lat);
      } else {
        lat = utils.pj_inv_mlfn(dart.notNull(p.y) / dart.notNull(this.a), this.es, this.en);
        s = lat[$abs]();
        if (dart.notNull(s) < dart.notNull(values.HALF_PI)) {
          s = math.sin(lat);
          temp = dart.notNull(this.long0) + dart.notNull(p.x) * math.sqrt(1 - dart.notNull(this.es) * dart.notNull(s) * dart.notNull(s)) / (dart.notNull(this.a) * math.cos(lat));
          lon = utils.adjust_lon(temp);
        } else if (dart.notNull(s) - dart.notNull(values.EPSLN) < dart.notNull(values.HALF_PI)) {
          lon = this.long0;
        }
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (sinu.SinusoidalProjection.init = function(params) {
    this[en$] = null;
    this[n] = null;
    this[m] = null;
    this[C_y] = null;
    this[C_x] = null;
    this[lat0$3] = params.lat0;
    this[long0$4] = params.long0;
    this[x0$5] = params.x0;
    this[y0$5] = params.y0;
    sinu.SinusoidalProjection.__proto__.init.call(this, params);
    if (this.sphere == null || this.sphere != null && !dart.test(this.sphere)) {
      this.en = utils.pj_enfn(this.es);
    } else {
      this.n = 1.0;
      this.m = 0.0;
      this.es = 0.0;
      this.C_y = math.sqrt((dart.notNull(this.m) + 1) / dart.notNull(this.n));
      this.C_x = dart.notNull(this.C_y) / (dart.notNull(this.m) + 1);
    }
  }).prototype = sinu.SinusoidalProjection.prototype;
  dart.addTypeTests(sinu.SinusoidalProjection);
  dart.addTypeCaches(sinu.SinusoidalProjection);
  dart.setMethodSignature(sinu.SinusoidalProjection, () => ({
    __proto__: dart.getMethods(sinu.SinusoidalProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(sinu.SinusoidalProjection, L11);
  dart.setFieldSignature(sinu.SinusoidalProjection, () => ({
    __proto__: dart.getFields(sinu.SinusoidalProjection.__proto__),
    en: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    n: dart.fieldType(dart.legacy(core.double)),
    m: dart.fieldType(dart.legacy(core.double)),
    C_y: dart.fieldType(dart.legacy(core.double)),
    C_x: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(sinu.SinusoidalProjection, {
    /*sinu.SinusoidalProjection.names*/get names() {
      return JSArrayOfStringL().of(["Sinusoidal", "sinu"]);
    },
    /*sinu.SinusoidalProjection.MAX_ITER*/get MAX_ITER() {
      return 20;
    }
  }, true);
  var _poly3_val = dart.privateName(robin, "_poly3_val");
  var _poly3_der = dart.privateName(robin, "_poly3_der");
  var _newton_rapshon = dart.privateName(robin, "_newton_rapshon");
  var x0$6 = dart.privateName(robin, "RobinsonProjection.x0");
  var y0$6 = dart.privateName(robin, "RobinsonProjection.y0");
  var long0$5 = dart.privateName(robin, "RobinsonProjection.long0");
  var es$ = dart.privateName(robin, "RobinsonProjection.es");
  var title = dart.privateName(robin, "RobinsonProjection.title");
  robin.RobinsonProjection = class RobinsonProjection extends projection.Projection {
    get x0() {
      return this[x0$6];
    }
    set x0(value) {
      this[x0$6] = value;
    }
    get y0() {
      return this[y0$6];
    }
    set y0(value) {
      this[y0$6] = value;
    }
    get long0() {
      return this[long0$5];
    }
    set long0(value) {
      this[long0$5] = value;
    }
    get es() {
      return this[es$];
    }
    set es(value) {
      this[es$] = value;
    }
    get title() {
      return this[title];
    }
    set title(value) {
      this[title] = value;
    }
    forward(ll) {
      let lon = utils.adjust_lon(dart.notNull(ll.x) - dart.notNull(this.long0));
      let dphi = ll.y[$abs]();
      let i = (dphi * dart.notNull(robin.C1))[$floor]();
      if (i < 0) {
        i = 0;
      } else if (i >= dart.notNull(robin.NODES)) {
        i = dart.notNull(robin.NODES) - 1;
      }
      dphi = dart.notNull(values.R2D) * (dphi - dart.notNull(robin.RC1) * i);
      let xy = new point$.Point.new({x: dart.notNull(this[_poly3_val](robin.COEFS_X[$_get](i), dphi)) * dart.notNull(lon), y: this[_poly3_val](robin.COEFS_Y[$_get](i), dphi)});
      if (dart.notNull(ll.y) < 0) {
        xy.y = -dart.notNull(xy.y);
      }
      xy.x = dart.notNull(xy.x) * dart.notNull(this.a) * dart.notNull(robin.FXC) + dart.notNull(this.x0);
      xy.y = dart.notNull(xy.y) * dart.notNull(this.a) * dart.notNull(robin.FYC) + dart.notNull(this.y0);
      return xy;
    }
    inverse(xy) {
      let t0, t0$;
      let ll = new point$.Point.new({x: (dart.notNull(xy.x) - dart.notNull(this.x0)) / (dart.notNull(this.a) * dart.notNull(robin.FXC)), y: (dart.notNull(xy.y) - dart.notNull(this.y0))[$abs]() / (dart.notNull(this.a) * dart.notNull(robin.FYC))});
      if (dart.notNull(ll.y) >= 1) {
        t0 = ll;
        t0.x = dart.notNull(t0.x) / dart.notNull(robin.COEFS_X[$_get](robin.NODES)[$_get](0));
        ll.y = dart.notNull(xy.y) < 0 ? -dart.notNull(values.HALF_PI) : values.HALF_PI;
      } else {
        let i = (dart.notNull(ll.y) * dart.notNull(robin.NODES))[$floor]();
        if (i < 0) {
          i = 0;
        } else if (i >= dart.notNull(robin.NODES)) {
          i = dart.notNull(robin.NODES) - 1;
        }
        for (;;) {
          if (dart.notNull(robin.COEFS_Y[$_get](i)[$_get](0)) > dart.notNull(ll.y)) {
            i = i - 1;
          } else if (dart.notNull(robin.COEFS_Y[$_get](i + 1)[$_get](0)) <= dart.notNull(ll.y)) {
            i = i + 1;
          } else {
            break;
          }
        }
        let coefs = robin.COEFS_Y[$_get](i);
        let t = 5 * (dart.notNull(ll.y) - dart.notNull(coefs[$_get](0))) / (dart.notNull(robin.COEFS_Y[$_get](i + 1)[$_get](0)) - dart.notNull(coefs[$_get](0)));
        t = this[_newton_rapshon](dart.fn(x => (dart.notNull(this[_poly3_val](coefs, doubleL().as(x))) - dart.notNull(ll.y)) / dart.notNull(this[_poly3_der](coefs, doubleL().as(x))), dynamicTodoubleL()), t, values.EPSLN, 100);
        t0$ = ll;
        t0$.x = dart.notNull(t0$.x) / dart.notNull(this[_poly3_val](robin.COEFS_X[$_get](i), t));
        ll.y = (5 * i + dart.notNull(t)) * dart.notNull(values.D2R);
        if (dart.notNull(xy.y) < 0) {
          ll.y = -dart.notNull(ll.y);
        }
      }
      ll.x = utils.adjust_lon(dart.notNull(ll.x) + dart.notNull(this.long0));
      return ll;
    }
    [_poly3_val](coefs, x) {
      return dart.notNull(coefs[$_get](0)) + dart.notNull(x) * (dart.notNull(coefs[$_get](1)) + dart.notNull(x) * (dart.notNull(coefs[$_get](2)) + dart.notNull(x) * dart.notNull(coefs[$_get](3))));
    }
    [_poly3_der](coefs, x) {
      return dart.notNull(coefs[$_get](1)) + dart.notNull(x) * (2 * dart.notNull(coefs[$_get](2)) + dart.notNull(x) * 3 * dart.notNull(coefs[$_get](3)));
    }
    [_newton_rapshon](f_df, start, max_err, iters) {
      let x = start;
      for (let i = 0; i < dart.notNull(core.num.as(iters)); i = i + 1) {
        let upd = dart.dcall(f_df, [x]);
        x = dart.notNull(x) - dart.notNull(core.num.as(upd));
        if (dart.dtest(dart.dsend(dart.dsend(upd, 'abs', []), '<', [max_err]))) {
          break;
        }
      }
      return x;
    }
  };
  (robin.RobinsonProjection.init = function(params) {
    let t0, t0$, t0$0;
    this[x0$6] = (t0 = params.x0, t0 == null ? 0.0 : t0);
    this[y0$6] = (t0$ = params.y0, t0$ == null ? 0.0 : t0$);
    this[long0$5] = params.long0 == null || params.long0[$isNaN] ? 0.0 : params.long0;
    this[es$] = 0.0;
    this[title] = (t0$0 = params.title, t0$0 == null ? "Robinson" : t0$0);
    robin.RobinsonProjection.__proto__.init.call(this, params);
    ;
  }).prototype = robin.RobinsonProjection.prototype;
  dart.addTypeTests(robin.RobinsonProjection);
  dart.addTypeCaches(robin.RobinsonProjection);
  dart.setMethodSignature(robin.RobinsonProjection, () => ({
    __proto__: dart.getMethods(robin.RobinsonProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    [_poly3_val]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.List$(dart.legacy(core.double))), dart.legacy(core.double)]),
    [_poly3_der]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.List$(dart.legacy(core.double))), dart.legacy(core.double)]),
    [_newton_rapshon]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Function), dart.legacy(core.double), dart.dynamic, dart.dynamic])
  }));
  dart.setLibraryUri(robin.RobinsonProjection, L12);
  dart.setFieldSignature(robin.RobinsonProjection, () => ({
    __proto__: dart.getFields(robin.RobinsonProjection.__proto__),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    es: dart.fieldType(dart.legacy(core.double)),
    title: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(robin.RobinsonProjection, {
    /*robin.RobinsonProjection.names*/get names() {
      return JSArrayOfStringL().of(["Robinson", "robin"]);
    }
  }, true);
  dart.defineLazy(robin, {
    /*robin.COEFS_X*/get COEFS_X() {
      return JSArrayOfListLOfdoubleL().of([JSArrayOfdoubleL().of([1.0, 2.2199e-17, -0.0000715515, 0.0000031103]), JSArrayOfdoubleL().of([0.9986, -0.000482243, -0.000024897, -0.0000013309]), JSArrayOfdoubleL().of([0.9954, -0.00083103, -0.0000448605, -9.86701e-7]), JSArrayOfdoubleL().of([0.99, -0.00135364, -0.000059661, 0.0000036777]), JSArrayOfdoubleL().of([0.9822, -0.00167442, -0.00000449547, -0.00000572411]), JSArrayOfdoubleL().of([0.973, -0.00214868, -0.0000903571, 1.8736e-8]), JSArrayOfdoubleL().of([0.96, -0.00305085, -0.0000900761, 0.00000164917]), JSArrayOfdoubleL().of([0.9427, -0.00382792, -0.0000653386, -0.0000026154]), JSArrayOfdoubleL().of([0.9216, -0.00467746, -0.00010457, 0.00000481243]), JSArrayOfdoubleL().of([0.8962, -0.00536223, -0.0000323831, -0.00000543432]), JSArrayOfdoubleL().of([0.8679, -0.00609363, -0.000113898, 0.00000332484]), JSArrayOfdoubleL().of([0.835, -0.00698325, -0.0000640253, 9.34959e-7]), JSArrayOfdoubleL().of([0.7986, -0.00755338, -0.0000500009, 9.35324e-7]), JSArrayOfdoubleL().of([0.7597, -0.00798324, -0.000035971, -0.00000227626]), JSArrayOfdoubleL().of([0.7186, -0.00851367, -0.0000701149, -0.0000086303]), JSArrayOfdoubleL().of([0.6732, -0.00986209, -0.000199569, 0.0000191974]), JSArrayOfdoubleL().of([0.6213, -0.010418, 0.0000883923, 0.00000624051]), JSArrayOfdoubleL().of([0.5722, -0.00906601, 0.000182, 0.00000624051]), JSArrayOfdoubleL().of([0.5322, -0.00677797, 0.000275608, 0.00000624051])]);
    },
    set COEFS_X(_) {},
    /*robin.COEFS_Y*/get COEFS_Y() {
      return JSArrayOfListLOfdoubleL().of([JSArrayOfdoubleL().of([-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11]), JSArrayOfdoubleL().of([0.062, 0.0124, -1.26793e-9, 4.22642e-10]), JSArrayOfdoubleL().of([0.124, 0.0124, 5.07171e-9, -1.60604e-9]), JSArrayOfdoubleL().of([0.186, 0.0123999, -1.90189e-8, 6.00152e-9]), JSArrayOfdoubleL().of([0.248, 0.0124002, 7.10039e-8, -2.24e-8]), JSArrayOfdoubleL().of([0.31, 0.0123992, -2.64997e-7, 8.35986e-8]), JSArrayOfdoubleL().of([0.372, 0.0124029, 9.88983e-7, -3.11994e-7]), JSArrayOfdoubleL().of([0.434, 0.0123893, -0.00000369093, -4.35621e-7]), JSArrayOfdoubleL().of([0.4958, 0.0123198, -0.0000102252, -3.45523e-7]), JSArrayOfdoubleL().of([0.5571, 0.0121916, -0.0000154081, -5.82288e-7]), JSArrayOfdoubleL().of([0.6176, 0.0119938, -0.0000241424, -5.25327e-7]), JSArrayOfdoubleL().of([0.6769, 0.011713, -0.0000320223, -5.16405e-7]), JSArrayOfdoubleL().of([0.7346, 0.0113541, -0.0000397684, -6.09052e-7]), JSArrayOfdoubleL().of([0.7903, 0.0109107, -0.0000489042, -0.00000104739]), JSArrayOfdoubleL().of([0.8435, 0.0103431, -0.000064615, -1.40374e-9]), JSArrayOfdoubleL().of([0.8936, 0.00969686, -0.000064636, -0.000008547]), JSArrayOfdoubleL().of([0.9394, 0.00840947, -0.000192841, -0.0000042106]), JSArrayOfdoubleL().of([0.9761, 0.00616527, -0.000256, -0.0000042106]), JSArrayOfdoubleL().of([1.0, 0.00328947, -0.000319159, -0.0000042106])]);
    },
    set COEFS_Y(_) {},
    /*robin.FXC*/get FXC() {
      return 0.8487;
    },
    set FXC(_) {},
    /*robin.FYC*/get FYC() {
      return 1.3523;
    },
    set FYC(_) {},
    /*robin.C1*/get C1() {
      return dart.notNull(values.R2D) / 5;
    },
    set C1(_) {},
    /*robin.RC1*/get RC1() {
      return 1 / dart.notNull(robin.C1);
    },
    set RC1(_) {},
    /*robin.NODES*/get NODES() {
      return 18;
    },
    set NODES(_) {}
  }, true);
  var _qsc_shift_lon_origin = dart.privateName(qsc, "_qsc_shift_lon_origin");
  var _qsc_fwd_equat_face_theta = dart.privateName(qsc, "_qsc_fwd_equat_face_theta");
  var lat0$4 = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.lat0");
  var long0$6 = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.long0");
  var x0$7 = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.x0");
  var y0$7 = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.y0");
  var lat_ts$ = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.lat_ts");
  var title$ = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.title");
  var face = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.face");
  var one_minus_f = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.one_minus_f");
  var one_minus_f_squared = dart.privateName(qsc, "QuadrilateralizedSphericalCubeProjection.one_minus_f_squared");
  qsc.QuadrilateralizedSphericalCubeProjection = class QuadrilateralizedSphericalCubeProjection extends projection.Projection {
    get lat0() {
      return this[lat0$4];
    }
    set lat0(value) {
      this[lat0$4] = value;
    }
    get long0() {
      return this[long0$6];
    }
    set long0(value) {
      this[long0$6] = value;
    }
    get x0() {
      return this[x0$7];
    }
    set x0(value) {
      this[x0$7] = value;
    }
    get y0() {
      return this[y0$7];
    }
    set y0(value) {
      this[y0$7] = value;
    }
    get lat_ts() {
      return this[lat_ts$];
    }
    set lat_ts(value) {
      this[lat_ts$] = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      this[title$] = value;
    }
    get face() {
      return this[face];
    }
    set face(value) {
      this[face] = value;
    }
    get one_minus_f() {
      return this[one_minus_f];
    }
    set one_minus_f(value) {
      this[one_minus_f] = value;
    }
    get one_minus_f_squared() {
      return this[one_minus_f_squared];
    }
    set one_minus_f_squared(value) {
      this[one_minus_f_squared] = value;
    }
    forward(p) {
      let t0;
      let xy = new point$.Point.new({x: 0.0, y: 0.0});
      let lat = null;
      let lon = null;
      let theta = null;
      let phi = null;
      let t = null;
      let mu = null;
      let area = new (IdentityMapOfStringL$intL()).from(["value", 0]);
      t0 = p;
      t0.x = dart.notNull(t0.x) - dart.notNull(this.long0);
      if (this.es !== 0) {
        lat = math.atan(dart.notNull(this.one_minus_f_squared) * math.tan(p.y));
      } else {
        lat = p.y;
      }
      lon = p.x;
      if (this.face == faces.TOP) {
        phi = dart.notNull(values.HALF_PI) - dart.notNull(lat);
        if (dart.notNull(lon) >= dart.notNull(values.FORTPI) && dart.notNull(lon) <= dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI)) {
          area[$_set]("value", areas.AREA_0);
          theta = dart.notNull(lon) - dart.notNull(values.HALF_PI);
        } else if (dart.notNull(lon) > dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI) || dart.notNull(lon) <= -(dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI))) {
          area[$_set]("value", areas.AREA_1);
          theta = dart.notNull(lon) > 0.0 ? dart.notNull(lon) - dart.notNull(values.SPI) : dart.notNull(lon) + dart.notNull(values.SPI);
        } else if (dart.notNull(lon) > -(dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI)) && dart.notNull(lon) <= -dart.notNull(values.FORTPI)) {
          area[$_set]("value", areas.AREA_2);
          theta = dart.notNull(lon) + dart.notNull(values.HALF_PI);
        } else {
          area[$_set]("value", areas.AREA_3);
          theta = lon;
        }
      } else if (this.face == faces.BOTTOM) {
        phi = dart.notNull(values.HALF_PI) + dart.notNull(lat);
        if (dart.notNull(lon) >= dart.notNull(values.FORTPI) && dart.notNull(lon) <= dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI)) {
          area[$_set]("value", areas.AREA_0);
          theta = -dart.notNull(lon) + dart.notNull(values.HALF_PI);
        } else if (dart.notNull(lon) < dart.notNull(values.FORTPI) && dart.notNull(lon) >= -dart.notNull(values.FORTPI)) {
          area[$_set]("value", areas.AREA_1);
          theta = -dart.notNull(lon);
        } else if (dart.notNull(lon) < -dart.notNull(values.FORTPI) && dart.notNull(lon) >= -(dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI))) {
          area[$_set]("value", areas.AREA_2);
          theta = -dart.notNull(lon) - dart.notNull(values.HALF_PI);
        } else {
          area[$_set]("value", areas.AREA_3);
          theta = dart.notNull(lon) > 0.0 ? -dart.notNull(lon) + dart.notNull(values.SPI) : -dart.notNull(lon) - dart.notNull(values.SPI);
        }
      } else {
        let q = null;
        let r = null;
        let s = null;
        let sinlat = null;
        let coslat = null;
        let sinlon = null;
        let coslon = null;
        if (this.face == faces.RIGHT) {
          lon = this[_qsc_shift_lon_origin](lon, values.HALF_PI);
        } else if (this.face == faces.BACK) {
          lon = this[_qsc_shift_lon_origin](lon, values.SPI);
        } else if (this.face == faces.LEFT) {
          lon = this[_qsc_shift_lon_origin](lon, -dart.notNull(values.HALF_PI));
        }
        sinlat = math.sin(lat);
        coslat = math.cos(lat);
        sinlon = math.sin(lon);
        coslon = math.cos(lon);
        q = dart.notNull(coslat) * dart.notNull(coslon);
        r = dart.notNull(coslat) * dart.notNull(sinlon);
        s = sinlat;
        if (this.face == faces.FRONT) {
          phi = math.acos(q);
          theta = this[_qsc_fwd_equat_face_theta](phi, s, r, area);
        } else if (this.face == faces.RIGHT) {
          phi = math.acos(r);
          theta = this[_qsc_fwd_equat_face_theta](phi, s, -dart.notNull(q), area);
        } else if (this.face == faces.BACK) {
          phi = math.acos(-dart.notNull(q));
          theta = this[_qsc_fwd_equat_face_theta](phi, s, -dart.notNull(r), area);
        } else if (this.face == faces.LEFT) {
          phi = math.acos(-dart.notNull(r));
          theta = this[_qsc_fwd_equat_face_theta](phi, s, q, area);
        } else {
          phi = theta = 0.0;
          area[$_set]("value", areas.AREA_0);
        }
      }
      mu = math.atan(12 / dart.notNull(values.SPI) * (dart.notNull(theta) + math.acos(math.sin(theta) * math.cos(values.FORTPI)) - dart.notNull(values.HALF_PI)));
      t = math.sqrt((1 - math.cos(phi)) / (math.cos(mu) * math.cos(mu)) / (1 - math.cos(math.atan(1 / math.cos(theta)))));
      if (area[$_get]("value") == areas.AREA_1) {
        mu = dart.notNull(mu) + dart.notNull(values.HALF_PI);
      } else if (area[$_get]("value") == areas.AREA_2) {
        mu = dart.notNull(mu) + dart.notNull(values.SPI);
      } else if (area[$_get]("value") == areas.AREA_3) {
        mu = dart.notNull(mu) + 1.5 * dart.notNull(values.SPI);
      }
      xy.x = dart.notNull(t) * math.cos(mu);
      xy.y = dart.notNull(t) * math.sin(mu);
      xy.x = dart.notNull(xy.x) * dart.notNull(this.a) + dart.notNull(this.x0);
      xy.y = dart.notNull(xy.y) * dart.notNull(this.a) + dart.notNull(this.y0);
      p.x = xy.x;
      p.y = xy.y;
      return p;
    }
    inverse(p) {
      let t1, t0;
      let lp = new (IdentityMapOfStringL$doubleL()).from(["lam", 0.0, "phi", 0.0]);
      let mu = null;
      let nu = null;
      let cosmu = null;
      let tannu = null;
      let tantheta = null;
      let theta = null;
      let cosphi = null;
      let phi = null;
      let t = null;
      let area = new (IdentityMapOfStringL$intL()).from(["value", 0]);
      p.x = (dart.notNull(p.x) - dart.notNull(this.x0)) / dart.notNull(this.a);
      p.y = (dart.notNull(p.y) - dart.notNull(this.y0)) / dart.notNull(this.a);
      nu = math.atan(math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y)));
      mu = math.atan2(p.y, p.x);
      if (dart.notNull(p.x) >= 0.0 && dart.notNull(p.x) >= p.y[$abs]()) {
        area[$_set]("value", areas.AREA_0);
      } else if (dart.notNull(p.y) >= 0.0 && dart.notNull(p.y) >= p.x[$abs]()) {
        area[$_set]("value", areas.AREA_1);
        mu = dart.notNull(mu) - dart.notNull(values.HALF_PI);
      } else if (dart.notNull(p.x) < 0.0 && -dart.notNull(p.x) >= p.y[$abs]()) {
        area[$_set]("value", areas.AREA_2);
        mu = dart.notNull(mu) < 0.0 ? dart.notNull(mu) + dart.notNull(values.SPI) : dart.notNull(mu) - dart.notNull(values.SPI);
      } else {
        area[$_set]("value", areas.AREA_3);
        mu = dart.notNull(mu) + dart.notNull(values.HALF_PI);
      }
      t = dart.notNull(values.SPI) / 12 * math.tan(mu);
      tantheta = math.sin(t) / (math.cos(t) - 1 / math.sqrt(2));
      theta = math.atan(tantheta);
      cosmu = math.cos(mu);
      tannu = math.tan(nu);
      cosphi = 1 - dart.notNull(cosmu) * dart.notNull(cosmu) * dart.notNull(tannu) * dart.notNull(tannu) * (1 - math.cos(math.atan(1 / math.cos(theta))));
      if (dart.notNull(cosphi) < -1) {
        cosphi = -1.0;
      } else if (dart.notNull(cosphi) > 1) {
        cosphi = 1.0;
      }
      if (this.face == faces.TOP) {
        phi = math.acos(cosphi);
        lp[$_set]("phi", dart.notNull(values.HALF_PI) - dart.notNull(phi));
        if (area[$_get]("value") == areas.AREA_0) {
          lp[$_set]("lam", dart.notNull(theta) + dart.notNull(values.HALF_PI));
        } else if (area[$_get]("value") == areas.AREA_1) {
          lp[$_set]("lam", dart.notNull(theta) < 0.0 ? dart.notNull(theta) + dart.notNull(values.SPI) : dart.notNull(theta) - dart.notNull(values.SPI));
        } else if (area[$_get]("value") == areas.AREA_2) {
          lp[$_set]("lam", dart.notNull(theta) - dart.notNull(values.HALF_PI));
        } else {
          lp[$_set]("lam", theta);
        }
      } else if (this.face == faces.BOTTOM) {
        phi = math.acos(cosphi);
        lp[$_set]("phi", dart.notNull(phi) - dart.notNull(values.HALF_PI));
        if (area[$_get]("value") == areas.AREA_0) {
          lp[$_set]("lam", -dart.notNull(theta) + dart.notNull(values.HALF_PI));
        } else if (area[$_get]("value") == areas.AREA_1) {
          lp[$_set]("lam", -dart.notNull(theta));
        } else if (area[$_get]("value") == areas.AREA_2) {
          lp[$_set]("lam", -dart.notNull(theta) - dart.notNull(values.HALF_PI));
        } else {
          lp[$_set]("lam", dart.notNull(theta) < 0.0 ? -dart.notNull(theta) - dart.notNull(values.SPI) : -dart.notNull(theta) + dart.notNull(values.SPI));
        }
      } else {
        let q = null;
        let r = null;
        let s = null;
        q = cosphi;
        t = dart.notNull(q) * dart.notNull(q);
        if (dart.notNull(t) >= 1) {
          s = 0.0;
        } else {
          s = math.sqrt(1 - dart.notNull(t)) * math.sin(theta);
        }
        t = dart.notNull(t) + dart.notNull(s) * dart.notNull(s);
        if (dart.notNull(t) >= 1) {
          r = 0.0;
        } else {
          r = math.sqrt(1 - dart.notNull(t));
        }
        if (area[$_get]("value") == areas.AREA_1) {
          t = r;
          r = -dart.notNull(s);
          s = t;
        } else if (area[$_get]("value") == areas.AREA_2) {
          r = -dart.notNull(r);
          s = -dart.notNull(s);
        } else if (area[$_get]("value") == areas.AREA_3) {
          t = r;
          r = s;
          s = -dart.notNull(t);
        }
        if (this.face == faces.RIGHT) {
          t = q;
          q = -dart.notNull(r);
          r = t;
        } else if (this.face == faces.BACK) {
          q = -dart.notNull(q);
          r = -dart.notNull(r);
        } else if (this.face == faces.LEFT) {
          t = q;
          q = r;
          r = -dart.notNull(t);
        }
        lp[$_set]("phi", math.acos(-dart.notNull(s)) - dart.notNull(values.HALF_PI));
        lp[$_set]("lam", math.atan2(r, q));
        if (this.face == faces.RIGHT) {
          lp[$_set]("lam", this[_qsc_shift_lon_origin](lp[$_get]("lam"), -dart.notNull(values.HALF_PI)));
        } else if (this.face == faces.BACK) {
          lp[$_set]("lam", this[_qsc_shift_lon_origin](lp[$_get]("lam"), -dart.notNull(values.SPI)));
        } else if (this.face == faces.LEFT) {
          lp[$_set]("lam", this[_qsc_shift_lon_origin](lp[$_get]("lam"), values.HALF_PI));
        }
      }
      if (this.es !== 0) {
        let invert_sign = null;
        let tanphi = null;
        let xa = null;
        invert_sign = dart.notNull(lp[$_get]("phi")) < 0 ? 1 : 0;
        tanphi = math.tan(lp[$_get]("phi"));
        xa = dart.notNull(this.b) / math.sqrt(dart.notNull(tanphi) * dart.notNull(tanphi) + dart.notNull(this.one_minus_f_squared));
        lp[$_set]("phi", math.atan(math.sqrt(dart.notNull(this.a) * dart.notNull(this.a) - dart.notNull(xa) * dart.notNull(xa)) / (dart.notNull(this.one_minus_f) * dart.notNull(xa))));
        if (invert_sign !== 0) {
          lp[$_set]("phi", -dart.notNull(lp[$_get]("phi")));
        }
      }
      t0 = lp;
      t1 = "lam";
      t0[$_set](t1, dart.notNull(t0[$_get](t1)) + dart.notNull(this.long0));
      p.x = lp[$_get]("lam");
      p.y = lp[$_get]("phi");
      return p;
    }
    [_qsc_fwd_equat_face_theta](phi, y, x, area) {
      let theta = null;
      if (dart.notNull(phi) < dart.notNull(values.EPSLN)) {
        area[$_set]("value", areas.AREA_0);
        theta = 0.0;
      } else {
        theta = math.atan2(y, x);
        if (theta[$abs]() <= dart.notNull(values.FORTPI)) {
          area[$_set]("value", areas.AREA_0);
        } else if (dart.notNull(theta) > dart.notNull(values.FORTPI) && dart.notNull(theta) <= dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI)) {
          area[$_set]("value", areas.AREA_1);
          theta = dart.notNull(theta) - dart.notNull(values.HALF_PI);
        } else if (dart.notNull(theta) > dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI) || dart.notNull(theta) <= -(dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI))) {
          area[$_set]("value", areas.AREA_2);
          theta = dart.notNull(theta) >= 0.0 ? dart.notNull(theta) - dart.notNull(values.SPI) : dart.notNull(theta) + dart.notNull(values.SPI);
        } else {
          area[$_set]("value", areas.AREA_3);
          theta = dart.notNull(theta) + dart.notNull(values.HALF_PI);
        }
      }
      return theta;
    }
    [_qsc_shift_lon_origin](lon, offset) {
      let slon = dart.notNull(lon) + dart.notNull(offset);
      if (slon < -dart.notNull(values.SPI)) {
        slon = slon + dart.notNull(values.TWO_PI);
      } else if (slon > dart.notNull(values.SPI)) {
        slon = slon - dart.notNull(values.TWO_PI);
      }
      return slon;
    }
  };
  (qsc.QuadrilateralizedSphericalCubeProjection.init = function(params) {
    let t0, t0$, t0$0, t0$1, t0$2;
    this[face] = null;
    this[one_minus_f] = null;
    this[one_minus_f_squared] = null;
    this[lat0$4] = (t0 = params.lat0, t0 == null ? 0.0 : t0);
    this[long0$6] = params.long0 == null || params.long0[$isNaN] ? 0.0 : params.long0;
    this[x0$7] = (t0$ = params.x0, t0$ == null ? 0.0 : t0$);
    this[y0$7] = (t0$0 = params.y0, t0$0 == null ? 0.0 : t0$0);
    this[lat_ts$] = (t0$1 = params.lat_ts, t0$1 == null ? 0.0 : t0$1);
    this[title$] = (t0$2 = params.title, t0$2 == null ? "Quadrilateralized Spherical Cube" : t0$2);
    qsc.QuadrilateralizedSphericalCubeProjection.__proto__.init.call(this, params);
    if (dart.notNull(this.lat0) >= dart.notNull(values.HALF_PI) - dart.notNull(values.FORTPI) / 2.0) {
      this.face = faces.TOP;
    } else if (dart.notNull(this.lat0) <= -(dart.notNull(values.HALF_PI) - dart.notNull(values.FORTPI) / 2.0)) {
      this.face = faces.BOTTOM;
    } else if (this.long0[$abs]() <= dart.notNull(values.FORTPI)) {
      this.face = faces.FRONT;
    } else if (this.long0[$abs]() <= dart.notNull(values.HALF_PI) + dart.notNull(values.FORTPI)) {
      this.face = dart.notNull(this.long0) > 0.0 ? faces.RIGHT : faces.LEFT;
    } else {
      this.face = faces.BACK;
    }
    if (this.es !== 0) {
      this.one_minus_f = 1 - (dart.notNull(this.a) - dart.notNull(this.b)) / dart.notNull(this.a);
      this.one_minus_f_squared = dart.notNull(this.one_minus_f) * dart.notNull(this.one_minus_f);
    }
  }).prototype = qsc.QuadrilateralizedSphericalCubeProjection.prototype;
  dart.addTypeTests(qsc.QuadrilateralizedSphericalCubeProjection);
  dart.addTypeCaches(qsc.QuadrilateralizedSphericalCubeProjection);
  dart.setMethodSignature(qsc.QuadrilateralizedSphericalCubeProjection, () => ({
    __proto__: dart.getMethods(qsc.QuadrilateralizedSphericalCubeProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    [_qsc_fwd_equat_face_theta]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.int)))]),
    [_qsc_shift_lon_origin]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(qsc.QuadrilateralizedSphericalCubeProjection, L13);
  dart.setFieldSignature(qsc.QuadrilateralizedSphericalCubeProjection, () => ({
    __proto__: dart.getFields(qsc.QuadrilateralizedSphericalCubeProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    lat_ts: dart.fieldType(dart.legacy(core.double)),
    title: dart.fieldType(dart.legacy(core.String)),
    face: dart.fieldType(dart.legacy(core.int)),
    one_minus_f: dart.fieldType(dart.legacy(core.double)),
    one_minus_f_squared: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(qsc.QuadrilateralizedSphericalCubeProjection, {
    /*qsc.QuadrilateralizedSphericalCubeProjection.names*/get names() {
      return JSArrayOfStringL().of(["Quadrilateralized Spherical Cube", "Quadrilateralized_Spherical_Cube", "qsc"]);
    }
  }, true);
  var lat0$5 = dart.privateName(poly, "PolyconicProjection.lat0");
  var long0$7 = dart.privateName(poly, "PolyconicProjection.long0");
  var x0$8 = dart.privateName(poly, "PolyconicProjection.x0");
  var y0$8 = dart.privateName(poly, "PolyconicProjection.y0");
  var temp = dart.privateName(poly, "PolyconicProjection.temp");
  var e0 = dart.privateName(poly, "PolyconicProjection.e0");
  var e1 = dart.privateName(poly, "PolyconicProjection.e1");
  var e2 = dart.privateName(poly, "PolyconicProjection.e2");
  var e3 = dart.privateName(poly, "PolyconicProjection.e3");
  var ml0$ = dart.privateName(poly, "PolyconicProjection.ml0");
  poly.PolyconicProjection = class PolyconicProjection extends projection.Projection {
    get lat0() {
      return this[lat0$5];
    }
    set lat0(value) {
      this[lat0$5] = value;
    }
    get long0() {
      return this[long0$7];
    }
    set long0(value) {
      this[long0$7] = value;
    }
    get x0() {
      return this[x0$8];
    }
    set x0(value) {
      this[x0$8] = value;
    }
    get y0() {
      return this[y0$8];
    }
    set y0(value) {
      this[y0$8] = value;
    }
    get temp() {
      return this[temp];
    }
    set temp(value) {
      this[temp] = value;
    }
    get e0() {
      return this[e0];
    }
    set e0(value) {
      this[e0] = value;
    }
    get e1() {
      return this[e1];
    }
    set e1(value) {
      this[e1] = value;
    }
    get e2() {
      return this[e2];
    }
    set e2(value) {
      this[e2] = value;
    }
    get e3() {
      return this[e3];
    }
    set e3(value) {
      this[e3] = value;
    }
    get ml0() {
      return this[ml0$];
    }
    set ml0(value) {
      this[ml0$] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let x = null;
      let y = null;
      let el = null;
      let dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      el = dart.notNull(dlon) * math.sin(lat);
      if (this.sphere != null && dart.test(this.sphere)) {
        if (lat[$abs]() <= dart.notNull(values.EPSLN)) {
          x = dart.notNull(this.a) * dart.notNull(dlon);
          y = -1 * dart.notNull(this.a) * dart.notNull(this.lat0);
        } else {
          x = dart.notNull(this.a) * math.sin(el) / math.tan(lat);
          y = dart.notNull(this.a) * (dart.notNull(utils.adjust_lat(dart.notNull(lat) - dart.notNull(this.lat0))) + (1 - math.cos(el)) / math.tan(lat));
        }
      } else {
        if (lat[$abs]() <= dart.notNull(values.EPSLN)) {
          x = dart.notNull(this.a) * dart.notNull(dlon);
          y = -1 * dart.notNull(this.ml0);
        } else {
          let nl = dart.notNull(utils.gN(this.a, this.e, math.sin(lat))) / math.tan(lat);
          x = nl * math.sin(el);
          y = dart.notNull(this.a) * dart.notNull(utils.mlfn(this.e0, this.e1, this.e2, this.e3, lat)) - dart.notNull(this.ml0) + nl * (1 - math.cos(el));
        }
      }
      p.x = dart.notNull(x) + dart.notNull(this.x0);
      p.y = dart.notNull(y) + dart.notNull(this.y0);
      return p;
    }
    inverse(p) {
      let lon = null;
      let lat = null;
      let x = null;
      let y = null;
      let al = null;
      let bl = null;
      let phi = null;
      let dphi = null;
      lat = 0 / 0;
      x = dart.notNull(p.x) - dart.notNull(this.x0);
      y = dart.notNull(p.y) - dart.notNull(this.y0);
      if (this.sphere != null && dart.test(this.sphere)) {
        if ((dart.notNull(y) + dart.notNull(this.a) * dart.notNull(this.lat0))[$abs]() <= dart.notNull(values.EPSLN)) {
          lon = utils.adjust_lon(dart.notNull(x) / dart.notNull(this.a) + dart.notNull(this.long0));
          lat = 0.0;
        } else {
          al = dart.notNull(this.lat0) + dart.notNull(y) / dart.notNull(this.a);
          bl = dart.notNull(x) * dart.notNull(x) / dart.notNull(this.a) / dart.notNull(this.a) + dart.notNull(al) * dart.notNull(al);
          phi = al;
          let tanphi = null;
          for (let i = poly.MAX_ITER; dart.notNull(i) > 0; i = dart.notNull(i) - 1) {
            tanphi = math.tan(phi);
            dphi = -1 * (dart.notNull(al) * (dart.notNull(phi) * dart.notNull(core.num.as(tanphi)) + 1) - dart.notNull(phi) - 0.5 * (dart.notNull(phi) * dart.notNull(phi) + dart.notNull(bl)) * dart.notNull(core.num.as(tanphi))) / ((dart.notNull(phi) - dart.notNull(al)) / dart.notNull(core.num.as(tanphi)) - 1);
            phi = dart.notNull(phi) + dart.notNull(dphi);
            if (dphi[$abs]() <= dart.notNull(values.EPSLN)) {
              lat = phi;
              break;
            }
          }
          lon = utils.adjust_lon(dart.notNull(this.long0) + math.asin(dart.notNull(x) * math.tan(phi) / dart.notNull(this.a)) / math.sin(lat));
        }
      } else {
        if ((dart.notNull(y) + dart.notNull(this.ml0))[$abs]() <= dart.notNull(values.EPSLN)) {
          lat = 0.0;
          lon = utils.adjust_lon(dart.notNull(this.long0) + dart.notNull(x) / dart.notNull(this.a));
        } else {
          al = (dart.notNull(this.ml0) + dart.notNull(y)) / dart.notNull(this.a);
          bl = dart.notNull(x) * dart.notNull(x) / dart.notNull(this.a) / dart.notNull(this.a) + dart.notNull(al) * dart.notNull(al);
          phi = al;
          let cl = null;
          let mln = null;
          let mlnp = null;
          let ma = null;
          let con = null;
          for (let i = poly.MAX_ITER; dart.notNull(i) > 0; i = dart.notNull(i) - 1) {
            con = dart.notNull(this.e) * math.sin(phi);
            cl = math.sqrt(1 - dart.notNull(core.num.as(dart.dsend(con, '*', [con])))) * math.tan(phi);
            mln = dart.notNull(this.a) * dart.notNull(utils.mlfn(this.e0, this.e1, this.e2, this.e3, phi));
            mlnp = dart.notNull(this.e0) - 2 * dart.notNull(this.e1) * math.cos(2 * dart.notNull(phi)) + 4 * dart.notNull(this.e2) * math.cos(4 * dart.notNull(phi)) - 6 * dart.notNull(this.e3) * math.cos(6 * dart.notNull(phi));
            ma = dart.dsend(mln, '/', [this.a]);
            dphi = (dart.notNull(al) * dart.notNull(core.num.as(dart.dsend(dart.dsend(cl, '*', [ma]), '+', [1]))) - dart.notNull(core.num.as(ma)) - 0.5 * dart.notNull(core.num.as(cl)) * dart.notNull(core.num.as(dart.dsend(dart.dsend(ma, '*', [ma]), '+', [bl])))) / (dart.notNull(this.es) * math.sin(2 * dart.notNull(phi)) * dart.notNull(core.num.as(dart.dsend(dart.dsend(dart.dsend(ma, '*', [ma]), '+', [bl]), '-', [2 * dart.notNull(al) * dart.notNull(core.num.as(ma))]))) / (4 * dart.notNull(core.num.as(cl))) + (dart.notNull(al) - dart.notNull(core.num.as(ma))) * dart.notNull(core.num.as(dart.dsend(dart.dsend(cl, '*', [mlnp]), '-', [2 / math.sin(2 * dart.notNull(phi))]))) - dart.notNull(core.num.as(mlnp)));
            phi = dart.notNull(phi) - dart.notNull(dphi);
            if (dphi[$abs]() <= dart.notNull(values.EPSLN)) {
              lat = phi;
              break;
            }
          }
          cl = math.sqrt(1 - dart.notNull(this.es) * math.pow(math.sin(lat), 2)) * math.tan(lat);
          lon = utils.adjust_lon(dart.notNull(this.long0) + math.asin(dart.notNull(x) * dart.notNull(core.num.as(cl)) / dart.notNull(this.a)) / math.sin(lat));
        }
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (poly.PolyconicProjection.init = function(params) {
    this[temp] = null;
    this[e0] = null;
    this[e1] = null;
    this[e2] = null;
    this[e3] = null;
    this[ml0$] = null;
    this[lat0$5] = params.lat0;
    this[long0$7] = params.long0;
    this[x0$8] = params.x0;
    this[y0$8] = params.y0;
    poly.PolyconicProjection.__proto__.init.call(this, params);
    this.temp = dart.notNull(this.b) / dart.notNull(this.a);
    this.es = 1 - math.pow(this.temp, 2);
    this.e = math.sqrt(this.es);
    this.e0 = utils.e0fn(this.es);
    this.e1 = utils.e1fn(this.es);
    this.e2 = utils.e2fn(this.es);
    this.e3 = utils.e3fn(this.es);
    this.ml0 = dart.notNull(this.a) * dart.notNull(utils.mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0));
  }).prototype = poly.PolyconicProjection.prototype;
  dart.addTypeTests(poly.PolyconicProjection);
  dart.addTypeCaches(poly.PolyconicProjection);
  dart.setMethodSignature(poly.PolyconicProjection, () => ({
    __proto__: dart.getMethods(poly.PolyconicProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(poly.PolyconicProjection, L14);
  dart.setFieldSignature(poly.PolyconicProjection, () => ({
    __proto__: dart.getFields(poly.PolyconicProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    temp: dart.fieldType(dart.legacy(core.double)),
    e0: dart.fieldType(dart.legacy(core.double)),
    e1: dart.fieldType(dart.legacy(core.double)),
    e2: dart.fieldType(dart.legacy(core.double)),
    e3: dart.fieldType(dart.legacy(core.double)),
    ml0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(poly.PolyconicProjection, {
    /*poly.PolyconicProjection.names*/get names() {
      return JSArrayOfStringL().of(["Polyconic", "poly"]);
    }
  }, true);
  dart.defineLazy(poly, {
    /*poly.MAX_ITER*/get MAX_ITER() {
      return 20;
    },
    set MAX_ITER(_) {}
  }, true);
  var lat0$6 = dart.privateName(ortho, "OrthographicProjection.lat0");
  var long0$8 = dart.privateName(ortho, "OrthographicProjection.long0");
  var x0$9 = dart.privateName(ortho, "OrthographicProjection.x0");
  var y0$9 = dart.privateName(ortho, "OrthographicProjection.y0");
  var sin_p14 = dart.privateName(ortho, "OrthographicProjection.sin_p14");
  var cos_p14 = dart.privateName(ortho, "OrthographicProjection.cos_p14");
  ortho.OrthographicProjection = class OrthographicProjection extends projection.Projection {
    get lat0() {
      return this[lat0$6];
    }
    set lat0(value) {
      this[lat0$6] = value;
    }
    get long0() {
      return this[long0$8];
    }
    set long0(value) {
      this[long0$8] = value;
    }
    get x0() {
      return this[x0$9];
    }
    set x0(value) {
      this[x0$9] = value;
    }
    get y0() {
      return this[y0$9];
    }
    set y0(value) {
      this[y0$9] = value;
    }
    get sin_p14() {
      return this[sin_p14];
    }
    set sin_p14(value) {
      this[sin_p14] = value;
    }
    get cos_p14() {
      return this[cos_p14];
    }
    set cos_p14(value) {
      this[cos_p14] = value;
    }
    forward(p) {
      let sinphi = null;
      let cosphi = null;
      let dlon = null;
      let coslon = null;
      let ksp = null;
      let g = null;
      let x = null;
      let y = null;
      let lon = p.x;
      let lat = p.y;
      dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      sinphi = math.sin(lat);
      cosphi = math.cos(lat);
      coslon = math.cos(dlon);
      g = dart.notNull(this.sin_p14) * dart.notNull(sinphi) + dart.notNull(this.cos_p14) * dart.notNull(cosphi) * dart.notNull(coslon);
      ksp = 1.0;
      if (dart.notNull(g) > 0 || g[$abs]() <= dart.notNull(values.EPSLN)) {
        x = dart.notNull(this.a) * dart.notNull(ksp) * dart.notNull(cosphi) * math.sin(dlon);
        y = dart.notNull(this.y0) + dart.notNull(this.a) * dart.notNull(ksp) * (dart.notNull(this.cos_p14) * dart.notNull(sinphi) - dart.notNull(this.sin_p14) * dart.notNull(cosphi) * dart.notNull(coslon));
      }
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let t0, t0$;
      let rh = null;
      let z = null;
      let sinz = null;
      let cosz = null;
      let con = null;
      let lon = null;
      let lat = null;
      t0 = p;
      t0.x = dart.notNull(t0.x) - dart.notNull(this.x0);
      t0$ = p;
      t0$.y = dart.notNull(t0$.y) - dart.notNull(this.y0);
      rh = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
      z = utils.asinz(dart.notNull(rh) / dart.notNull(this.a));
      sinz = math.sin(z);
      cosz = math.cos(z);
      lon = this.long0;
      if (rh[$abs]() <= dart.notNull(values.EPSLN)) {
        lat = this.lat0;
        p.x = lon;
        p.y = lat;
        return p;
      }
      lat = utils.asinz(dart.notNull(cosz) * dart.notNull(this.sin_p14) + dart.notNull(p.y) * dart.notNull(sinz) * dart.notNull(this.cos_p14) / dart.notNull(rh));
      con = this.lat0[$abs]() - dart.notNull(values.HALF_PI);
      if (con[$abs]() <= dart.notNull(values.EPSLN)) {
        if (dart.notNull(this.lat0) >= 0) {
          lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(p.x, -dart.notNull(p.y)));
        } else {
          lon = utils.adjust_lon(dart.notNull(this.long0) - math.atan2(-dart.notNull(p.x), p.y));
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(dart.notNull(p.x) * dart.notNull(sinz), dart.notNull(rh) * dart.notNull(this.cos_p14) * dart.notNull(cosz) - dart.notNull(p.y) * dart.notNull(this.sin_p14) * dart.notNull(sinz)));
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (ortho.OrthographicProjection.init = function(params) {
    this[sin_p14] = null;
    this[cos_p14] = null;
    this[lat0$6] = params.lat0;
    this[long0$8] = params.long0;
    this[x0$9] = params.x0;
    this[y0$9] = params.y0;
    ortho.OrthographicProjection.__proto__.init.call(this, params);
    this.sin_p14 = math.sin(this.lat0);
    this.cos_p14 = math.cos(this.lat0);
  }).prototype = ortho.OrthographicProjection.prototype;
  dart.addTypeTests(ortho.OrthographicProjection);
  dart.addTypeCaches(ortho.OrthographicProjection);
  dart.setMethodSignature(ortho.OrthographicProjection, () => ({
    __proto__: dart.getMethods(ortho.OrthographicProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(ortho.OrthographicProjection, L15);
  dart.setFieldSignature(ortho.OrthographicProjection, () => ({
    __proto__: dart.getFields(ortho.OrthographicProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    sin_p14: dart.fieldType(dart.legacy(core.double)),
    cos_p14: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(ortho.OrthographicProjection, {
    /*ortho.OrthographicProjection.names*/get names() {
      return JSArrayOfStringL().of(["ortho"]);
    }
  }, true);
  var lat0$7 = dart.privateName(omerc, "HotineObliqueMercatorProjection.lat0");
  var long0$9 = dart.privateName(omerc, "HotineObliqueMercatorProjection.long0");
  var longc = dart.privateName(omerc, "HotineObliqueMercatorProjection.longc");
  var x0$10 = dart.privateName(omerc, "HotineObliqueMercatorProjection.x0");
  var y0$10 = dart.privateName(omerc, "HotineObliqueMercatorProjection.y0");
  var lat1 = dart.privateName(omerc, "HotineObliqueMercatorProjection.lat1");
  var lat2 = dart.privateName(omerc, "HotineObliqueMercatorProjection.lat2");
  var long1 = dart.privateName(omerc, "HotineObliqueMercatorProjection.long1");
  var long2 = dart.privateName(omerc, "HotineObliqueMercatorProjection.long2");
  var alpha$ = dart.privateName(omerc, "HotineObliqueMercatorProjection.alpha");
  var no_off = dart.privateName(omerc, "HotineObliqueMercatorProjection.no_off");
  var no_rot = dart.privateName(omerc, "HotineObliqueMercatorProjection.no_rot");
  var bl = dart.privateName(omerc, "HotineObliqueMercatorProjection.bl");
  var al = dart.privateName(omerc, "HotineObliqueMercatorProjection.al");
  var el = dart.privateName(omerc, "HotineObliqueMercatorProjection.el");
  var gamma0 = dart.privateName(omerc, "HotineObliqueMercatorProjection.gamma0");
  var uc = dart.privateName(omerc, "HotineObliqueMercatorProjection.uc");
  omerc.HotineObliqueMercatorProjection = class HotineObliqueMercatorProjection extends projection.Projection {
    get lat0() {
      return this[lat0$7];
    }
    set lat0(value) {
      this[lat0$7] = value;
    }
    get long0() {
      return this[long0$9];
    }
    set long0(value) {
      this[long0$9] = value;
    }
    get longc() {
      return this[longc];
    }
    set longc(value) {
      this[longc] = value;
    }
    get x0() {
      return this[x0$10];
    }
    set x0(value) {
      this[x0$10] = value;
    }
    get y0() {
      return this[y0$10];
    }
    set y0(value) {
      this[y0$10] = value;
    }
    get lat1() {
      return this[lat1];
    }
    set lat1(value) {
      this[lat1] = value;
    }
    get lat2() {
      return this[lat2];
    }
    set lat2(value) {
      this[lat2] = value;
    }
    get long1() {
      return this[long1];
    }
    set long1(value) {
      this[long1] = value;
    }
    get long2() {
      return this[long2];
    }
    set long2(value) {
      this[long2] = value;
    }
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      this[alpha$] = value;
    }
    get no_off() {
      return this[no_off];
    }
    set no_off(value) {
      this[no_off] = value;
    }
    get no_rot() {
      return this[no_rot];
    }
    set no_rot(value) {
      this[no_rot] = value;
    }
    get bl() {
      return this[bl];
    }
    set bl(value) {
      this[bl] = value;
    }
    get al() {
      return this[al];
    }
    set al(value) {
      this[al] = value;
    }
    get el() {
      return this[el];
    }
    set el(value) {
      this[el] = value;
    }
    get gamma0() {
      return this[gamma0];
    }
    set gamma0(value) {
      this[gamma0] = value;
    }
    get uc() {
      return this[uc];
    }
    set uc(value) {
      this[uc] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      let us = null;
      let vs = null;
      let con = null;
      if ((lat[$abs]() - dart.notNull(values.HALF_PI))[$abs]() <= dart.notNull(values.EPSLN)) {
        if (dart.notNull(lat) > 0) {
          con = -1.0;
        } else {
          con = 1.0;
        }
        vs = dart.notNull(this.al) / dart.notNull(this.bl) * math.log(math.tan(dart.notNull(values.FORTPI) + dart.notNull(con) * dart.notNull(this.gamma0) * 0.5));
        us = -1 * dart.notNull(con) * dart.notNull(values.HALF_PI) * dart.notNull(this.al) / dart.notNull(this.bl);
      } else {
        let t = utils.tsfnz(this.e, lat, math.sin(lat));
        let ql = dart.notNull(this.el) / math.pow(t, this.bl);
        let sl = 0.5 * (ql - 1 / ql);
        let tl = 0.5 * (ql + 1 / ql);
        let vl = math.sin(dart.notNull(this.bl) * dart.notNull(dlon));
        let ul = (sl * math.sin(this.gamma0) - vl * math.cos(this.gamma0)) / tl;
        if ((ul[$abs]() - 1)[$abs]() <= dart.notNull(values.EPSLN)) {
          vs = 1 / 0;
        } else {
          vs = 0.5 * dart.notNull(this.al) * math.log((1 - ul) / (1 + ul)) / dart.notNull(this.bl);
        }
        if (math.cos(dart.notNull(this.bl) * dart.notNull(dlon))[$abs]() <= dart.notNull(values.EPSLN)) {
          us = dart.notNull(this.al) * dart.notNull(this.bl) * dart.notNull(dlon);
        } else {
          us = dart.notNull(this.al) * math.atan2(sl * math.cos(this.gamma0) + vl * math.sin(this.gamma0), math.cos(dart.notNull(this.bl) * dart.notNull(dlon))) / dart.notNull(this.bl);
        }
      }
      if (dart.test(this.no_rot)) {
        p.x = dart.notNull(this.x0) + dart.notNull(us);
        p.y = dart.notNull(this.y0) + dart.notNull(vs);
      } else {
        us = dart.notNull(us) - dart.notNull(this.uc);
        p.x = dart.notNull(this.x0) + dart.notNull(vs) * math.cos(this.alpha) + dart.notNull(us) * math.sin(this.alpha);
        p.y = dart.notNull(this.y0) + dart.notNull(us) * math.cos(this.alpha) - dart.notNull(vs) * math.sin(this.alpha);
      }
      return p;
    }
    inverse(p) {
      let us = null;
      let vs = null;
      if (dart.test(this.no_rot)) {
        vs = dart.notNull(p.y) - dart.notNull(this.y0);
        us = dart.notNull(p.x) - dart.notNull(this.x0);
      } else {
        vs = (dart.notNull(p.x) - dart.notNull(this.x0)) * math.cos(this.alpha) - (dart.notNull(p.y) - dart.notNull(this.y0)) * math.sin(this.alpha);
        us = (dart.notNull(p.y) - dart.notNull(this.y0)) * math.cos(this.alpha) + (dart.notNull(p.x) - dart.notNull(this.x0)) * math.sin(this.alpha);
        us = dart.notNull(us) + dart.notNull(this.uc);
      }
      let qp = math.exp(-1 * dart.notNull(this.bl) * dart.notNull(vs) / dart.notNull(this.al));
      let sp = 0.5 * (qp - 1 / qp);
      let tp = 0.5 * (qp + 1 / qp);
      let vp = math.sin(dart.notNull(this.bl) * dart.notNull(us) / dart.notNull(this.al));
      let up = (vp * math.cos(this.gamma0) + sp * math.sin(this.gamma0)) / tp;
      let ts = math.pow(dart.notNull(this.el) / math.sqrt((1 + up) / (1 - up)), 1 / dart.notNull(this.bl));
      if ((up - 1)[$abs]() < dart.notNull(values.EPSLN)) {
        p.x = this.long0;
        p.y = values.HALF_PI;
      } else if ((up + 1)[$abs]() < dart.notNull(values.EPSLN)) {
        p.x = this.long0;
        p.y = -1 * dart.notNull(values.HALF_PI);
      } else {
        p.y = utils.phi2z(this.e, ts);
        p.x = utils.adjust_lon(dart.notNull(this.long0) - math.atan2(sp * math.cos(this.gamma0) - vp * math.sin(this.gamma0), math.cos(dart.notNull(this.bl) * dart.notNull(us) / dart.notNull(this.al))) / dart.notNull(this.bl));
      }
      return p;
    }
  };
  (omerc.HotineObliqueMercatorProjection.init = function(params) {
    let t0$, t0$0;
    this[bl] = null;
    this[al] = null;
    this[el] = null;
    this[gamma0] = null;
    this[uc] = null;
    this[lat0$7] = params.lat0;
    this[long0$9] = params.long0;
    this[longc] = params.longc;
    this[x0$10] = params.x0;
    this[y0$10] = params.y0;
    this[lat1] = params.lat1;
    this[lat2] = params.lat2;
    this[long1] = params.long1;
    this[long2] = params.long2;
    this[alpha$] = params.alpha;
    this[no_off] = boolL().as(params.map[$_get]("no_off"));
    this[no_rot] = boolL().as(params.map[$_get]("no_rot"));
    omerc.HotineObliqueMercatorProjection.__proto__.init.call(this, params);
    this.no_off = (t0$ = this.no_off, t0$ == null ? false : t0$);
    this.no_rot = (t0$0 = this.no_rot, t0$0 == null ? false : t0$0);
    if (this.k0 == null || this.k0[$isNaN]) {
      this.k0 = 1.0;
    }
    let sinlat = math.sin(this.lat0);
    let coslat = math.cos(this.lat0);
    let con = dart.notNull(this.e) * sinlat;
    this.bl = math.sqrt(1 + dart.notNull(this.es) / (1 - dart.notNull(this.es)) * math.pow(coslat, 4));
    this.al = dart.notNull(this.a) * dart.notNull(this.bl) * dart.notNull(this.k0) * math.sqrt(1 - dart.notNull(this.es)) / (1 - con * con);
    let t0 = utils.tsfnz(this.e, this.lat0, sinlat);
    let dl = dart.notNull(this.bl) / coslat * math.sqrt((1 - dart.notNull(this.es)) / (1 - con * con));
    if (dl * dl < 1) {
      dl = 1.0;
    }
    let fl = null;
    let gl = null;
    if (this.longc != null) {
      if (dart.notNull(this.lat0) >= 0) {
        fl = dl + math.sqrt(dl * dl - 1);
      } else {
        fl = dl - math.sqrt(dl * dl - 1);
      }
      this.el = dart.notNull(fl) * math.pow(t0, this.bl);
      gl = 0.5 * (dart.notNull(fl) - 1 / dart.notNull(fl));
      this.gamma0 = math.asin(math.sin(this.alpha) / dl);
      this.long0 = dart.notNull(this.longc) - math.asin(dart.notNull(gl) * math.tan(this.gamma0)) / dart.notNull(this.bl);
    } else {
      let t1 = utils.tsfnz(this.e, this.lat1, math.sin(this.lat1));
      let t2 = utils.tsfnz(this.e, this.lat2, math.sin(this.lat2));
      if (dart.notNull(this.lat0) >= 0) {
        this.el = (dl + math.sqrt(dl * dl - 1)) * math.pow(t0, this.bl);
      } else {
        this.el = (dl - math.sqrt(dl * dl - 1)) * math.pow(t0, this.bl);
      }
      let hl = math.pow(t1, this.bl);
      let ll = math.pow(t2, this.bl);
      fl = dart.notNull(this.el) / hl;
      gl = 0.5 * (dart.notNull(fl) - 1 / dart.notNull(fl));
      let jl = (dart.notNull(this.el) * dart.notNull(this.el) - ll * hl) / (dart.notNull(this.el) * dart.notNull(this.el) + ll * hl);
      let pl = (ll - hl) / (ll + hl);
      let dlon12 = utils.adjust_lon(dart.notNull(this.long1) - dart.notNull(this.long2));
      this.long0 = 0.5 * (dart.notNull(this.long1) + dart.notNull(this.long2)) - math.atan(jl * math.tan(0.5 * dart.notNull(this.bl) * dart.notNull(dlon12)) / pl) / dart.notNull(this.bl);
      this.long0 = utils.adjust_lon(this.long0);
      let dlon10 = utils.adjust_lon(dart.notNull(this.long1) - dart.notNull(this.long0));
      this.gamma0 = math.atan(math.sin(dart.notNull(this.bl) * dart.notNull(dlon10)) / dart.notNull(gl));
      this.alpha = math.asin(dl * math.sin(this.gamma0));
    }
    if (dart.test(this.no_off)) {
      this.uc = 0.0;
    } else {
      if (dart.notNull(this.lat0) >= 0) {
        this.uc = dart.notNull(this.al) / dart.notNull(this.bl) * math.atan2(math.sqrt(dl * dl - 1), math.cos(this.alpha));
      } else {
        this.uc = -1 * dart.notNull(this.al) / dart.notNull(this.bl) * math.atan2(math.sqrt(dl * dl - 1), math.cos(this.alpha));
      }
    }
  }).prototype = omerc.HotineObliqueMercatorProjection.prototype;
  dart.addTypeTests(omerc.HotineObliqueMercatorProjection);
  dart.addTypeCaches(omerc.HotineObliqueMercatorProjection);
  dart.setMethodSignature(omerc.HotineObliqueMercatorProjection, () => ({
    __proto__: dart.getMethods(omerc.HotineObliqueMercatorProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(omerc.HotineObliqueMercatorProjection, L16);
  dart.setFieldSignature(omerc.HotineObliqueMercatorProjection, () => ({
    __proto__: dart.getFields(omerc.HotineObliqueMercatorProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    longc: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    lat1: dart.fieldType(dart.legacy(core.double)),
    lat2: dart.fieldType(dart.legacy(core.double)),
    long1: dart.fieldType(dart.legacy(core.double)),
    long2: dart.fieldType(dart.legacy(core.double)),
    alpha: dart.fieldType(dart.legacy(core.double)),
    no_off: dart.fieldType(dart.legacy(core.bool)),
    no_rot: dart.fieldType(dart.legacy(core.bool)),
    bl: dart.fieldType(dart.legacy(core.double)),
    al: dart.fieldType(dart.legacy(core.double)),
    el: dart.fieldType(dart.legacy(core.double)),
    gamma0: dart.fieldType(dart.legacy(core.double)),
    uc: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(omerc.HotineObliqueMercatorProjection, {
    /*omerc.HotineObliqueMercatorProjection.names*/get names() {
      return JSArrayOfStringL().of(["Hotine_Oblique_Mercator", "Hotine Oblique Mercator", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin", "Hotine_Oblique_Mercator_Azimuth_Center", "omerc"]);
    }
  }, true);
  var lat0$8 = dart.privateName(nzmg, "NewZealandMapGridProjection.lat0");
  var long0$10 = dart.privateName(nzmg, "NewZealandMapGridProjection.long0");
  var x0$11 = dart.privateName(nzmg, "NewZealandMapGridProjection.x0");
  var y0$11 = dart.privateName(nzmg, "NewZealandMapGridProjection.y0");
  var A = dart.privateName(nzmg, "NewZealandMapGridProjection.A");
  var B_re = dart.privateName(nzmg, "NewZealandMapGridProjection.B_re");
  var B_im = dart.privateName(nzmg, "NewZealandMapGridProjection.B_im");
  var C_re = dart.privateName(nzmg, "NewZealandMapGridProjection.C_re");
  var C_im = dart.privateName(nzmg, "NewZealandMapGridProjection.C_im");
  var D = dart.privateName(nzmg, "NewZealandMapGridProjection.D");
  nzmg.NewZealandMapGridProjection = class NewZealandMapGridProjection extends projection.Projection {
    get lat0() {
      return this[lat0$8];
    }
    set lat0(value) {
      this[lat0$8] = value;
    }
    get long0() {
      return this[long0$10];
    }
    set long0(value) {
      this[long0$10] = value;
    }
    get x0() {
      return this[x0$11];
    }
    set x0(value) {
      this[x0$11] = value;
    }
    get y0() {
      return this[y0$11];
    }
    set y0(value) {
      this[y0$11] = value;
    }
    get A() {
      return this[A];
    }
    set A(value) {
      this[A] = value;
    }
    get B_re() {
      return this[B_re];
    }
    set B_re(value) {
      this[B_re] = value;
    }
    get B_im() {
      return this[B_im];
    }
    set B_im(value) {
      this[B_im] = value;
    }
    get C_re() {
      return this[C_re];
    }
    set C_re(value) {
      this[C_re] = value;
    }
    get C_im() {
      return this[C_im];
    }
    set C_im(value) {
      this[C_im] = value;
    }
    get D() {
      return this[D];
    }
    set D(value) {
      this[D] = value;
    }
    forward(p) {
      let n = null;
      let lon = p.x;
      let lat = p.y;
      let delta_lat = dart.notNull(lat) - dart.notNull(this.lat0);
      let delta_lon = dart.notNull(lon) - dart.notNull(this.long0);
      let d_phi = delta_lat / dart.notNull(values.SEC_TO_RAD) * 0.00001;
      let d_lambda = delta_lon;
      let d_phi_n = 1.0;
      let d_psi = 0.0;
      for (let t0 = n = 1; dart.notNull(n) <= 10; n = dart.notNull(n) + 1) {
        d_phi_n = d_phi_n * d_phi;
        d_psi = d_psi + dart.notNull(this.A[$_get](n)) * d_phi_n;
      }
      let th_re = d_psi;
      let th_im = d_lambda;
      let th_n_re = 1.0;
      let th_n_im = 0.0;
      let th_n_re1 = null;
      let th_n_im1 = null;
      let z_re = 0.0;
      let z_im = 0.0;
      for (let t1 = n = 1; dart.notNull(n) <= 6; n = dart.notNull(n) + 1) {
        th_n_re1 = dart.notNull(th_n_re) * th_re - dart.notNull(th_n_im) * th_im;
        th_n_im1 = dart.notNull(th_n_im) * th_re + dart.notNull(th_n_re) * th_im;
        th_n_re = doubleL().as(th_n_re1);
        th_n_im = doubleL().as(th_n_im1);
        z_re = z_re + dart.notNull(this.B_re[$_get](n)) * dart.notNull(th_n_re) - dart.notNull(this.B_im[$_get](n)) * dart.notNull(th_n_im);
        z_im = z_im + dart.notNull(this.B_im[$_get](n)) * dart.notNull(th_n_re) + dart.notNull(this.B_re[$_get](n)) * dart.notNull(th_n_im);
      }
      p.x = z_im * dart.notNull(this.a) + dart.notNull(this.x0);
      p.y = z_re * dart.notNull(this.a) + dart.notNull(this.y0);
      return p;
    }
    inverse(p) {
      let n = null;
      let x = p.x;
      let y = p.y;
      let delta_x = dart.notNull(x) - dart.notNull(this.x0);
      let delta_y = dart.notNull(y) - dart.notNull(this.y0);
      let z_re = delta_y / dart.notNull(this.a);
      let z_im = delta_x / dart.notNull(this.a);
      let z_n_re = 1.0;
      let z_n_im = 0.0;
      let z_n_re1 = null;
      let z_n_im1 = null;
      let th_re = 0.0;
      let th_im = 0.0;
      for (let t2 = n = 1; dart.notNull(n) <= 6; n = dart.notNull(n) + 1) {
        z_n_re1 = dart.notNull(z_n_re) * z_re - dart.notNull(z_n_im) * z_im;
        z_n_im1 = dart.notNull(z_n_im) * z_re + dart.notNull(z_n_re) * z_im;
        z_n_re = doubleL().as(z_n_re1);
        z_n_im = doubleL().as(z_n_im1);
        th_re = th_re + dart.notNull(this.C_re[$_get](n)) * dart.notNull(z_n_re) - dart.notNull(this.C_im[$_get](n)) * dart.notNull(z_n_im);
        th_im = th_im + dart.notNull(this.C_im[$_get](n)) * dart.notNull(z_n_re) + dart.notNull(this.C_re[$_get](n)) * dart.notNull(z_n_im);
      }
      for (let i = 0; i < dart.notNull(nzmg.iterations); i = i + 1) {
        let th_n_re = th_re;
        let th_n_im = th_im;
        let th_n_re1 = null;
        let th_n_im1 = null;
        let num_re = z_re;
        let num_im = z_im;
        for (let t3 = n = 2; dart.notNull(n) <= 6; n = dart.notNull(n) + 1) {
          th_n_re1 = dart.notNull(th_n_re) * th_re - dart.notNull(th_n_im) * th_im;
          th_n_im1 = dart.notNull(th_n_im) * th_re + dart.notNull(th_n_re) * th_im;
          th_n_re = doubleL().as(th_n_re1);
          th_n_im = doubleL().as(th_n_im1);
          num_re = num_re + (dart.notNull(n) - 1) * (dart.notNull(this.B_re[$_get](n)) * dart.notNull(th_n_re) - dart.notNull(this.B_im[$_get](n)) * dart.notNull(th_n_im));
          num_im = num_im + (dart.notNull(n) - 1) * (dart.notNull(this.B_im[$_get](n)) * dart.notNull(th_n_re) + dart.notNull(this.B_re[$_get](n)) * dart.notNull(th_n_im));
        }
        th_n_re = 1.0;
        th_n_im = 0.0;
        let den_re = this.B_re[$_get](1);
        let den_im = this.B_im[$_get](1);
        for (let t4 = n = 2; dart.notNull(n) <= 6; n = dart.notNull(n) + 1) {
          th_n_re1 = dart.notNull(th_n_re) * th_re - dart.notNull(th_n_im) * th_im;
          th_n_im1 = dart.notNull(th_n_im) * th_re + dart.notNull(th_n_re) * th_im;
          th_n_re = doubleL().as(th_n_re1);
          th_n_im = doubleL().as(th_n_im1);
          den_re = dart.notNull(den_re) + dart.notNull(n) * (dart.notNull(this.B_re[$_get](n)) * dart.notNull(th_n_re) - dart.notNull(this.B_im[$_get](n)) * dart.notNull(th_n_im));
          den_im = dart.notNull(den_im) + dart.notNull(n) * (dart.notNull(this.B_im[$_get](n)) * dart.notNull(th_n_re) + dart.notNull(this.B_re[$_get](n)) * dart.notNull(th_n_im));
        }
        let den2 = dart.notNull(den_re) * dart.notNull(den_re) + dart.notNull(den_im) * dart.notNull(den_im);
        th_re = (num_re * dart.notNull(den_re) + num_im * dart.notNull(den_im)) / den2;
        th_im = (num_im * dart.notNull(den_re) - num_re * dart.notNull(den_im)) / den2;
      }
      let d_psi = th_re;
      let d_lambda = th_im;
      let d_psi_n = 1.0;
      let d_phi = 0.0;
      for (let t5 = n = 1; dart.notNull(n) <= 9; n = dart.notNull(n) + 1) {
        d_psi_n = d_psi_n * d_psi;
        d_phi = d_phi + dart.notNull(this.D[$_get](n)) * d_psi_n;
      }
      let lat = dart.notNull(this.lat0) + d_phi * dart.notNull(values.SEC_TO_RAD) * 100000.0;
      let lon = dart.notNull(this.long0) + d_lambda;
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (nzmg.NewZealandMapGridProjection.init = function(params) {
    this[A] = ListOfdoubleL().new(11);
    this[B_re] = ListOfdoubleL().new(7);
    this[B_im] = ListOfdoubleL().new(7);
    this[C_re] = ListOfdoubleL().new(7);
    this[C_im] = ListOfdoubleL().new(7);
    this[D] = ListOfdoubleL().new(10);
    this[lat0$8] = params.lat0;
    this[long0$10] = params.long0;
    this[x0$11] = params.x0;
    this[y0$11] = params.y0;
    nzmg.NewZealandMapGridProjection.__proto__.init.call(this, params);
    this.A[$_set](1, 0.6399175073);
    this.A[$_set](2, -0.1358797613);
    this.A[$_set](3, 0.063294409);
    this.A[$_set](4, -0.02526853);
    this.A[$_set](5, 0.0117879);
    this.A[$_set](6, -0.0055161);
    this.A[$_set](7, 0.0026906);
    this.A[$_set](8, -0.001333);
    this.A[$_set](9, 0.00067);
    this.A[$_set](10, -0.00034);
    this.B_re[$_set](1, 0.7557853228);
    this.B_im[$_set](1, 0.0);
    this.B_re[$_set](2, 0.249204646);
    this.B_im[$_set](2, 0.003371507);
    this.B_re[$_set](3, -0.001541739);
    this.B_im[$_set](3, 0.04105856);
    this.B_re[$_set](4, -0.10162907);
    this.B_im[$_set](4, 0.01727609);
    this.B_re[$_set](5, -0.26623489);
    this.B_im[$_set](5, -0.36249218);
    this.B_re[$_set](6, -0.6870983);
    this.B_im[$_set](6, -1.1651967);
    this.C_re[$_set](1, 1.3231270439);
    this.C_im[$_set](1, 0.0);
    this.C_re[$_set](2, -0.577245789);
    this.C_im[$_set](2, -0.007809598);
    this.C_re[$_set](3, 0.508307513);
    this.C_im[$_set](3, -0.112208952);
    this.C_re[$_set](4, -0.15094762);
    this.C_im[$_set](4, 0.18200602);
    this.C_re[$_set](5, 1.01418179);
    this.C_im[$_set](5, 1.64497696);
    this.C_re[$_set](6, 1.9660549);
    this.C_im[$_set](6, 2.5127645);
    this.D[$_set](1, 1.5627014243);
    this.D[$_set](2, 0.5185406398);
    this.D[$_set](3, -0.03333098);
    this.D[$_set](4, -0.1052906);
    this.D[$_set](5, -0.0368594);
    this.D[$_set](6, 0.007317);
    this.D[$_set](7, 0.0122);
    this.D[$_set](8, 0.00394);
    this.D[$_set](9, -0.0013);
  }).prototype = nzmg.NewZealandMapGridProjection.prototype;
  dart.addTypeTests(nzmg.NewZealandMapGridProjection);
  dart.addTypeCaches(nzmg.NewZealandMapGridProjection);
  dart.setMethodSignature(nzmg.NewZealandMapGridProjection, () => ({
    __proto__: dart.getMethods(nzmg.NewZealandMapGridProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(nzmg.NewZealandMapGridProjection, L17);
  dart.setFieldSignature(nzmg.NewZealandMapGridProjection, () => ({
    __proto__: dart.getFields(nzmg.NewZealandMapGridProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    A: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    B_re: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    B_im: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    C_re: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    C_im: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    D: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double))))
  }));
  dart.defineLazy(nzmg.NewZealandMapGridProjection, {
    /*nzmg.NewZealandMapGridProjection.names*/get names() {
      return JSArrayOfStringL().of(["New_Zealand_Map_Grid", "nzmg"]);
    }
  }, true);
  dart.defineLazy(nzmg, {
    /*nzmg.iterations*/get iterations() {
      return 1;
    },
    set iterations(_) {}
  }, true);
  var long0$11 = dart.privateName(moll, "MollweideProjection.long0");
  var x0$12 = dart.privateName(moll, "MollweideProjection.x0");
  var y0$12 = dart.privateName(moll, "MollweideProjection.y0");
  moll.MollweideProjection = class MollweideProjection extends projection.Projection {
    get long0() {
      return this[long0$11];
    }
    set long0(value) {
      this[long0$11] = value;
    }
    get x0() {
      return this[x0$12];
    }
    set x0(value) {
      this[x0$12] = value;
    }
    get y0() {
      return this[y0$12];
    }
    set y0(value) {
      this[y0$12] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let delta_lon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      let theta = lat;
      let con = 3.141592653589793 * math.sin(lat);
      while (true) {
        let delta_theta = -(dart.notNull(theta) + math.sin(theta) - con) / (1 + math.cos(theta));
        theta = dart.notNull(theta) + delta_theta;
        if (delta_theta[$abs]() < dart.notNull(values.EPSLN)) {
          break;
        }
      }
      theta = dart.notNull(theta) / 2;
      if (3.141592653589793 / 2 - lat[$abs]() < dart.notNull(values.EPSLN)) {
        delta_lon = 0.0;
      }
      let x = 0.900316316158 * dart.notNull(this.a) * dart.notNull(delta_lon) * math.cos(theta) + dart.notNull(this.x0);
      let y = 1.4142135623731 * dart.notNull(this.a) * math.sin(theta) + dart.notNull(this.y0);
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let t6, t6$;
      let theta = null;
      let arg = null;
      t6 = p;
      t6.x = dart.notNull(t6.x) - dart.notNull(this.x0);
      t6$ = p;
      t6$.y = dart.notNull(t6$.y) - dart.notNull(this.y0);
      arg = dart.notNull(p.y) / (1.4142135623731 * dart.notNull(this.a));
      if (arg[$abs]() > 0.999999999999) {
        arg = 0.999999999999;
      }
      theta = math.asin(arg);
      let lon = utils.adjust_lon(dart.notNull(this.long0) + dart.notNull(p.x) / (0.900316316158 * dart.notNull(this.a) * math.cos(theta)));
      if (dart.notNull(lon) < -3.141592653589793) {
        lon = -3.141592653589793;
      }
      if (dart.notNull(lon) > 3.141592653589793) {
        lon = 3.141592653589793;
      }
      arg = (2 * dart.notNull(theta) + math.sin(2 * dart.notNull(theta))) / 3.141592653589793;
      if (arg[$abs]() > 1) {
        arg = 1.0;
      }
      let lat = math.asin(arg);
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (moll.MollweideProjection.init = function(params) {
    this[long0$11] = params.long0;
    this[x0$12] = params.x0;
    this[y0$12] = params.y0;
    moll.MollweideProjection.__proto__.init.call(this, params);
    ;
  }).prototype = moll.MollweideProjection.prototype;
  dart.addTypeTests(moll.MollweideProjection);
  dart.addTypeCaches(moll.MollweideProjection);
  dart.setMethodSignature(moll.MollweideProjection, () => ({
    __proto__: dart.getMethods(moll.MollweideProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(moll.MollweideProjection, L18);
  dart.setFieldSignature(moll.MollweideProjection, () => ({
    __proto__: dart.getFields(moll.MollweideProjection.__proto__),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(moll.MollweideProjection, {
    /*moll.MollweideProjection.names*/get names() {
      return JSArrayOfStringL().of(["Mollweide", "moll"]);
    }
  }, true);
  var long0$12 = dart.privateName(mill, "MillerCylindricalProjection.long0");
  var x0$13 = dart.privateName(mill, "MillerCylindricalProjection.x0");
  var y0$13 = dart.privateName(mill, "MillerCylindricalProjection.y0");
  mill.MillerCylindricalProjection = class MillerCylindricalProjection extends projection.Projection {
    get long0() {
      return this[long0$12];
    }
    set long0(value) {
      this[long0$12] = value;
    }
    get x0() {
      return this[x0$13];
    }
    set x0(value) {
      this[x0$13] = value;
    }
    get y0() {
      return this[y0$13];
    }
    set y0(value) {
      this[y0$13] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      let x = dart.notNull(this.x0) + dart.notNull(this.a) * dart.notNull(dlon);
      let y = dart.notNull(this.y0) + dart.notNull(this.a) * math.log(math.tan(3.141592653589793 / 4 + dart.notNull(lat) / 2.5)) * 1.25;
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let t6, t6$;
      t6 = p;
      t6.x = dart.notNull(t6.x) - dart.notNull(this.x0);
      t6$ = p;
      t6$.y = dart.notNull(t6$.y) - dart.notNull(this.y0);
      let lon = utils.adjust_lon(dart.notNull(this.long0) + dart.notNull(p.x) / dart.notNull(this.a));
      let lat = 2.5 * (math.atan(math.exp(0.8 * dart.notNull(p.y) / dart.notNull(this.a))) - 3.141592653589793 / 4);
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (mill.MillerCylindricalProjection.init = function(params) {
    this[long0$12] = params.long0;
    this[x0$13] = params.x0;
    this[y0$13] = params.y0;
    mill.MillerCylindricalProjection.__proto__.init.call(this, params);
    ;
  }).prototype = mill.MillerCylindricalProjection.prototype;
  dart.addTypeTests(mill.MillerCylindricalProjection);
  dart.addTypeCaches(mill.MillerCylindricalProjection);
  dart.setMethodSignature(mill.MillerCylindricalProjection, () => ({
    __proto__: dart.getMethods(mill.MillerCylindricalProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(mill.MillerCylindricalProjection, L19);
  dart.setFieldSignature(mill.MillerCylindricalProjection, () => ({
    __proto__: dart.getFields(mill.MillerCylindricalProjection.__proto__),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(mill.MillerCylindricalProjection, {
    /*mill.MillerCylindricalProjection.names*/get names() {
      return JSArrayOfStringL().of(["Miller_Cylindrical", "mill"]);
    }
  }, true);
  var long0$13 = dart.privateName(merc, "PseudoMercatorProjection.long0");
  var x0$14 = dart.privateName(merc, "PseudoMercatorProjection.x0");
  var y0$14 = dart.privateName(merc, "PseudoMercatorProjection.y0");
  merc.PseudoMercatorProjection = class PseudoMercatorProjection extends projection.Projection {
    get long0() {
      return this[long0$13];
    }
    set long0(value) {
      this[long0$13] = value;
    }
    get x0() {
      return this[x0$14];
    }
    set x0(value) {
      this[x0$14] = value;
    }
    get y0() {
      return this[y0$14];
    }
    set y0(value) {
      this[y0$14] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      if (dart.notNull(lat) * dart.notNull(values.R2D) > 90 && dart.notNull(lat) * dart.notNull(values.R2D) < -90 && dart.notNull(lon) * dart.notNull(values.R2D) > 180 && dart.notNull(lon) * dart.notNull(values.R2D) < -180) {
        return null;
      }
      let x = null;
      let y = null;
      if ((lat[$abs]() - dart.notNull(values.HALF_PI))[$abs]() <= dart.notNull(values.EPSLN)) {
        return null;
      } else {
        if (this.sphere != null && dart.test(this.sphere)) {
          x = dart.notNull(this.x0) + dart.notNull(this.a) * dart.notNull(this.k0) * dart.notNull(utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0)));
          y = dart.notNull(this.y0) + dart.notNull(this.a) * dart.notNull(this.k0) * math.log(math.tan(dart.notNull(values.FORTPI) + 0.5 * dart.notNull(lat)));
        } else {
          let sinphi = math.sin(lat);
          let ts = utils.tsfnz(this.e, lat, sinphi);
          x = dart.notNull(this.x0) + dart.notNull(this.a) * dart.notNull(this.k0) * dart.notNull(utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0)));
          y = dart.notNull(this.y0) - dart.notNull(this.a) * dart.notNull(this.k0) * math.log(ts);
        }
        p.x = doubleL().as(x);
        p.y = doubleL().as(y);
        return p;
      }
    }
    inverse(p) {
      let x = dart.notNull(p.x) - dart.notNull(this.x0);
      let y = dart.notNull(p.y) - dart.notNull(this.y0);
      let lon = null;
      let lat = null;
      if (this.sphere != null && dart.test(this.sphere)) {
        lat = dart.notNull(values.HALF_PI) - 2 * math.atan(math.exp(-y / (dart.notNull(this.a) * dart.notNull(this.k0))));
      } else {
        let ts = math.exp(-y / (dart.notNull(this.a) * dart.notNull(this.k0)));
        lat = utils.phi2z(this.e, ts);
        if (lat === -9999.0) {
          return null;
        }
      }
      lon = utils.adjust_lon(dart.notNull(this.long0) + x / (dart.notNull(this.a) * dart.notNull(this.k0)));
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (merc.PseudoMercatorProjection.init = function(params) {
    this[long0$13] = params.long0;
    this[x0$14] = params.x0;
    this[y0$14] = params.y0;
    merc.PseudoMercatorProjection.__proto__.init.call(this, params);
    let k = params.k;
    let lat_ts = params.lat_ts;
    let con = dart.notNull(this.b) / dart.notNull(this.a);
    this.es = 1 - con * con;
    this.x0 == null ? this.x0 = 0.0 : null;
    this.y0 == null ? this.y0 = 0.0 : null;
    this.e = math.sqrt(this.es);
    if (lat_ts != null) {
      if (this.sphere != null && dart.test(this.sphere)) {
        this.k0 = math.cos(lat_ts);
      } else {
        this.k0 = utils.msfnz(this.e, math.sin(lat_ts), math.cos(lat_ts));
      }
    } else {
      if (this.k0 == null) {
        if (k != null) {
          this.k0 = k;
        } else {
          this.k0 = 1.0;
        }
      }
    }
  }).prototype = merc.PseudoMercatorProjection.prototype;
  dart.addTypeTests(merc.PseudoMercatorProjection);
  dart.addTypeCaches(merc.PseudoMercatorProjection);
  dart.setMethodSignature(merc.PseudoMercatorProjection, () => ({
    __proto__: dart.getMethods(merc.PseudoMercatorProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(merc.PseudoMercatorProjection, L20);
  dart.setFieldSignature(merc.PseudoMercatorProjection, () => ({
    __proto__: dart.getFields(merc.PseudoMercatorProjection.__proto__),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(merc.PseudoMercatorProjection, {
    /*merc.PseudoMercatorProjection.names*/get names() {
      return JSArrayOfStringL().of(["Mercator", "Popular Visualisation Pseudo Mercator", "Mercator_1SP", "Mercator_Auxiliary_Sphere", "merc"]);
    }
  }, true);
  var datumCode = dart.privateName(longlat, "LongLat.datumCode");
  var datumName = dart.privateName(longlat, "LongLat.datumName");
  longlat.LongLat = class LongLat extends projection.Projection {
    get datumCode() {
      return this[datumCode];
    }
    set datumCode(value) {
      super.datumCode = value;
    }
    get datumName() {
      return this[datumName];
    }
    set datumName(value) {
      super.datumName = value;
    }
    forward(p) {
      return p;
    }
    inverse(p) {
      return p;
    }
  };
  (longlat.LongLat.init = function(params) {
    this[datumCode] = params.datumCode;
    this[datumName] = params.datumName;
    longlat.LongLat.__proto__.init.call(this, params);
    ;
  }).prototype = longlat.LongLat.prototype;
  dart.addTypeTests(longlat.LongLat);
  dart.addTypeCaches(longlat.LongLat);
  dart.setMethodSignature(longlat.LongLat, () => ({
    __proto__: dart.getMethods(longlat.LongLat.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(longlat.LongLat, L21);
  dart.setFieldSignature(longlat.LongLat, () => ({
    __proto__: dart.getFields(longlat.LongLat.__proto__),
    datumCode: dart.finalFieldType(dart.legacy(core.String)),
    datumName: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(longlat.LongLat, {
    /*longlat.LongLat.names*/get names() {
      return JSArrayOfStringL().of(["longlat", "identity"]);
    }
  }, true);
  var lat0$9 = dart.privateName(lcc, "LambertConformalConicProjection.lat0");
  var long0$14 = dart.privateName(lcc, "LambertConformalConicProjection.long0");
  var lat1$ = dart.privateName(lcc, "LambertConformalConicProjection.lat1");
  var lat2$ = dart.privateName(lcc, "LambertConformalConicProjection.lat2");
  var x0$15 = dart.privateName(lcc, "LambertConformalConicProjection.x0");
  var y0$15 = dart.privateName(lcc, "LambertConformalConicProjection.y0");
  var ns = dart.privateName(lcc, "LambertConformalConicProjection.ns");
  var f0 = dart.privateName(lcc, "LambertConformalConicProjection.f0");
  var rh$ = dart.privateName(lcc, "LambertConformalConicProjection.rh");
  var title$0 = dart.privateName(lcc, "LambertConformalConicProjection.title");
  lcc.LambertConformalConicProjection = class LambertConformalConicProjection extends projection.Projection {
    get lat0() {
      return this[lat0$9];
    }
    set lat0(value) {
      this[lat0$9] = value;
    }
    get long0() {
      return this[long0$14];
    }
    set long0(value) {
      this[long0$14] = value;
    }
    get lat1() {
      return this[lat1$];
    }
    set lat1(value) {
      this[lat1$] = value;
    }
    get lat2() {
      return this[lat2$];
    }
    set lat2(value) {
      this[lat2$] = value;
    }
    get x0() {
      return this[x0$15];
    }
    set x0(value) {
      this[x0$15] = value;
    }
    get y0() {
      return this[y0$15];
    }
    set y0(value) {
      this[y0$15] = value;
    }
    get ns() {
      return this[ns];
    }
    set ns(value) {
      this[ns] = value;
    }
    get f0() {
      return this[f0];
    }
    set f0(value) {
      this[f0] = value;
    }
    get rh() {
      return this[rh$];
    }
    set rh(value) {
      this[rh$] = value;
    }
    get title() {
      return this[title$0];
    }
    set title(value) {
      this[title$0] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      if ((2 * lat[$abs]() - 3.141592653589793)[$abs]() <= dart.notNull(values.EPSLN)) {
        lat = dart.notNull(utils.sign(lat)) * (dart.notNull(values.HALF_PI) - 2 * dart.notNull(values.EPSLN));
      }
      let con = (lat[$abs]() - dart.notNull(values.HALF_PI))[$abs]();
      let ts = null;
      let rh1 = null;
      if (con > dart.notNull(values.EPSLN)) {
        ts = utils.tsfnz(this.e, lat, math.sin(lat));
        rh1 = dart.notNull(this.a) * dart.notNull(this.f0) * math.pow(core.num.as(ts), this.ns);
      } else {
        con = dart.notNull(lat) * dart.notNull(this.ns);
        if (con <= 0) {
          return null;
        }
        rh1 = 0;
      }
      let theta = dart.notNull(this.ns) * dart.notNull(utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0)));
      p.x = dart.notNull(this.k0) * dart.notNull(core.num.as(dart.dsend(rh1, '*', [math.sin(theta)]))) + dart.notNull(this.x0);
      p.y = dart.notNull(this.k0) * (dart.notNull(this.rh) - dart.notNull(core.num.as(dart.dsend(rh1, '*', [math.cos(theta)])))) + dart.notNull(this.y0);
      return p;
    }
    inverse(p) {
      let rh1 = null;
      let con = null;
      let ts = null;
      let lat = null;
      let lon = null;
      let x = (dart.notNull(p.x) - dart.notNull(this.x0)) / dart.notNull(this.k0);
      let y = dart.notNull(this.rh) - (dart.notNull(p.y) - dart.notNull(this.y0)) / dart.notNull(this.k0);
      if (dart.notNull(this.ns) > 0) {
        rh1 = math.sqrt(x * x + y * y);
        con = 1.0;
      } else {
        rh1 = -math.sqrt(x * x + y * y);
        con = -1.0;
      }
      let theta = 0.0;
      if (rh1 !== 0) {
        theta = math.atan2(dart.notNull(con) * x, dart.notNull(con) * y);
      }
      if (rh1 !== 0 || dart.notNull(this.ns) > 0) {
        con = 1 / dart.notNull(this.ns);
        ts = math.pow(dart.notNull(rh1) / (dart.notNull(this.a) * dart.notNull(this.f0)), con);
        lat = utils.phi2z(this.e, ts);
        if (lat === -9999) {
          return null;
        }
      } else {
        lat = -dart.notNull(values.HALF_PI);
      }
      lon = utils.adjust_lon(theta / dart.notNull(this.ns) + dart.notNull(this.long0));
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (lcc.LambertConformalConicProjection.init = function(params) {
    let t6, t6$;
    this[ns] = null;
    this[f0] = null;
    this[rh$] = null;
    this[title$0] = null;
    this[lat0$9] = params.lat0;
    this[long0$14] = params.long0;
    this[lat1$] = params.lat1;
    this[lat2$] = params.lat2;
    this[x0$15] = params.x0;
    this[y0$15] = params.y0;
    lcc.LambertConformalConicProjection.__proto__.init.call(this, params);
    this.lat2 == null ? this.lat2 = this.lat1 : null;
    this.k0 == null ? this.k0 = 1.0 : null;
    this.x0 = (t6 = this.x0, t6 == null ? 0.0 : t6);
    this.y0 = (t6$ = this.y0, t6$ == null ? 0.0 : t6$);
    if ((dart.notNull(this.lat1) + dart.notNull(this.lat2))[$abs]() < dart.notNull(values.EPSLN)) {
      return;
    }
    let temp = dart.notNull(this.b) / dart.notNull(this.a);
    this.e = math.sqrt(1 - temp * temp);
    let sin1 = math.sin(this.lat1);
    let cos1 = math.cos(this.lat1);
    let ms1 = utils.msfnz(this.e, sin1, cos1);
    let ts1 = utils.tsfnz(this.e, this.lat1, sin1);
    let sin2 = math.sin(this.lat2);
    let cos2 = math.cos(this.lat2);
    let ms2 = utils.msfnz(this.e, sin2, cos2);
    let ts2 = utils.tsfnz(this.e, this.lat2, sin2);
    let ts0 = utils.tsfnz(this.e, this.lat0, math.sin(this.lat0));
    if ((dart.notNull(this.lat1) - dart.notNull(this.lat2))[$abs]() > dart.notNull(values.EPSLN)) {
      this.ns = math.log(dart.notNull(ms1) / dart.notNull(ms2)) / math.log(dart.notNull(ts1) / dart.notNull(ts2));
    } else {
      this.ns = sin1;
    }
    if (this.ns[$isNaN]) {
      this.ns = sin1;
    }
    this.f0 = dart.notNull(ms1) / (dart.notNull(this.ns) * math.pow(ts1, this.ns));
    this.rh = dart.notNull(this.a) * dart.notNull(this.f0) * math.pow(ts0, this.ns);
    this.title == null ? this.title = "Lambert Conformal Conic" : null;
  }).prototype = lcc.LambertConformalConicProjection.prototype;
  dart.addTypeTests(lcc.LambertConformalConicProjection);
  dart.addTypeCaches(lcc.LambertConformalConicProjection);
  dart.setMethodSignature(lcc.LambertConformalConicProjection, () => ({
    __proto__: dart.getMethods(lcc.LambertConformalConicProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(lcc.LambertConformalConicProjection, L22);
  dart.setFieldSignature(lcc.LambertConformalConicProjection, () => ({
    __proto__: dart.getFields(lcc.LambertConformalConicProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    lat1: dart.fieldType(dart.legacy(core.double)),
    lat2: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    ns: dart.fieldType(dart.legacy(core.double)),
    f0: dart.fieldType(dart.legacy(core.double)),
    rh: dart.fieldType(dart.legacy(core.double)),
    title: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(lcc.LambertConformalConicProjection, {
    /*lcc.LambertConformalConicProjection.names*/get names() {
      return JSArrayOfStringL().of(["Lambert Tangential Conformal Conic Projection", "Lambert_Conformal_Conic", "Lambert_Conformal_Conic_2SP", "lcc"]);
    }
  }, true);
  var _authset = dart.privateName(laea, "_authset");
  var _authlat = dart.privateName(laea, "_authlat");
  var lat0$10 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.lat0");
  var long0$15 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.long0");
  var x0$16 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.x0");
  var y0$16 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.y0");
  var phi0 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.phi0");
  var mode = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.mode");
  var apa = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.apa");
  var qp = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.qp");
  var mmf = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.mmf");
  var dd = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.dd");
  var rq = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.rq");
  var xmf = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.xmf");
  var ymf = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.ymf");
  var sinb1 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.sinb1");
  var cosb1 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.cosb1");
  var sinph0 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.sinph0");
  var cosph0 = dart.privateName(laea, "LambertAzimuthalEqualAreaProjection.cosph0");
  laea.LambertAzimuthalEqualAreaProjection = class LambertAzimuthalEqualAreaProjection extends projection.Projection {
    get lat0() {
      return this[lat0$10];
    }
    set lat0(value) {
      this[lat0$10] = value;
    }
    get long0() {
      return this[long0$15];
    }
    set long0(value) {
      this[long0$15] = value;
    }
    get x0() {
      return this[x0$16];
    }
    set x0(value) {
      this[x0$16] = value;
    }
    get y0() {
      return this[y0$16];
    }
    set y0(value) {
      this[y0$16] = value;
    }
    get phi0() {
      return this[phi0];
    }
    set phi0(value) {
      this[phi0] = value;
    }
    get mode() {
      return this[mode];
    }
    set mode(value) {
      this[mode] = value;
    }
    get apa() {
      return this[apa];
    }
    set apa(value) {
      this[apa] = value;
    }
    get qp() {
      return this[qp];
    }
    set qp(value) {
      this[qp] = value;
    }
    get mmf() {
      return this[mmf];
    }
    set mmf(value) {
      this[mmf] = value;
    }
    get dd() {
      return this[dd];
    }
    set dd(value) {
      this[dd] = value;
    }
    get rq() {
      return this[rq];
    }
    set rq(value) {
      this[rq] = value;
    }
    get xmf() {
      return this[xmf];
    }
    set xmf(value) {
      this[xmf] = value;
    }
    get ymf() {
      return this[ymf];
    }
    set ymf(value) {
      this[ymf] = value;
    }
    get sinb1() {
      return this[sinb1];
    }
    set sinb1(value) {
      this[sinb1] = value;
    }
    get cosb1() {
      return this[cosb1];
    }
    set cosb1(value) {
      this[cosb1] = value;
    }
    get sinph0() {
      return this[sinph0];
    }
    set sinph0(value) {
      this[sinph0] = value;
    }
    get cosph0() {
      return this[cosph0];
    }
    set cosph0(value) {
      this[cosph0] = value;
    }
    forward(p) {
      let x = null;
      let y = null;
      let coslam = null;
      let sinlam = null;
      let sinphi = null;
      let q = null;
      let sinb = null;
      let cosb = null;
      let b = null;
      let cosphi = null;
      let lam = p.x;
      let phi = p.y;
      lam = utils.adjust_lon(dart.notNull(lam) - dart.notNull(this.long0));
      if (this.sphere != null && dart.test(this.sphere)) {
        sinphi = math.sin(phi);
        cosphi = math.cos(phi);
        coslam = math.cos(lam);
        if (this.mode === 4 || this.mode === 3) {
          y = this.mode === 3 ? 1 + dart.notNull(cosphi) * dart.notNull(coslam) : 1 + dart.notNull(this.sinph0) * dart.notNull(sinphi) + dart.notNull(this.cosph0) * dart.notNull(cosphi) * dart.notNull(coslam);
          if (dart.notNull(y) <= dart.notNull(values.EPSLN)) {
            return null;
          }
          y = math.sqrt(2 / dart.notNull(y));
          x = dart.notNull(y) * dart.notNull(cosphi) * math.sin(lam);
          y = dart.notNull(y) * dart.notNull(this.mode === 3 ? sinphi : dart.notNull(this.cosph0) * dart.notNull(sinphi) - dart.notNull(this.sinph0) * dart.notNull(cosphi) * dart.notNull(coslam));
        } else if (this.mode === 2 || this.mode === 1) {
          if (this.mode === 2) {
            coslam = -dart.notNull(coslam);
          }
          if (this.phi0 != null && (dart.notNull(phi) + dart.notNull(this.phi0))[$abs]() < dart.notNull(values.EPSLN)) {
            return null;
          }
          y = dart.notNull(values.FORTPI) - dart.notNull(phi) * 0.5;
          y = 2 * (this.mode === 1 ? math.cos(y) : math.sin(y));
          x = dart.notNull(y) * math.sin(lam);
          y = dart.notNull(y) * dart.notNull(coslam);
        }
      } else {
        sinb = 0.0;
        cosb = 0.0;
        b = 0.0;
        coslam = math.cos(lam);
        sinlam = math.sin(lam);
        sinphi = math.sin(phi);
        q = utils.qsfnz(this.e, sinphi);
        if (this.mode === 4 || this.mode === 3) {
          sinb = dart.notNull(q) / dart.notNull(this.qp);
          cosb = math.sqrt(1 - dart.notNull(sinb) * dart.notNull(sinb));
        }
        switch (this.mode) {
          case 4:
          {
            b = 1 + dart.notNull(this.sinb1) * dart.notNull(sinb) + dart.notNull(this.cosb1) * dart.notNull(cosb) * dart.notNull(coslam);
            break;
          }
          case 3:
          {
            b = 1 + dart.notNull(cosb) * dart.notNull(coslam);
            break;
          }
          case 2:
          {
            b = dart.notNull(values.HALF_PI) + dart.notNull(phi);
            q = dart.notNull(this.qp) - dart.notNull(q);
            break;
          }
          case 1:
          {
            b = dart.notNull(phi) - dart.notNull(values.HALF_PI);
            q = dart.notNull(this.qp) + dart.notNull(q);
            break;
          }
        }
        if (b[$abs]() < dart.notNull(values.EPSLN)) {
          return null;
        }
        switch (this.mode) {
          case 4:
          case 3:
          {
            b = math.sqrt(2 / dart.notNull(b));
            if (this.mode === 4) {
              y = dart.notNull(this.ymf) * dart.notNull(b) * (dart.notNull(this.cosb1) * dart.notNull(sinb) - dart.notNull(this.sinb1) * dart.notNull(cosb) * dart.notNull(coslam));
            } else {
              y = (b = math.sqrt(2 / (1 + dart.notNull(cosb) * dart.notNull(coslam)))) * dart.notNull(sinb) * dart.notNull(this.ymf);
            }
            x = dart.notNull(this.xmf) * dart.notNull(b) * dart.notNull(cosb) * dart.notNull(sinlam);
            break;
          }
          case 2:
          case 1:
          {
            if (dart.notNull(q) >= 0) {
              x = (b = math.sqrt(q)) * dart.notNull(sinlam);
              y = dart.notNull(coslam) * dart.notNull(this.mode === 1 ? b : -dart.notNull(b));
            } else {
              x = y = 0.0;
            }
            break;
          }
        }
      }
      p.x = dart.notNull(this.a) * dart.notNull(x) + dart.notNull(this.x0);
      p.y = dart.notNull(this.a) * dart.notNull(y) + dart.notNull(this.y0);
      return p;
    }
    inverse(p) {
      let t6, t6$;
      t6 = p;
      t6.x = dart.notNull(t6.x) - dart.notNull(this.x0);
      t6$ = p;
      t6$.y = dart.notNull(t6$.y) - dart.notNull(this.y0);
      let x = dart.notNull(p.x) / dart.notNull(this.a);
      let y = dart.notNull(p.y) / dart.notNull(this.a);
      let lam = null;
      let phi = null;
      let cCe = null;
      let sCe = null;
      let q = null;
      let rho = null;
      let ab = null;
      if (this.sphere != null && dart.test(this.sphere)) {
        let cosz = 0.0;
        let rh = null;
        let sinz = 0.0;
        rh = math.sqrt(x * x + y * y);
        phi = dart.notNull(rh) * 0.5;
        if (dart.notNull(phi) > 1) {
          return null;
        }
        phi = 2 * math.asin(phi);
        if (this.mode === 4 || this.mode === 3) {
          sinz = math.sin(phi);
          cosz = math.cos(phi);
        }
        switch (this.mode) {
          case 3:
          {
            phi = rh[$abs]() <= dart.notNull(values.EPSLN) ? 0.0 : math.asin(y * sinz / dart.notNull(rh));
            x = x * sinz;
            y = cosz * dart.notNull(rh);
            break;
          }
          case 4:
          {
            phi = rh[$abs]() <= dart.notNull(values.EPSLN) ? this.phi0 : math.asin(cosz * dart.notNull(this.sinph0) + y * sinz * dart.notNull(this.cosph0) / dart.notNull(rh));
            x = x * (sinz * dart.notNull(this.cosph0));
            y = (cosz - math.sin(phi) * dart.notNull(this.sinph0)) * dart.notNull(rh);
            break;
          }
          case 2:
          {
            y = -y;
            phi = dart.notNull(values.HALF_PI) - dart.notNull(phi);
            break;
          }
          case 1:
          {
            phi = dart.notNull(phi) - dart.notNull(values.HALF_PI);
            break;
          }
        }
        lam = y === 0 && (this.mode === 3 || this.mode === 4) ? 0.0 : math.atan2(x, y);
      } else {
        ab = 0.0;
        if (this.mode === 4 || this.mode === 3) {
          x = x / dart.notNull(this.dd);
          y = y * dart.notNull(this.dd);
          rho = math.sqrt(x * x + y * y);
          if (dart.notNull(rho) < dart.notNull(values.EPSLN)) {
            p.x = 0.0;
            p.y = this.phi0;
            return p;
          }
          sCe = 2 * math.asin(0.5 * dart.notNull(rho) / dart.notNull(this.rq));
          cCe = math.cos(sCe);
          x = x * (sCe = math.sin(sCe));
          if (this.mode === 4) {
            ab = dart.notNull(cCe) * dart.notNull(this.sinb1) + y * dart.notNull(sCe) * dart.notNull(this.cosb1) / dart.notNull(rho);
            q = dart.notNull(this.qp) * dart.notNull(ab);
            y = dart.notNull(rho) * dart.notNull(this.cosb1) * dart.notNull(cCe) - y * dart.notNull(this.sinb1) * dart.notNull(sCe);
          } else {
            ab = y * dart.notNull(sCe) / dart.notNull(rho);
            q = dart.notNull(this.qp) * dart.notNull(ab);
            y = dart.notNull(rho) * dart.notNull(cCe);
          }
        } else if (this.mode === 2 || this.mode === 1) {
          if (this.mode === 2) {
            y = -y;
          }
          q = x * x + y * y;
          if (q == null) {
            p.x = 0.0;
            p.y = this.phi0;
            return p;
          }
          ab = 1 - dart.notNull(q) / dart.notNull(this.qp);
          if (this.mode === 1) {
            ab = -dart.notNull(ab);
          }
        }
        lam = math.atan2(x, y);
        phi = this[_authlat](math.asin(ab), this.apa);
      }
      p.x = utils.adjust_lon(dart.notNull(this.long0) + dart.notNull(lam));
      p.y = phi;
      return p;
    }
    [_authset](es) {
      let t7, t6, t7$, t6$, t7$0, t6$0;
      let t = null;
      let APA = ListOfdoubleL().new(3);
      APA[$_set](0, dart.notNull(es) * dart.notNull(laea.P00));
      t = dart.notNull(es) * dart.notNull(es);
      t6 = APA;
      t7 = 0;
      t6[$_set](t7, dart.notNull(t6[$_get](t7)) + dart.notNull(t) * dart.notNull(laea.P01));
      APA[$_set](1, dart.notNull(t) * dart.notNull(laea.P10));
      t = dart.notNull(t) * dart.notNull(es);
      t6$ = APA;
      t7$ = 0;
      t6$[$_set](t7$, dart.notNull(t6$[$_get](t7$)) + dart.notNull(t) * dart.notNull(laea.P02));
      t6$0 = APA;
      t7$0 = 1;
      t6$0[$_set](t7$0, dart.notNull(t6$0[$_get](t7$0)) + dart.notNull(t) * dart.notNull(laea.P11));
      APA[$_set](2, dart.notNull(t) * dart.notNull(laea.P20));
      return APA;
    }
    [_authlat](beta, APA) {
      let t = dart.notNull(beta) + dart.notNull(beta);
      return dart.notNull(beta) + dart.notNull(APA[$_get](0)) * math.sin(t) + dart.notNull(APA[$_get](1)) * math.sin(t + t) + dart.notNull(APA[$_get](2)) * math.sin(t + t + t);
    }
  };
  (laea.LambertAzimuthalEqualAreaProjection.init = function(params) {
    this[mode] = null;
    this[apa] = null;
    this[qp] = null;
    this[mmf] = null;
    this[dd] = null;
    this[rq] = null;
    this[xmf] = null;
    this[ymf] = null;
    this[sinb1] = null;
    this[cosb1] = null;
    this[sinph0] = null;
    this[cosph0] = null;
    this[lat0$10] = params.lat0;
    this[long0$15] = params.long0;
    this[x0$16] = params.x0;
    this[y0$16] = params.y0;
    this[phi0] = doubleL().as(params.map[$_get]("phi0"));
    laea.LambertAzimuthalEqualAreaProjection.__proto__.init.call(this, params);
    let t = this.lat0[$abs]();
    if ((t - dart.notNull(values.HALF_PI))[$abs]() < dart.notNull(values.EPSLN)) {
      this.mode = dart.notNull(this.lat0) < 0 ? 1 : 2;
    } else if (t[$abs]() < dart.notNull(values.EPSLN)) {
      this.mode = 3;
    } else {
      this.mode = 4;
    }
    if (dart.notNull(this.es) > 0) {
      let sinphi = null;
      this.qp = utils.qsfnz(this.e, 1.0);
      this.mmf = 0.5 / (1 - dart.notNull(this.es));
      this.apa = this[_authset](this.es);
      switch (this.mode) {
        case 2:
        {
          this.dd = 1.0;
          break;
        }
        case 1:
        {
          this.dd = 1.0;
          break;
        }
        case 3:
        {
          this.rq = math.sqrt(0.5 * dart.notNull(this.qp));
          this.dd = 1 / dart.notNull(this.rq);
          this.xmf = 1.0;
          this.ymf = 0.5 * dart.notNull(this.qp);
          break;
        }
        case 4:
        {
          this.rq = math.sqrt(0.5 * dart.notNull(this.qp));
          sinphi = math.sin(this.lat0);
          this.sinb1 = dart.notNull(utils.qsfnz(this.e, doubleL().as(sinphi))) / dart.notNull(this.qp);
          this.cosb1 = math.sqrt(1 - dart.notNull(this.sinb1) * dart.notNull(this.sinb1));
          this.dd = math.cos(this.lat0) / (math.sqrt(1 - dart.notNull(this.es) * dart.notNull(core.num.as(sinphi)) * dart.notNull(core.num.as(sinphi))) * dart.notNull(this.rq) * dart.notNull(this.cosb1));
          this.ymf = dart.notNull(this.xmf = this.rq) / dart.notNull(this.dd);
          this.xmf = dart.notNull(this.xmf) * dart.notNull(this.dd);
          break;
        }
      }
    } else {
      if (this.mode === 4) {
        this.sinph0 = math.sin(this.lat0);
        this.cosph0 = math.cos(this.lat0);
      }
    }
  }).prototype = laea.LambertAzimuthalEqualAreaProjection.prototype;
  dart.addTypeTests(laea.LambertAzimuthalEqualAreaProjection);
  dart.addTypeCaches(laea.LambertAzimuthalEqualAreaProjection);
  dart.setMethodSignature(laea.LambertAzimuthalEqualAreaProjection, () => ({
    __proto__: dart.getMethods(laea.LambertAzimuthalEqualAreaProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    [_authset]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.double))), [dart.legacy(core.double)]),
    [_authlat]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.List$(dart.legacy(core.double)))])
  }));
  dart.setLibraryUri(laea.LambertAzimuthalEqualAreaProjection, L23);
  dart.setFieldSignature(laea.LambertAzimuthalEqualAreaProjection, () => ({
    __proto__: dart.getFields(laea.LambertAzimuthalEqualAreaProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    phi0: dart.fieldType(dart.legacy(core.double)),
    mode: dart.fieldType(dart.legacy(core.int)),
    apa: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    qp: dart.fieldType(dart.legacy(core.double)),
    mmf: dart.fieldType(dart.legacy(core.double)),
    dd: dart.fieldType(dart.legacy(core.double)),
    rq: dart.fieldType(dart.legacy(core.double)),
    xmf: dart.fieldType(dart.legacy(core.double)),
    ymf: dart.fieldType(dart.legacy(core.double)),
    sinb1: dart.fieldType(dart.legacy(core.double)),
    cosb1: dart.fieldType(dart.legacy(core.double)),
    sinph0: dart.fieldType(dart.legacy(core.double)),
    cosph0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(laea.LambertAzimuthalEqualAreaProjection, {
    /*laea.LambertAzimuthalEqualAreaProjection.names*/get names() {
      return JSArrayOfStringL().of(["Lambert Azimuthal Equal Area", "Lambert_Azimuthal_Equal_Area", "laea"]);
    },
    /*laea.LambertAzimuthalEqualAreaProjection.S_POLE*/get S_POLE() {
      return 1;
    },
    /*laea.LambertAzimuthalEqualAreaProjection.N_POLE*/get N_POLE() {
      return 2;
    },
    /*laea.LambertAzimuthalEqualAreaProjection.EQUIT*/get EQUIT() {
      return 3;
    },
    /*laea.LambertAzimuthalEqualAreaProjection.OBLIQ*/get OBLIQ() {
      return 4;
    }
  }, true);
  dart.defineLazy(laea, {
    /*laea.P00*/get P00() {
      return 0.3333333333333333;
    },
    set P00(_) {},
    /*laea.P01*/get P01() {
      return 0.17222222222222222;
    },
    set P01(_) {},
    /*laea.P02*/get P02() {
      return 0.10257936507936508;
    },
    set P02(_) {},
    /*laea.P10*/get P10() {
      return 0.06388888888888888;
    },
    set P10(_) {},
    /*laea.P11*/get P11() {
      return 0.0664021164021164;
    },
    set P11(_) {},
    /*laea.P20*/get P20() {
      return 0.016415012942191543;
    },
    set P20(_) {}
  }, true);
  var lat0$11 = dart.privateName(krovak, "KrovakProjection.lat0");
  var long0$16 = dart.privateName(krovak, "KrovakProjection.long0");
  var s45 = dart.privateName(krovak, "KrovakProjection.s45");
  var s90 = dart.privateName(krovak, "KrovakProjection.s90");
  var fi0 = dart.privateName(krovak, "KrovakProjection.fi0");
  var e2$ = dart.privateName(krovak, "KrovakProjection.e2");
  var alfa = dart.privateName(krovak, "KrovakProjection.alfa");
  var uq = dart.privateName(krovak, "KrovakProjection.uq");
  var u0 = dart.privateName(krovak, "KrovakProjection.u0");
  var g = dart.privateName(krovak, "KrovakProjection.g");
  var k1 = dart.privateName(krovak, "KrovakProjection.k1");
  var k = dart.privateName(krovak, "KrovakProjection.k");
  var n0 = dart.privateName(krovak, "KrovakProjection.n0");
  var s0 = dart.privateName(krovak, "KrovakProjection.s0");
  var n$ = dart.privateName(krovak, "KrovakProjection.n");
  var ro0 = dart.privateName(krovak, "KrovakProjection.ro0");
  var ad = dart.privateName(krovak, "KrovakProjection.ad");
  var czech = dart.privateName(krovak, "KrovakProjection.czech");
  krovak.KrovakProjection = class KrovakProjection extends projection.Projection {
    get lat0() {
      return this[lat0$11];
    }
    set lat0(value) {
      this[lat0$11] = value;
    }
    get long0() {
      return this[long0$16];
    }
    set long0(value) {
      this[long0$16] = value;
    }
    get s45() {
      return this[s45];
    }
    set s45(value) {
      this[s45] = value;
    }
    get s90() {
      return this[s90];
    }
    set s90(value) {
      this[s90] = value;
    }
    get fi0() {
      return this[fi0];
    }
    set fi0(value) {
      this[fi0] = value;
    }
    get e2() {
      return this[e2$];
    }
    set e2(value) {
      this[e2$] = value;
    }
    get alfa() {
      return this[alfa];
    }
    set alfa(value) {
      this[alfa] = value;
    }
    get uq() {
      return this[uq];
    }
    set uq(value) {
      this[uq] = value;
    }
    get u0() {
      return this[u0];
    }
    set u0(value) {
      this[u0] = value;
    }
    get g() {
      return this[g];
    }
    set g(value) {
      this[g] = value;
    }
    get k1() {
      return this[k1];
    }
    set k1(value) {
      this[k1] = value;
    }
    get k() {
      return this[k];
    }
    set k(value) {
      this[k] = value;
    }
    get n0() {
      return this[n0];
    }
    set n0(value) {
      this[n0] = value;
    }
    get s0() {
      return this[s0];
    }
    set s0(value) {
      this[s0] = value;
    }
    get n() {
      return this[n$];
    }
    set n(value) {
      this[n$] = value;
    }
    get ro0() {
      return this[ro0];
    }
    set ro0(value) {
      this[ro0] = value;
    }
    get ad() {
      return this[ad];
    }
    set ad(value) {
      this[ad] = value;
    }
    get czech() {
      return this[czech];
    }
    set czech(value) {
      this[czech] = value;
    }
    forward(p) {
      let t6, t6$;
      let gfi = null;
      let u = null;
      let deltav = null;
      let s = null;
      let d = null;
      let eps = null;
      let ro = null;
      let lon = p.x;
      let lat = p.y;
      let delta_lon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      gfi = math.pow((1 + dart.notNull(this.e) * math.sin(lat)) / (1 - dart.notNull(this.e) * math.sin(lat)), dart.notNull(this.alfa) * dart.notNull(this.e) / 2);
      u = 2 * (math.atan(dart.notNull(this.k) * math.pow(math.tan(dart.notNull(lat) / 2 + dart.notNull(this.s45)), this.alfa) / dart.notNull(gfi)) - dart.notNull(this.s45));
      deltav = -dart.notNull(delta_lon) * dart.notNull(this.alfa);
      s = math.asin(math.cos(this.ad) * math.sin(u) + math.sin(this.ad) * math.cos(u) * math.cos(deltav));
      d = math.asin(math.cos(u) * math.sin(deltav) / math.cos(s));
      eps = dart.notNull(this.n) * dart.notNull(d);
      ro = dart.notNull(this.ro0) * math.pow(math.tan(dart.notNull(this.s0) / 2 + dart.notNull(this.s45)), this.n) / math.pow(math.tan(dart.notNull(s) / 2 + dart.notNull(this.s45)), this.n);
      p.y = dart.notNull(ro) * math.cos(eps) / 1;
      p.x = dart.notNull(ro) * math.sin(eps) / 1;
      if (this.czech == null || !dart.test(this.czech)) {
        t6 = p;
        t6.y = dart.notNull(t6.y) * -1;
        t6$ = p;
        t6$.x = dart.notNull(t6$.x) * -1;
      }
      return p;
    }
    inverse(p) {
      let t6, t6$;
      let u = null;
      let deltav = null;
      let s = null;
      let d = null;
      let eps = null;
      let ro = null;
      let fi1 = null;
      let ok = null;
      let tmp = p.x;
      p.x = p.y;
      p.y = tmp;
      if (this.czech == null || !dart.test(this.czech)) {
        t6 = p;
        t6.y = dart.notNull(t6.y) * -1;
        t6$ = p;
        t6$.x = dart.notNull(t6$.x) * -1;
      }
      ro = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
      eps = math.atan2(p.y, p.x);
      d = dart.notNull(eps) / math.sin(this.s0);
      s = 2 * (math.atan(math.pow(dart.notNull(this.ro0) / dart.notNull(ro), 1 / dart.notNull(this.n)) * math.tan(dart.notNull(this.s0) / 2 + dart.notNull(this.s45))) - dart.notNull(this.s45));
      u = math.asin(math.cos(this.ad) * math.sin(s) - math.sin(this.ad) * math.cos(s) * math.cos(d));
      deltav = math.asin(math.cos(s) * math.sin(d) / math.cos(u));
      p.x = dart.notNull(this.long0) - dart.notNull(deltav) / dart.notNull(this.alfa);
      fi1 = u;
      ok = 0;
      let iter = 0;
      do {
        p.y = 2 * (math.atan(math.pow(this.k, -1 / dart.notNull(this.alfa)) * math.pow(math.tan(dart.notNull(u) / 2 + dart.notNull(this.s45)), 1 / dart.notNull(this.alfa)) * math.pow((1 + dart.notNull(this.e) * math.sin(fi1)) / (1 - dart.notNull(this.e) * math.sin(fi1)), dart.notNull(this.e) / 2)) - dart.notNull(this.s45));
        if ((dart.notNull(fi1) - dart.notNull(p.y))[$abs]() < 1e-10) {
          ok = 1;
        }
        fi1 = p.y;
        iter = iter + 1;
      } while (dart.equals(ok, 0) && iter < 15);
      if (iter >= 15) {
        return null;
      }
      return p;
    }
  };
  (krovak.KrovakProjection.init = function(params) {
    this[s45] = null;
    this[s90] = null;
    this[fi0] = null;
    this[e2$] = null;
    this[alfa] = null;
    this[uq] = null;
    this[u0] = null;
    this[g] = null;
    this[k1] = null;
    this[k] = null;
    this[n0] = null;
    this[s0] = null;
    this[n$] = null;
    this[ro0] = null;
    this[ad] = null;
    this[lat0$11] = params.lat0;
    this[long0$16] = params.long0;
    this[czech] = boolL().as(params.map[$_get]("czech"));
    krovak.KrovakProjection.__proto__.init.call(this, params);
    this.a = 6377397.155;
    this.es = 0.006674372230614;
    this.e = math.sqrt(this.es);
    this.lat0 == null ? this.lat0 = 0.863937979737193 : null;
    if (this.long0 == null || this.long0[$isNaN]) {
      this.long0 = 0.7417649320975901 - 0.308341501185665;
    }
    this.k0 == null ? this.k0 = 0.9999 : null;
    this.s45 = 0.785398163397448;
    this.s90 = 2 * dart.notNull(this.s45);
    this.fi0 = this.lat0;
    this.e2 = this.es;
    this.e = math.sqrt(this.e2);
    this.alfa = math.sqrt(1 + dart.notNull(this.e2) * math.pow(math.cos(this.fi0), 4) / (1 - dart.notNull(this.e2)));
    this.uq = 1.04216856380474;
    this.u0 = math.asin(math.sin(this.fi0) / dart.notNull(this.alfa));
    this.g = math.pow((1 + dart.notNull(this.e) * math.sin(this.fi0)) / (1 - dart.notNull(this.e) * math.sin(this.fi0)), dart.notNull(this.alfa) * dart.notNull(this.e) / 2);
    this.k = math.tan(dart.notNull(this.u0) / 2 + dart.notNull(this.s45)) / math.pow(math.tan(dart.notNull(this.fi0) / 2 + dart.notNull(this.s45)), this.alfa) * dart.notNull(this.g);
    this.k1 = this.k0;
    this.n0 = dart.notNull(this.a) * math.sqrt(1 - dart.notNull(this.e2)) / (1 - dart.notNull(this.e2) * math.pow(math.sin(this.fi0), 2));
    this.s0 = 1.37008346281555;
    this.n = math.sin(this.s0);
    this.ro0 = dart.notNull(this.k1) * dart.notNull(this.n0) / math.tan(this.s0);
    this.ad = dart.notNull(this.s90) - dart.notNull(this.uq);
  }).prototype = krovak.KrovakProjection.prototype;
  dart.addTypeTests(krovak.KrovakProjection);
  dart.addTypeCaches(krovak.KrovakProjection);
  dart.setMethodSignature(krovak.KrovakProjection, () => ({
    __proto__: dart.getMethods(krovak.KrovakProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(krovak.KrovakProjection, L24);
  dart.setFieldSignature(krovak.KrovakProjection, () => ({
    __proto__: dart.getFields(krovak.KrovakProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    s45: dart.fieldType(dart.legacy(core.double)),
    s90: dart.fieldType(dart.legacy(core.double)),
    fi0: dart.fieldType(dart.legacy(core.double)),
    e2: dart.fieldType(dart.legacy(core.double)),
    alfa: dart.fieldType(dart.legacy(core.double)),
    uq: dart.fieldType(dart.legacy(core.double)),
    u0: dart.fieldType(dart.legacy(core.double)),
    g: dart.fieldType(dart.legacy(core.double)),
    k1: dart.fieldType(dart.legacy(core.double)),
    k: dart.fieldType(dart.legacy(core.double)),
    n0: dart.fieldType(dart.legacy(core.double)),
    s0: dart.fieldType(dart.legacy(core.double)),
    n: dart.fieldType(dart.legacy(core.double)),
    ro0: dart.fieldType(dart.legacy(core.double)),
    ad: dart.fieldType(dart.legacy(core.double)),
    czech: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(krovak.KrovakProjection, {
    /*krovak.KrovakProjection.names*/get names() {
      return JSArrayOfStringL().of(["Krovak", "krovak"]);
    }
  }, true);
  var long0$17 = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.long0");
  var lat0$12 = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.lat0");
  var x0$17 = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.x0");
  var y0$17 = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.y0");
  var lc = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.lc");
  var rs = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.rs");
  var cp = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.cp");
  var n2 = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.n2");
  var xs = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.xs");
  var ys = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.ys");
  var title$1 = dart.privateName(gstmerc, "GaussSchreiberTransverseMercatorProjection.title");
  gstmerc.GaussSchreiberTransverseMercatorProjection = class GaussSchreiberTransverseMercatorProjection extends projection.Projection {
    get long0() {
      return this[long0$17];
    }
    set long0(value) {
      this[long0$17] = value;
    }
    get lat0() {
      return this[lat0$12];
    }
    set lat0(value) {
      this[lat0$12] = value;
    }
    get x0() {
      return this[x0$17];
    }
    set x0(value) {
      this[x0$17] = value;
    }
    get y0() {
      return this[y0$17];
    }
    set y0(value) {
      this[y0$17] = value;
    }
    get lc() {
      return this[lc];
    }
    set lc(value) {
      this[lc] = value;
    }
    get rs() {
      return this[rs];
    }
    set rs(value) {
      this[rs] = value;
    }
    get cp() {
      return this[cp];
    }
    set cp(value) {
      this[cp] = value;
    }
    get n2() {
      return this[n2];
    }
    set n2(value) {
      this[n2] = value;
    }
    get xs() {
      return this[xs];
    }
    set xs(value) {
      this[xs] = value;
    }
    get ys() {
      return this[ys];
    }
    set ys(value) {
      this[ys] = value;
    }
    get title() {
      return this[title$1];
    }
    set title(value) {
      this[title$1] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let L = dart.notNull(this.rs) * (dart.notNull(lon) - dart.notNull(this.lc));
      let Ls = dart.notNull(this.cp) + dart.notNull(this.rs) * dart.notNull(utils.latiso(this.e, lat, math.sin(lat)));
      let lat1 = math.asin(math.sin(L) / dart.notNull(utils.cosh(Ls)));
      let Ls1 = utils.latiso(0.0, lat1, math.sin(lat1));
      p.x = dart.notNull(this.xs) + dart.notNull(this.n2) * dart.notNull(Ls1);
      p.y = dart.notNull(this.ys) + dart.notNull(this.n2) * math.atan(dart.notNull(utils.sinh(Ls)) / math.cos(L));
      return p;
    }
    inverse(p) {
      let x = p.x;
      let y = p.y;
      let L = math.atan(dart.notNull(utils.sinh((dart.notNull(x) - dart.notNull(this.xs)) / dart.notNull(this.n2))) / math.cos((dart.notNull(y) - dart.notNull(this.ys)) / dart.notNull(this.n2)));
      let lat1 = math.asin(math.sin((dart.notNull(y) - dart.notNull(this.ys)) / dart.notNull(this.n2)) / dart.notNull(utils.cosh((dart.notNull(x) - dart.notNull(this.xs)) / dart.notNull(this.n2))));
      let LC = utils.latiso(0.0, lat1, math.sin(lat1));
      p.x = dart.notNull(this.lc) + L / dart.notNull(this.rs);
      p.y = utils.invlatiso(this.e, (dart.notNull(LC) - dart.notNull(this.cp)) / dart.notNull(this.rs));
      return p;
    }
  };
  (gstmerc.GaussSchreiberTransverseMercatorProjection.init = function(params) {
    this[long0$17] = null;
    this[lat0$12] = null;
    this[x0$17] = null;
    this[y0$17] = null;
    this[lc] = null;
    this[rs] = null;
    this[cp] = null;
    this[n2] = null;
    this[xs] = null;
    this[ys] = null;
    this[title$1] = null;
    gstmerc.GaussSchreiberTransverseMercatorProjection.__proto__.init.call(this, params);
    let temp = dart.notNull(this.b) / dart.notNull(this.a);
    this.e = math.sqrt(1 - temp * temp);
    this.lc = this.long0;
    this.rs = math.sqrt(1 + dart.notNull(this.e) * dart.notNull(this.e) * math.pow(math.cos(this.lat0), 4) / (1 - dart.notNull(this.e) * dart.notNull(this.e)));
    let sinz = math.sin(this.lat0);
    let pc = math.asin(sinz / dart.notNull(this.rs));
    let sinzpc = math.sin(pc);
    this.cp = dart.notNull(utils.latiso(0.0, pc, sinzpc)) - dart.notNull(this.rs) * dart.notNull(utils.latiso(this.e, this.lat0, sinz));
    this.n2 = dart.notNull(this.k0) * dart.notNull(this.a) * math.sqrt(1 - dart.notNull(this.e) * dart.notNull(this.e)) / (1 - dart.notNull(this.e) * dart.notNull(this.e) * sinz * sinz);
    this.xs = this.x0;
    this.ys = dart.notNull(this.y0) - dart.notNull(this.n2) * pc;
    if (this.title == null || this.title[$isEmpty]) {
      this.title = "Gauss Schreiber transverse mercator";
    }
  }).prototype = gstmerc.GaussSchreiberTransverseMercatorProjection.prototype;
  dart.addTypeTests(gstmerc.GaussSchreiberTransverseMercatorProjection);
  dart.addTypeCaches(gstmerc.GaussSchreiberTransverseMercatorProjection);
  dart.setMethodSignature(gstmerc.GaussSchreiberTransverseMercatorProjection, () => ({
    __proto__: dart.getMethods(gstmerc.GaussSchreiberTransverseMercatorProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(gstmerc.GaussSchreiberTransverseMercatorProjection, L25);
  dart.setFieldSignature(gstmerc.GaussSchreiberTransverseMercatorProjection, () => ({
    __proto__: dart.getFields(gstmerc.GaussSchreiberTransverseMercatorProjection.__proto__),
    long0: dart.fieldType(dart.legacy(core.double)),
    lat0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    lc: dart.fieldType(dart.legacy(core.double)),
    rs: dart.fieldType(dart.legacy(core.double)),
    cp: dart.fieldType(dart.legacy(core.double)),
    n2: dart.fieldType(dart.legacy(core.double)),
    xs: dart.fieldType(dart.legacy(core.double)),
    ys: dart.fieldType(dart.legacy(core.double)),
    title: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(gstmerc.GaussSchreiberTransverseMercatorProjection, {
    /*gstmerc.GaussSchreiberTransverseMercatorProjection.names*/get names() {
      return JSArrayOfStringL().of(["gstmerg", "gstmerc"]);
    }
  }, true);
  var lat0$13 = dart.privateName(gnom, "GnomicProjection.lat0");
  var long0$18 = dart.privateName(gnom, "GnomicProjection.long0");
  var x0$18 = dart.privateName(gnom, "GnomicProjection.x0");
  var y0$18 = dart.privateName(gnom, "GnomicProjection.y0");
  var sin_p14$ = dart.privateName(gnom, "GnomicProjection.sin_p14");
  var cos_p14$ = dart.privateName(gnom, "GnomicProjection.cos_p14");
  var infinity_dist = dart.privateName(gnom, "GnomicProjection.infinity_dist");
  var rc$ = dart.privateName(gnom, "GnomicProjection.rc");
  var phic0$ = dart.privateName(gnom, "GnomicProjection.phic0");
  gnom.GnomicProjection = class GnomicProjection extends projection.Projection {
    get lat0() {
      return this[lat0$13];
    }
    set lat0(value) {
      this[lat0$13] = value;
    }
    get long0() {
      return this[long0$18];
    }
    set long0(value) {
      this[long0$18] = value;
    }
    get x0() {
      return this[x0$18];
    }
    set x0(value) {
      this[x0$18] = value;
    }
    get y0() {
      return this[y0$18];
    }
    set y0(value) {
      this[y0$18] = value;
    }
    get sin_p14() {
      return this[sin_p14$];
    }
    set sin_p14(value) {
      this[sin_p14$] = value;
    }
    get cos_p14() {
      return this[cos_p14$];
    }
    set cos_p14(value) {
      this[cos_p14$] = value;
    }
    get infinity_dist() {
      return this[infinity_dist];
    }
    set infinity_dist(value) {
      this[infinity_dist] = value;
    }
    get rc() {
      return this[rc$];
    }
    set rc(value) {
      this[rc$] = value;
    }
    get phic0() {
      return this[phic0$];
    }
    set phic0(value) {
      this[phic0$] = value;
    }
    forward(p) {
      let sinphi = null;
      let cosphi = null;
      let dlon = null;
      let coslon = null;
      let ksp = null;
      let g = null;
      let x = null;
      let y = null;
      let lon = p.x;
      let lat = p.y;
      dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      sinphi = math.sin(lat);
      cosphi = math.cos(lat);
      coslon = math.cos(dlon);
      g = dart.notNull(this.sin_p14) * dart.notNull(sinphi) + dart.notNull(this.cos_p14) * dart.notNull(cosphi) * dart.notNull(coslon);
      ksp = 1.0;
      if (dart.notNull(g) > 0 || g[$abs]() <= dart.notNull(values.EPSLN)) {
        x = dart.notNull(this.x0) + dart.notNull(this.a) * dart.notNull(ksp) * dart.notNull(cosphi) * math.sin(dlon) / dart.notNull(g);
        y = dart.notNull(this.y0) + dart.notNull(this.a) * dart.notNull(ksp) * (dart.notNull(this.cos_p14) * dart.notNull(sinphi) - dart.notNull(this.sin_p14) * dart.notNull(cosphi) * dart.notNull(coslon)) / dart.notNull(g);
      } else {
        x = dart.notNull(this.x0) + dart.notNull(this.infinity_dist) * dart.notNull(cosphi) * math.sin(dlon);
        y = dart.notNull(this.y0) + dart.notNull(this.infinity_dist) * (dart.notNull(this.cos_p14) * dart.notNull(sinphi) - dart.notNull(this.sin_p14) * dart.notNull(cosphi) * dart.notNull(coslon));
      }
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let t6, t6$;
      let rh = null;
      let sinc = null;
      let cosc = null;
      let c = null;
      let lon = null;
      let lat = null;
      p.x = (dart.notNull(p.x) - dart.notNull(this.x0)) / dart.notNull(this.a);
      p.y = (dart.notNull(p.y) - dart.notNull(this.y0)) / dart.notNull(this.a);
      t6 = p;
      t6.x = dart.notNull(t6.x) / dart.notNull(this.k0);
      t6$ = p;
      t6$.y = dart.notNull(t6$.y) / dart.notNull(this.k0);
      if (!(rh = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y)))[$isNaN]) {
        c = math.atan2(rh, this.rc);
        sinc = math.sin(c);
        cosc = math.cos(c);
        lat = utils.asinz(dart.notNull(cosc) * dart.notNull(this.sin_p14) + dart.notNull(p.y) * dart.notNull(sinc) * dart.notNull(this.cos_p14) / dart.notNull(rh));
        lon = math.atan2(dart.notNull(p.x) * dart.notNull(sinc), dart.notNull(rh) * dart.notNull(this.cos_p14) * dart.notNull(cosc) - dart.notNull(p.y) * dart.notNull(this.sin_p14) * dart.notNull(sinc));
        lon = utils.adjust_lon(dart.notNull(this.long0) + dart.notNull(lon));
      } else {
        lat = this.phic0;
        lon = 0.0;
      }
      p.x = lon;
      p.y = lat;
      return p;
    }
  };
  (gnom.GnomicProjection.init = function(params) {
    this[sin_p14$] = null;
    this[cos_p14$] = null;
    this[infinity_dist] = null;
    this[rc$] = null;
    this[lat0$13] = params.lat0;
    this[long0$18] = params.long0;
    this[x0$18] = params.x0;
    this[y0$18] = params.y0;
    this[phic0$] = doubleL().as(params.map[$_get]("phic0"));
    gnom.GnomicProjection.__proto__.init.call(this, params);
    this.sin_p14 = math.sin(this.lat0);
    this.cos_p14 = math.cos(this.lat0);
    this.infinity_dist = 1000 * dart.notNull(this.a);
    this.rc = 1.0;
  }).prototype = gnom.GnomicProjection.prototype;
  dart.addTypeTests(gnom.GnomicProjection);
  dart.addTypeCaches(gnom.GnomicProjection);
  dart.setMethodSignature(gnom.GnomicProjection, () => ({
    __proto__: dart.getMethods(gnom.GnomicProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(gnom.GnomicProjection, L26);
  dart.setFieldSignature(gnom.GnomicProjection, () => ({
    __proto__: dart.getFields(gnom.GnomicProjection.__proto__),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    sin_p14: dart.fieldType(dart.legacy(core.double)),
    cos_p14: dart.fieldType(dart.legacy(core.double)),
    infinity_dist: dart.fieldType(dart.legacy(core.double)),
    rc: dart.fieldType(dart.legacy(core.double)),
    phic0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(gnom.GnomicProjection, {
    /*gnom.GnomicProjection.names*/get names() {
      return JSArrayOfStringL().of(["gnom"]);
    }
  }, true);
  var name = dart.privateName(geocent, "GeocentricProjection.name");
  geocent.GeocentricProjection = class GeocentricProjection extends projection.Projection {
    get name() {
      return this[name];
    }
    set name(value) {
      this[name] = value;
    }
    forward(p) {
      let point = datum_utils.geodeticToGeocentric(p, this.es, this.a);
      return point;
    }
    inverse(p) {
      let point = datum_utils.geocentricToGeodetic(p, this.es, this.a, this.b);
      return point;
    }
  };
  (geocent.GeocentricProjection.init = function(params) {
    this[name] = "geocent";
    geocent.GeocentricProjection.__proto__.init.call(this, params);
    ;
  }).prototype = geocent.GeocentricProjection.prototype;
  dart.addTypeTests(geocent.GeocentricProjection);
  dart.addTypeCaches(geocent.GeocentricProjection);
  dart.setMethodSignature(geocent.GeocentricProjection, () => ({
    __proto__: dart.getMethods(geocent.GeocentricProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(geocent.GeocentricProjection, L27);
  dart.setFieldSignature(geocent.GeocentricProjection, () => ({
    __proto__: dart.getFields(geocent.GeocentricProjection.__proto__),
    name: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(geocent.GeocentricProjection, {
    /*geocent.GeocentricProjection.names*/get names() {
      return JSArrayOfStringL().of(["Geocentric", "geocentric", "geocent", "Geocent"]);
    }
  }, true);
  dart.defineLazy(gauss, {
    /*gauss.MAX_ITER*/get MAX_ITER() {
      return 20;
    },
    set MAX_ITER(_) {}
  }, true);
  var e0$ = dart.privateName(eqdc, "EquidistantConicProjection.e0");
  var e1$ = dart.privateName(eqdc, "EquidistantConicProjection.e1");
  var e2$0 = dart.privateName(eqdc, "EquidistantConicProjection.e2");
  var e3$ = dart.privateName(eqdc, "EquidistantConicProjection.e3");
  var long0$19 = dart.privateName(eqdc, "EquidistantConicProjection.long0");
  var x0$19 = dart.privateName(eqdc, "EquidistantConicProjection.x0");
  var y0$19 = dart.privateName(eqdc, "EquidistantConicProjection.y0");
  var ns$ = dart.privateName(eqdc, "EquidistantConicProjection.ns");
  var g$ = dart.privateName(eqdc, "EquidistantConicProjection.g");
  var rh$0 = dart.privateName(eqdc, "EquidistantConicProjection.rh");
  eqdc.EquidistantConicProjection = class EquidistantConicProjection extends projection.Projection {
    get e0() {
      return this[e0$];
    }
    set e0(value) {
      this[e0$] = value;
    }
    get e1() {
      return this[e1$];
    }
    set e1(value) {
      this[e1$] = value;
    }
    get e2() {
      return this[e2$0];
    }
    set e2(value) {
      this[e2$0] = value;
    }
    get e3() {
      return this[e3$];
    }
    set e3(value) {
      this[e3$] = value;
    }
    get long0() {
      return this[long0$19];
    }
    set long0(value) {
      this[long0$19] = value;
    }
    get x0() {
      return this[x0$19];
    }
    set x0(value) {
      this[x0$19] = value;
    }
    get y0() {
      return this[y0$19];
    }
    set y0(value) {
      this[y0$19] = value;
    }
    get ns() {
      return this[ns$];
    }
    set ns(value) {
      this[ns$] = value;
    }
    get g() {
      return this[g$];
    }
    set g(value) {
      this[g$] = value;
    }
    get rh() {
      return this[rh$0];
    }
    set rh(value) {
      this[rh$0] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let rh1 = null;
      if (this.sphere != null && dart.test(this.sphere)) {
        rh1 = dart.notNull(this.a) * (dart.notNull(this.g) - dart.notNull(lat));
      } else {
        let ml = utils.mlfn(this.e0, this.e1, this.e2, this.e3, lat);
        rh1 = dart.notNull(this.a) * (dart.notNull(this.g) - dart.notNull(ml));
      }
      let theta = dart.notNull(this.ns) * dart.notNull(utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0)));
      let x = dart.notNull(this.x0) + dart.notNull(core.num.as(dart.dsend(rh1, '*', [math.sin(theta)])));
      let y = dart.notNull(this.y0) + dart.notNull(this.rh) - dart.notNull(core.num.as(dart.dsend(rh1, '*', [math.cos(theta)])));
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let t6;
      t6 = p;
      t6.x = dart.notNull(t6.x) - dart.notNull(this.x0);
      p.y = dart.notNull(this.rh) - dart.notNull(p.y) + dart.notNull(this.y0);
      let con = null;
      let rh1 = null;
      let lat = null;
      let lon = null;
      if (dart.notNull(this.ns) >= 0) {
        rh1 = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
        con = 1;
      } else {
        rh1 = -math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
        con = -1;
      }
      let theta = 0.0;
      if (!dart.equals(rh1, 0)) {
        theta = math.atan2(core.num.as(dart.dsend(con, '*', [p.x])), core.num.as(dart.dsend(con, '*', [p.y])));
      }
      if (this.sphere != null && dart.test(this.sphere)) {
        lon = utils.adjust_lon(dart.notNull(this.long0) + theta / dart.notNull(this.ns));
        lat = utils.adjust_lat(dart.notNull(this.g) - dart.notNull(core.num.as(dart.dsend(rh1, '/', [this.a]))));
        p.x = doubleL().as(lon);
        p.y = doubleL().as(lat);
        return p;
      } else {
        let ml = dart.notNull(this.g) - dart.notNull(core.num.as(dart.dsend(rh1, '/', [this.a])));
        lat = utils.imlfn(ml, this.e0, this.e1, this.e2, this.e3);
        lon = utils.adjust_lon(dart.notNull(this.long0) + theta / dart.notNull(this.ns));
        p.x = doubleL().as(lon);
        p.y = doubleL().as(lat);
        return p;
      }
    }
  };
  (eqdc.EquidistantConicProjection.init = function(params) {
    let t6;
    this[e0$] = null;
    this[e1$] = null;
    this[e2$0] = null;
    this[e3$] = null;
    this[long0$19] = null;
    this[x0$19] = null;
    this[y0$19] = null;
    this[ns$] = null;
    this[g$] = null;
    this[rh$0] = null;
    eqdc.EquidistantConicProjection.__proto__.init.call(this, params);
    let lat1 = params.lat1;
    let lat2 = params.lat2;
    let lat0 = params.lat0;
    this.long0 = params.long0;
    this.x0 = params.x0;
    this.y0 = params.y0;
    if ((dart.notNull(lat1) + dart.notNull(lat2))[$abs]() < dart.notNull(values.EPSLN)) {
      return;
    }
    lat2 = (t6 = lat2, t6 == null ? lat1 : t6);
    let temp = dart.notNull(this.b) / dart.notNull(this.a);
    let es = 1 - math.pow(temp, 2);
    this.e = math.sqrt(es);
    this.e0 = utils.e0fn(es);
    this.e1 = utils.e1fn(es);
    this.e2 = utils.e2fn(es);
    this.e3 = utils.e3fn(es);
    let sinphi = math.sin(lat1);
    let cosphi = math.cos(lat1);
    let ms1 = utils.msfnz(this.e, sinphi, cosphi);
    let ml1 = utils.mlfn(this.e0, this.e1, this.e2, this.e3, lat1);
    if ((dart.notNull(lat1) - dart.notNull(lat2))[$abs]() < dart.notNull(values.EPSLN)) {
      this.ns = sinphi;
    } else {
      sinphi = math.sin(lat2);
      cosphi = math.cos(lat2);
      let ms2 = utils.msfnz(this.e, sinphi, cosphi);
      let ml2 = utils.mlfn(this.e0, this.e1, this.e2, this.e3, lat2);
      this.ns = (dart.notNull(ms1) - dart.notNull(ms2)) / (dart.notNull(ml2) - dart.notNull(ml1));
    }
    this.g = dart.notNull(ml1) + dart.notNull(ms1) / dart.notNull(this.ns);
    let ml0 = utils.mlfn(this.e0, this.e1, this.e2, this.e3, lat0);
    this.rh = dart.notNull(this.a) * (dart.notNull(this.g) - dart.notNull(ml0));
  }).prototype = eqdc.EquidistantConicProjection.prototype;
  dart.addTypeTests(eqdc.EquidistantConicProjection);
  dart.addTypeCaches(eqdc.EquidistantConicProjection);
  dart.setMethodSignature(eqdc.EquidistantConicProjection, () => ({
    __proto__: dart.getMethods(eqdc.EquidistantConicProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(eqdc.EquidistantConicProjection, L28);
  dart.setFieldSignature(eqdc.EquidistantConicProjection, () => ({
    __proto__: dart.getFields(eqdc.EquidistantConicProjection.__proto__),
    e0: dart.fieldType(dart.legacy(core.double)),
    e1: dart.fieldType(dart.legacy(core.double)),
    e2: dart.fieldType(dart.legacy(core.double)),
    e3: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    ns: dart.fieldType(dart.legacy(core.double)),
    g: dart.fieldType(dart.legacy(core.double)),
    rh: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(eqdc.EquidistantConicProjection, {
    /*eqdc.EquidistantConicProjection.names*/get names() {
      return JSArrayOfStringL().of(["Equidistant_Conic", "eqdc"]);
    }
  }, true);
  var long0$20 = dart.privateName(eqc, "EquidistantCylindricalProjection.long0");
  var x0$20 = dart.privateName(eqc, "EquidistantCylindricalProjection.x0");
  var y0$20 = dart.privateName(eqc, "EquidistantCylindricalProjection.y0");
  var lat_ts$0 = dart.privateName(eqc, "EquidistantCylindricalProjection.lat_ts");
  var lat0$14 = dart.privateName(eqc, "EquidistantCylindricalProjection.lat0");
  var rc$0 = dart.privateName(eqc, "EquidistantCylindricalProjection.rc");
  eqc.EquidistantCylindricalProjection = class EquidistantCylindricalProjection extends projection.Projection {
    get long0() {
      return this[long0$20];
    }
    set long0(value) {
      this[long0$20] = value;
    }
    get x0() {
      return this[x0$20];
    }
    set x0(value) {
      this[x0$20] = value;
    }
    get y0() {
      return this[y0$20];
    }
    set y0(value) {
      this[y0$20] = value;
    }
    get lat_ts() {
      return this[lat_ts$0];
    }
    set lat_ts(value) {
      this[lat_ts$0] = value;
    }
    get lat0() {
      return this[lat0$14];
    }
    set lat0(value) {
      this[lat0$14] = value;
    }
    get rc() {
      return this[rc$0];
    }
    set rc(value) {
      this[rc$0] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      let dlat = utils.adjust_lat(dart.notNull(lat) - dart.notNull(this.lat0));
      p.x = dart.notNull(this.x0) + dart.notNull(this.a) * dart.notNull(dlon) * dart.notNull(this.rc);
      p.y = dart.notNull(this.y0) + dart.notNull(this.a) * dart.notNull(dlat);
      return p;
    }
    inverse(p) {
      let x = p.x;
      let y = p.y;
      p.x = utils.adjust_lon(dart.notNull(this.long0) + (dart.notNull(x) - dart.notNull(this.x0)) / (dart.notNull(this.a) * dart.notNull(this.rc)));
      p.y = utils.adjust_lat(dart.notNull(this.lat0) + (dart.notNull(y) - dart.notNull(this.y0)) / dart.notNull(this.a));
      return p;
    }
  };
  (eqc.EquidistantCylindricalProjection.init = function(params) {
    let t6, t6$, t6$0, t6$1;
    this[long0$20] = null;
    this[x0$20] = null;
    this[y0$20] = null;
    this[lat_ts$0] = null;
    this[lat0$14] = null;
    this[rc$0] = null;
    eqc.EquidistantCylindricalProjection.__proto__.init.call(this, params);
    this.long0 = params.long0;
    this.x0 = params.x0;
    this.y0 = params.y0;
    this.lat_ts = params.lat_ts;
    this.lat0 = params.lat0;
    this.x0 = (t6 = this.x0, t6 == null ? 0.0 : t6);
    this.y0 = (t6$ = this.y0, t6$ == null ? 0.0 : t6$);
    this.lat0 = (t6$0 = this.lat0, t6$0 == null ? 0.0 : t6$0);
    if (this.long0 == null || this.long0[$isNaN]) {
      this.long0 = 0.0;
    }
    this.lat_ts = (t6$1 = this.lat_ts, t6$1 == null ? 0.0 : t6$1);
    this.rc = math.cos(this.lat_ts);
  }).prototype = eqc.EquidistantCylindricalProjection.prototype;
  dart.addTypeTests(eqc.EquidistantCylindricalProjection);
  dart.addTypeCaches(eqc.EquidistantCylindricalProjection);
  dart.setMethodSignature(eqc.EquidistantCylindricalProjection, () => ({
    __proto__: dart.getMethods(eqc.EquidistantCylindricalProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(eqc.EquidistantCylindricalProjection, L29);
  dart.setFieldSignature(eqc.EquidistantCylindricalProjection, () => ({
    __proto__: dart.getFields(eqc.EquidistantCylindricalProjection.__proto__),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    lat_ts: dart.fieldType(dart.legacy(core.double)),
    lat0: dart.fieldType(dart.legacy(core.double)),
    rc: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(eqc.EquidistantCylindricalProjection, {
    /*eqc.EquidistantCylindricalProjection.names*/get names() {
      return JSArrayOfStringL().of(["Equirectangular", "Equidistant_Cylindrical", "eqc"]);
    }
  }, true);
  var long0$21 = dart.privateName(cea, "CentralCylindricalProjection.long0");
  var x0$21 = dart.privateName(cea, "CentralCylindricalProjection.x0");
  var y0$21 = dart.privateName(cea, "CentralCylindricalProjection.y0");
  var lat_ts$1 = dart.privateName(cea, "CentralCylindricalProjection.lat_ts");
  cea.CentralCylindricalProjection = class CentralCylindricalProjection extends projection.Projection {
    get long0() {
      return this[long0$21];
    }
    set long0(value) {
      this[long0$21] = value;
    }
    get x0() {
      return this[x0$21];
    }
    set x0(value) {
      this[x0$21] = value;
    }
    get y0() {
      return this[y0$21];
    }
    set y0(value) {
      this[y0$21] = value;
    }
    get lat_ts() {
      return this[lat_ts$1];
    }
    set lat_ts(value) {
      this[lat_ts$1] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let x = null;
      let y = null;
      let dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      if (this.sphere != null && dart.test(this.sphere)) {
        x = dart.notNull(this.x0) + dart.notNull(this.a) * dart.notNull(dlon) * math.cos(this.lat_ts);
        y = dart.notNull(this.y0) + dart.notNull(this.a) * math.sin(lat) / math.cos(this.lat_ts);
      } else {
        let qs = utils.qsfnz(this.e, math.sin(lat));
        x = dart.notNull(this.x0) + dart.notNull(this.a) * dart.notNull(this.k0) * dart.notNull(dlon);
        y = dart.notNull(this.y0) + dart.notNull(this.a) * dart.notNull(qs) * 0.5 / dart.notNull(this.k0);
      }
      p.x = doubleL().as(x);
      p.y = doubleL().as(y);
      return p;
    }
    inverse(p) {
      let t6, t6$;
      t6 = p;
      t6.x = dart.notNull(t6.x) - dart.notNull(this.x0);
      t6$ = p;
      t6$.y = dart.notNull(t6$.y) - dart.notNull(this.y0);
      let lon = null;
      let lat = null;
      if (this.sphere != null && dart.test(this.sphere)) {
        lon = utils.adjust_lon(dart.notNull(this.long0) + dart.notNull(p.x) / dart.notNull(this.a) / math.cos(this.lat_ts));
        lat = math.asin(dart.notNull(p.y) / dart.notNull(this.a) * math.cos(this.lat_ts));
      } else {
        lat = utils.iqsfnz(this.e, 2 * dart.notNull(p.y) * dart.notNull(this.k0) / dart.notNull(this.a));
        lon = utils.adjust_lon(dart.notNull(this.long0) + dart.notNull(p.x) / (dart.notNull(this.a) * dart.notNull(this.k0)));
      }
      p.x = doubleL().as(lon);
      p.y = doubleL().as(lat);
      return p;
    }
  };
  (cea.CentralCylindricalProjection.init = function(params) {
    this[long0$21] = null;
    this[x0$21] = null;
    this[y0$21] = null;
    this[lat_ts$1] = null;
    cea.CentralCylindricalProjection.__proto__.init.call(this, params);
    this.long0 = params.long0;
    this.x0 = params.x0;
    this.y0 = params.y0;
    this.lat_ts = params.lat_ts;
    if (this.sphere == null || !dart.test(this.sphere)) {
      this.k0 = utils.msfnz(this.e, math.sin(this.lat_ts), math.cos(this.lat_ts));
    }
  }).prototype = cea.CentralCylindricalProjection.prototype;
  dart.addTypeTests(cea.CentralCylindricalProjection);
  dart.addTypeCaches(cea.CentralCylindricalProjection);
  dart.setMethodSignature(cea.CentralCylindricalProjection, () => ({
    __proto__: dart.getMethods(cea.CentralCylindricalProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(cea.CentralCylindricalProjection, L30);
  dart.setFieldSignature(cea.CentralCylindricalProjection, () => ({
    __proto__: dart.getFields(cea.CentralCylindricalProjection.__proto__),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double)),
    lat_ts: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(cea.CentralCylindricalProjection, {
    /*cea.CentralCylindricalProjection.names*/get names() {
      return JSArrayOfStringL().of(["cea"]);
    }
  }, true);
  var e0$0 = dart.privateName(cass, "CassiniProjection.e0");
  var e1$0 = dart.privateName(cass, "CassiniProjection.e1");
  var e2$1 = dart.privateName(cass, "CassiniProjection.e2");
  var e3$0 = dart.privateName(cass, "CassiniProjection.e3");
  var ml0$0 = dart.privateName(cass, "CassiniProjection.ml0");
  var lat0$15 = dart.privateName(cass, "CassiniProjection.lat0");
  var long0$22 = dart.privateName(cass, "CassiniProjection.long0");
  var x0$22 = dart.privateName(cass, "CassiniProjection.x0");
  var y0$22 = dart.privateName(cass, "CassiniProjection.y0");
  cass.CassiniProjection = class CassiniProjection extends projection.Projection {
    get e0() {
      return this[e0$0];
    }
    set e0(value) {
      this[e0$0] = value;
    }
    get e1() {
      return this[e1$0];
    }
    set e1(value) {
      this[e1$0] = value;
    }
    get e2() {
      return this[e2$1];
    }
    set e2(value) {
      this[e2$1] = value;
    }
    get e3() {
      return this[e3$0];
    }
    set e3(value) {
      this[e3$0] = value;
    }
    get ml0() {
      return this[ml0$0];
    }
    set ml0(value) {
      this[ml0$0] = value;
    }
    get lat0() {
      return this[lat0$15];
    }
    set lat0(value) {
      this[lat0$15] = value;
    }
    get long0() {
      return this[long0$22];
    }
    set long0(value) {
      this[long0$22] = value;
    }
    get x0() {
      return this[x0$22];
    }
    set x0(value) {
      this[x0$22] = value;
    }
    get y0() {
      return this[y0$22];
    }
    set y0(value) {
      this[y0$22] = value;
    }
    forward(p) {
      let x = null;
      let y = null;
      let lam = p.x;
      let phi = p.y;
      lam = utils.adjust_lon(dart.notNull(lam) - dart.notNull(this.long0));
      if (this.sphere != null && dart.test(this.sphere)) {
        x = dart.notNull(this.a) * math.asin(math.cos(phi) * math.sin(lam));
        y = dart.notNull(this.a) * (math.atan2(math.tan(phi), math.cos(lam)) - dart.notNull(this.lat0));
      } else {
        let sinphi = math.sin(phi);
        let cosphi = math.cos(phi);
        let nl = utils.gN(this.a, this.e, sinphi);
        let tl = math.tan(phi) * math.tan(phi);
        let al = dart.notNull(lam) * math.cos(phi);
        let asq = al * al;
        let cl = dart.notNull(this.es) * cosphi * cosphi / (1 - dart.notNull(this.es));
        let ml = dart.notNull(this.a) * dart.notNull(utils.mlfn(this.e0, this.e1, this.e2, this.e3, phi));
        x = dart.notNull(nl) * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
        y = ml - dart.notNull(this.ml0) + dart.notNull(nl) * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);
      }
      p.x = doubleL().as(dart.dsend(x, '+', [this.x0]));
      p.y = doubleL().as(dart.dsend(y, '+', [this.y0]));
      return p;
    }
    inverse(p) {
      let t6, t6$, t6$0;
      t6 = p;
      t6.x = dart.notNull(t6.x) - dart.notNull(this.x0);
      t6$ = p;
      t6$.y = dart.notNull(t6$.y) - dart.notNull(this.y0);
      let x = dart.notNull(p.x) / dart.notNull(this.a);
      let y = dart.notNull(p.y) / dart.notNull(this.a);
      let phi = null;
      let lam = null;
      if (this.sphere != null && dart.test(this.sphere)) {
        let dd = y + dart.notNull(this.lat0);
        phi = math.asin(math.sin(dd) * math.cos(x));
        lam = math.atan2(math.tan(x), math.cos(dd));
      } else {
        let ml1 = dart.notNull(this.ml0) / dart.notNull(this.a) + y;
        let phi1 = utils.imlfn(ml1, this.e0, this.e1, this.e2, this.e3);
        if ((phi1[$abs]() - dart.notNull(values.HALF_PI))[$abs]() <= dart.notNull(values.EPSLN)) {
          p.x = this.long0;
          p.y = values.HALF_PI;
          if (y < 0) {
            t6$0 = p;
            t6$0.y = dart.notNull(t6$0.y) * -1;
          }
          return p;
        }
        let nl1 = utils.gN(this.a, this.e, math.sin(phi1));
        let rl1 = dart.notNull(nl1) * dart.notNull(nl1) * dart.notNull(nl1) / dart.notNull(this.a) / dart.notNull(this.a) * (1 - dart.notNull(this.es));
        let tl1 = math.pow(math.tan(phi1), 2);
        let dl = x * dart.notNull(this.a) / dart.notNull(nl1);
        let dsq = dl * dl;
        phi = dart.notNull(phi1) - dart.notNull(nl1) * math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
        lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / math.cos(phi1);
      }
      p.x = utils.adjust_lon(doubleL().as(dart.dsend(lam, '+', [this.long0])));
      p.y = utils.adjust_lat(doubleL().as(phi));
      return p;
    }
  };
  (cass.CassiniProjection.init = function(params) {
    this[e0$0] = null;
    this[e1$0] = null;
    this[e2$1] = null;
    this[e3$0] = null;
    this[ml0$0] = null;
    this[lat0$15] = null;
    this[long0$22] = null;
    this[x0$22] = null;
    this[y0$22] = null;
    cass.CassiniProjection.__proto__.init.call(this, params);
    this.lat0 = params.lat0;
    this.long0 = params.long0;
    this.x0 = params.x0;
    this.y0 = params.y0;
    if (this.sphere == null || this.sphere != null && !dart.test(this.sphere)) {
      this.e0 = utils.e0fn(this.es);
      this.e1 = utils.e1fn(this.es);
      this.e2 = utils.e2fn(this.es);
      this.e3 = utils.e3fn(this.es);
      this.ml0 = dart.notNull(this.a) * dart.notNull(utils.mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0));
    }
  }).prototype = cass.CassiniProjection.prototype;
  dart.addTypeTests(cass.CassiniProjection);
  dart.addTypeCaches(cass.CassiniProjection);
  dart.setMethodSignature(cass.CassiniProjection, () => ({
    __proto__: dart.getMethods(cass.CassiniProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(cass.CassiniProjection, L31);
  dart.setFieldSignature(cass.CassiniProjection, () => ({
    __proto__: dart.getFields(cass.CassiniProjection.__proto__),
    e0: dart.fieldType(dart.legacy(core.double)),
    e1: dart.fieldType(dart.legacy(core.double)),
    e2: dart.fieldType(dart.legacy(core.double)),
    e3: dart.fieldType(dart.legacy(core.double)),
    ml0: dart.fieldType(dart.legacy(core.double)),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(cass.CassiniProjection, {
    /*cass.CassiniProjection.names*/get names() {
      return JSArrayOfStringL().of(["Cassini", "Cassini_Soldner", "cass"]);
    }
  }, true);
  var sin_p12 = dart.privateName(aeqd, "AzimuthalEquidistantProjection.sin_p12");
  var cos_p12 = dart.privateName(aeqd, "AzimuthalEquidistantProjection.cos_p12");
  var lat0$16 = dart.privateName(aeqd, "AzimuthalEquidistantProjection.lat0");
  var long0$23 = dart.privateName(aeqd, "AzimuthalEquidistantProjection.long0");
  var x0$23 = dart.privateName(aeqd, "AzimuthalEquidistantProjection.x0");
  var y0$23 = dart.privateName(aeqd, "AzimuthalEquidistantProjection.y0");
  aeqd.AzimuthalEquidistantProjection = class AzimuthalEquidistantProjection extends projection.Projection {
    get sin_p12() {
      return this[sin_p12];
    }
    set sin_p12(value) {
      this[sin_p12] = value;
    }
    get cos_p12() {
      return this[cos_p12];
    }
    set cos_p12(value) {
      this[cos_p12] = value;
    }
    get lat0() {
      return this[lat0$16];
    }
    set lat0(value) {
      this[lat0$16] = value;
    }
    get long0() {
      return this[long0$23];
    }
    set long0(value) {
      this[long0$23] = value;
    }
    get x0() {
      return this[x0$23];
    }
    set x0(value) {
      this[x0$23] = value;
    }
    get y0() {
      return this[y0$23];
    }
    set y0(value) {
      this[y0$23] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let sinphi = math.sin(p.y);
      let cosphi = math.cos(p.y);
      let dlon = utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0));
      let e0 = null;
      let e1 = null;
      let e2 = null;
      let e3 = null;
      let Mlp = null;
      let Ml = null;
      let tanphi = null;
      let Nl1 = null;
      let Nl = null;
      let psi = null;
      let Az = null;
      let G = null;
      let H = null;
      let GH = null;
      let Hs = null;
      let c = null;
      let kp = null;
      let cos_c = null;
      let s = null;
      let s2 = null;
      let s3 = null;
      let s4 = null;
      let s5 = null;
      if (this.sphere != null && dart.test(this.sphere)) {
        if ((dart.notNull(this.sin_p12) - 1)[$abs]() <= dart.notNull(values.EPSLN)) {
          p.x = dart.notNull(this.x0) + dart.notNull(this.a) * (dart.notNull(values.HALF_PI) - dart.notNull(lat)) * math.sin(dlon);
          p.y = dart.notNull(this.y0) - dart.notNull(this.a) * (dart.notNull(values.HALF_PI) - dart.notNull(lat)) * math.cos(dlon);
          return p;
        } else if ((dart.notNull(this.sin_p12) + 1)[$abs]() <= dart.notNull(values.EPSLN)) {
          p.x = dart.notNull(this.x0) + dart.notNull(this.a) * (dart.notNull(values.HALF_PI) + dart.notNull(lat)) * math.sin(dlon);
          p.y = dart.notNull(this.y0) + dart.notNull(this.a) * (dart.notNull(values.HALF_PI) + dart.notNull(lat)) * math.cos(dlon);
          return p;
        } else {
          cos_c = dart.notNull(this.sin_p12) * sinphi + dart.notNull(this.cos_p12) * cosphi * math.cos(dlon);
          c = math.acos(core.num.as(cos_c));
          kp = dart.dsend(c, '/', [math.sin(core.num.as(c))]);
          p.x = dart.notNull(this.x0) + dart.notNull(this.a) * dart.notNull(core.num.as(kp)) * cosphi * math.sin(dlon);
          p.y = dart.notNull(this.y0) + dart.notNull(this.a) * dart.notNull(core.num.as(kp)) * (dart.notNull(this.cos_p12) * sinphi - dart.notNull(this.sin_p12) * cosphi * math.cos(dlon));
          return p;
        }
      } else {
        e0 = utils.e0fn(this.es);
        e1 = utils.e1fn(this.es);
        e2 = utils.e2fn(this.es);
        e3 = utils.e3fn(this.es);
        if ((dart.notNull(this.sin_p12) - 1)[$abs]() <= dart.notNull(values.EPSLN)) {
          Mlp = dart.notNull(this.a) * dart.notNull(utils.mlfn(doubleL().as(e0), doubleL().as(e1), doubleL().as(e2), doubleL().as(e3), values.HALF_PI));
          Ml = dart.notNull(this.a) * dart.notNull(utils.mlfn(doubleL().as(e0), doubleL().as(e1), doubleL().as(e2), doubleL().as(e3), lat));
          p.x = dart.notNull(this.x0) + dart.notNull(core.num.as(dart.dsend(dart.dsend(Mlp, '-', [Ml]), '*', [math.sin(dlon)])));
          p.y = dart.notNull(this.y0) - dart.notNull(core.num.as(dart.dsend(dart.dsend(Mlp, '-', [Ml]), '*', [math.cos(dlon)])));
          return p;
        } else if ((dart.notNull(this.sin_p12) + 1)[$abs]() <= dart.notNull(values.EPSLN)) {
          Mlp = dart.notNull(this.a) * dart.notNull(utils.mlfn(doubleL().as(e0), doubleL().as(e1), doubleL().as(e2), doubleL().as(e3), values.HALF_PI));
          Ml = dart.notNull(this.a) * dart.notNull(utils.mlfn(doubleL().as(e0), doubleL().as(e1), doubleL().as(e2), doubleL().as(e3), lat));
          p.x = dart.notNull(this.x0) + dart.notNull(core.num.as(dart.dsend(dart.dsend(Mlp, '+', [Ml]), '*', [math.sin(dlon)])));
          p.y = dart.notNull(this.y0) + dart.notNull(core.num.as(dart.dsend(dart.dsend(Mlp, '+', [Ml]), '*', [math.cos(dlon)])));
          return p;
        } else {
          tanphi = sinphi / cosphi;
          Nl1 = utils.gN(this.a, this.e, this.sin_p12);
          Nl = utils.gN(this.a, this.e, sinphi);
          psi = math.atan((1 - dart.notNull(this.es)) * dart.notNull(core.num.as(tanphi)) + dart.notNull(this.es) * dart.notNull(core.num.as(Nl1)) * dart.notNull(this.sin_p12) / dart.notNull(core.num.as(dart.dsend(Nl, '*', [cosphi]))));
          Az = math.atan2(math.sin(dlon), dart.notNull(this.cos_p12) * math.tan(core.num.as(psi)) - dart.notNull(this.sin_p12) * math.cos(dlon));
          if (dart.equals(Az, 0)) {
            s = math.asin(dart.notNull(this.cos_p12) * math.sin(core.num.as(psi)) - dart.notNull(this.sin_p12) * math.cos(core.num.as(psi)));
          } else if (dart.dtest(dart.dsend(dart.dsend(dart.dsend(dart.dsend(Az, 'abs', []), '-', [3.141592653589793]), 'abs', []), '<=', [values.EPSLN]))) {
            s = -math.asin(dart.notNull(this.cos_p12) * math.sin(core.num.as(psi)) - dart.notNull(this.sin_p12) * math.cos(core.num.as(psi)));
          } else {
            s = math.asin(math.sin(dlon) * math.cos(core.num.as(psi)) / math.sin(core.num.as(Az)));
          }
          G = dart.notNull(this.e) * dart.notNull(this.sin_p12) / math.sqrt(1 - dart.notNull(this.es));
          H = dart.notNull(this.e) * dart.notNull(this.cos_p12) * math.cos(core.num.as(Az)) / math.sqrt(1 - dart.notNull(this.es));
          GH = dart.dsend(G, '*', [H]);
          Hs = dart.dsend(H, '*', [H]);
          s2 = dart.dsend(s, '*', [s]);
          s3 = dart.dsend(s2, '*', [s]);
          s4 = dart.dsend(s3, '*', [s]);
          s5 = dart.dsend(s4, '*', [s]);
          c = dart.dsend(dart.dsend(Nl1, '*', [s]), '*', [1 - dart.notNull(core.num.as(dart.dsend(dart.dsend(dart.dsend(s2, '*', [Hs]), '*', [1 - dart.notNull(core.num.as(Hs))]), '/', [6]))) + dart.notNull(core.num.as(dart.dsend(dart.dsend(dart.dsend(s3, '/', [8]), '*', [GH]), '*', [1 - 2 * dart.notNull(core.num.as(Hs))]))) + dart.notNull(core.num.as(dart.dsend(dart.dsend(s4, '/', [120]), '*', [dart.dsend(dart.dsend(Hs, '*', [4 - 7 * dart.notNull(core.num.as(Hs))]), '-', [3 * dart.notNull(core.num.as(G)) * dart.notNull(core.num.as(G)) * (1 - 7 * dart.notNull(core.num.as(Hs)))])]))) - dart.notNull(core.num.as(dart.dsend(dart.dsend(s5, '/', [48]), '*', [GH])))]);
          p.x = dart.notNull(this.x0) + dart.notNull(core.num.as(dart.dsend(c, '*', [math.sin(core.num.as(Az))])));
          p.y = dart.notNull(this.y0) + dart.notNull(core.num.as(dart.dsend(c, '*', [math.cos(core.num.as(Az))])));
          return p;
        }
      }
    }
    inverse(p) {
      let t6, t6$;
      t6 = p;
      t6.x = dart.notNull(t6.x) - dart.notNull(this.x0);
      t6$ = p;
      t6$.y = dart.notNull(t6$.y) - dart.notNull(this.y0);
      let rh = null;
      let z = null;
      let sinz = null;
      let cosz = null;
      let lon = null;
      let lat = null;
      let con = null;
      let e0 = null;
      let e1 = null;
      let e2 = null;
      let e3 = null;
      let Mlp = null;
      let M = null;
      let N1 = null;
      let psi = null;
      let Az = null;
      let cosAz = null;
      let tmp = null;
      let A = null;
      let B = null;
      let D = null;
      let Ee = null;
      let F = null;
      if (this.sphere != null && dart.test(this.sphere)) {
        rh = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
        if (dart.dtest(dart.dsend(rh, '>', [2 * dart.notNull(values.HALF_PI) * dart.notNull(this.a)]))) {
          return p;
        }
        z = dart.dsend(rh, '/', [this.a]);
        sinz = math.sin(core.num.as(z));
        cosz = math.cos(core.num.as(z));
        lon = this.long0;
        if (dart.dtest(dart.dsend(dart.dsend(rh, 'abs', []), '<=', [values.EPSLN]))) {
          lat = this.lat0;
        } else {
          lat = utils.asinz(doubleL().as(dart.dsend(dart.dsend(cosz, '*', [this.sin_p12]), '+', [dart.notNull(p.y) * dart.notNull(core.num.as(sinz)) * dart.notNull(this.cos_p12) / dart.notNull(core.num.as(rh))])));
          con = this.lat0[$abs]() - dart.notNull(values.HALF_PI);
          if (dart.dtest(dart.dsend(dart.dsend(con, 'abs', []), '<=', [values.EPSLN]))) {
            if (dart.notNull(this.lat0) >= 0) {
              lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(p.x, -dart.notNull(p.y)));
            } else {
              lon = utils.adjust_lon(dart.notNull(this.long0) - math.atan2(-dart.notNull(p.x), p.y));
            }
          } else {
            lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(dart.notNull(p.x) * dart.notNull(core.num.as(sinz)), core.num.as(dart.dsend(dart.dsend(dart.dsend(rh, '*', [this.cos_p12]), '*', [cosz]), '-', [dart.notNull(p.y) * dart.notNull(this.sin_p12) * dart.notNull(core.num.as(sinz))]))));
          }
        }
        p.x = doubleL().as(lon);
        p.y = doubleL().as(lat);
        return p;
      } else {
        e0 = utils.e0fn(this.es);
        e1 = utils.e1fn(this.es);
        e2 = utils.e2fn(this.es);
        e3 = utils.e3fn(this.es);
        if ((dart.notNull(this.sin_p12) - 1)[$abs]() <= dart.notNull(values.EPSLN)) {
          Mlp = dart.notNull(this.a) * dart.notNull(utils.mlfn(doubleL().as(e0), doubleL().as(e1), doubleL().as(e2), doubleL().as(e3), values.HALF_PI));
          rh = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
          M = dart.dsend(Mlp, '-', [rh]);
          lat = utils.imlfn(doubleL().as(dart.dsend(M, '/', [this.a])), doubleL().as(e0), doubleL().as(e1), doubleL().as(e2), doubleL().as(e3));
          lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(p.x, -1 * dart.notNull(p.y)));
          p.x = doubleL().as(lon);
          p.y = doubleL().as(lat);
          return p;
        } else if ((dart.notNull(this.sin_p12) + 1)[$abs]() <= dart.notNull(values.EPSLN)) {
          Mlp = dart.notNull(this.a) * dart.notNull(utils.mlfn(doubleL().as(e0), doubleL().as(e1), doubleL().as(e2), doubleL().as(e3), values.HALF_PI));
          rh = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
          M = dart.dsend(rh, '-', [Mlp]);
          lat = utils.imlfn(doubleL().as(dart.dsend(M, '/', [this.a])), doubleL().as(e0), doubleL().as(e1), doubleL().as(e2), doubleL().as(e3));
          lon = utils.adjust_lon(dart.notNull(this.long0) + math.atan2(p.x, p.y));
          p.x = doubleL().as(lon);
          p.y = doubleL().as(lat);
          return p;
        } else {
          rh = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
          Az = math.atan2(p.x, p.y);
          N1 = utils.gN(this.a, this.e, this.sin_p12);
          cosAz = math.cos(core.num.as(Az));
          tmp = dart.notNull(this.e) * dart.notNull(this.cos_p12) * dart.notNull(core.num.as(cosAz));
          A = dart.dsend(dart.dsend(dart.dsend(tmp, '_negate', []), '*', [tmp]), '/', [1 - dart.notNull(this.es)]);
          B = 3 * dart.notNull(this.es) * (1 - dart.notNull(core.num.as(A))) * dart.notNull(this.sin_p12) * dart.notNull(this.cos_p12) * dart.notNull(core.num.as(cosAz)) / (1 - dart.notNull(this.es));
          D = dart.dsend(rh, '/', [N1]);
          Ee = dart.dsend(dart.dsend(D, '-', [dart.dsend(dart.dsend(dart.dsend(A, '*', [1 + dart.notNull(core.num.as(A))]), '*', [math.pow(core.num.as(D), 3)]), '/', [6])]), '-', [dart.dsend(dart.dsend(dart.dsend(B, '*', [1 + 3 * dart.notNull(core.num.as(A))]), '*', [math.pow(core.num.as(D), 4)]), '/', [24])]);
          F = 1 - dart.notNull(core.num.as(dart.dsend(dart.dsend(dart.dsend(A, '*', [Ee]), '*', [Ee]), '/', [2]))) - dart.notNull(core.num.as(dart.dsend(dart.dsend(dart.dsend(dart.dsend(D, '*', [Ee]), '*', [Ee]), '*', [Ee]), '/', [6])));
          psi = math.asin(dart.notNull(this.sin_p12) * math.cos(core.num.as(Ee)) + dart.notNull(this.cos_p12) * math.sin(core.num.as(Ee)) * dart.notNull(core.num.as(cosAz)));
          lon = utils.adjust_lon(dart.notNull(this.long0) + math.asin(math.sin(core.num.as(Az)) * math.sin(core.num.as(Ee)) / math.cos(core.num.as(psi))));
          lat = math.atan((1 - dart.notNull(this.es) * dart.notNull(core.num.as(F)) * dart.notNull(this.sin_p12) / math.sin(core.num.as(psi))) * math.tan(core.num.as(psi)) / (1 - dart.notNull(this.es)));
          p.x = doubleL().as(lon);
          p.y = doubleL().as(lat);
          return p;
        }
      }
    }
  };
  (aeqd.AzimuthalEquidistantProjection.init = function(params) {
    this[sin_p12] = null;
    this[cos_p12] = null;
    this[lat0$16] = null;
    this[long0$23] = null;
    this[x0$23] = null;
    this[y0$23] = null;
    aeqd.AzimuthalEquidistantProjection.__proto__.init.call(this, params);
    this.lat0 = params.lat0;
    this.long0 = params.long0;
    this.x0 = params.x0;
    this.y0 = params.y0;
    this.sin_p12 = math.sin(this.lat0);
    this.cos_p12 = math.cos(this.lat0);
  }).prototype = aeqd.AzimuthalEquidistantProjection.prototype;
  dart.addTypeTests(aeqd.AzimuthalEquidistantProjection);
  dart.addTypeCaches(aeqd.AzimuthalEquidistantProjection);
  dart.setMethodSignature(aeqd.AzimuthalEquidistantProjection, () => ({
    __proto__: dart.getMethods(aeqd.AzimuthalEquidistantProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)])
  }));
  dart.setLibraryUri(aeqd.AzimuthalEquidistantProjection, L32);
  dart.setFieldSignature(aeqd.AzimuthalEquidistantProjection, () => ({
    __proto__: dart.getFields(aeqd.AzimuthalEquidistantProjection.__proto__),
    sin_p12: dart.fieldType(dart.legacy(core.double)),
    cos_p12: dart.fieldType(dart.legacy(core.double)),
    lat0: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(aeqd.AzimuthalEquidistantProjection, {
    /*aeqd.AzimuthalEquidistantProjection.names*/get names() {
      return JSArrayOfStringL().of(["Azimuthal_Equidistant", "aeqd"]);
    }
  }, true);
  var _phi1z = dart.privateName(aea, "_phi1z");
  var e3$1 = dart.privateName(aea, "AlbersProjection.e3");
  var ns0 = dart.privateName(aea, "AlbersProjection.ns0");
  var c = dart.privateName(aea, "AlbersProjection.c");
  var rh$1 = dart.privateName(aea, "AlbersProjection.rh");
  var long0$24 = dart.privateName(aea, "AlbersProjection.long0");
  var x0$24 = dart.privateName(aea, "AlbersProjection.x0");
  var y0$24 = dart.privateName(aea, "AlbersProjection.y0");
  aea.AlbersProjection = class AlbersProjection extends projection.Projection {
    get e3() {
      return this[e3$1];
    }
    set e3(value) {
      this[e3$1] = value;
    }
    get ns0() {
      return this[ns0];
    }
    set ns0(value) {
      this[ns0] = value;
    }
    get c() {
      return this[c];
    }
    set c(value) {
      this[c] = value;
    }
    get rh() {
      return this[rh$1];
    }
    set rh(value) {
      this[rh$1] = value;
    }
    get long0() {
      return this[long0$24];
    }
    set long0(value) {
      this[long0$24] = value;
    }
    get x0() {
      return this[x0$24];
    }
    set x0(value) {
      this[x0$24] = value;
    }
    get y0() {
      return this[y0$24];
    }
    set y0(value) {
      this[y0$24] = value;
    }
    forward(p) {
      let lon = p.x;
      let lat = p.y;
      let sin_phi = math.sin(lat);
      let qs = utils.qsfnz(this.e3, sin_phi);
      let rh1 = dart.notNull(this.a) * math.sqrt(dart.notNull(this.c) - dart.notNull(this.ns0) * dart.notNull(qs)) / dart.notNull(this.ns0);
      let theta = dart.notNull(this.ns0) * dart.notNull(utils.adjust_lon(dart.notNull(lon) - dart.notNull(this.long0)));
      let x = rh1 * math.sin(theta) + dart.notNull(this.x0);
      let y = dart.notNull(this.rh) - rh1 * math.cos(theta) + dart.notNull(this.y0);
      p.x = x;
      p.y = y;
      return p;
    }
    inverse(p) {
      let t6;
      let rh1 = null;
      let qs = null;
      let con = null;
      let theta = null;
      let lon = null;
      let lat = null;
      t6 = p;
      t6.x = dart.notNull(t6.x) - dart.notNull(this.x0);
      p.y = dart.notNull(this.rh) - dart.notNull(p.y) + dart.notNull(this.y0);
      if (dart.notNull(this.ns0) >= 0) {
        rh1 = math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
        con = 1;
      } else {
        rh1 = -math.sqrt(dart.notNull(p.x) * dart.notNull(p.x) + dart.notNull(p.y) * dart.notNull(p.y));
        con = -1;
      }
      theta = 0;
      if (!dart.equals(rh1, 0)) {
        theta = math.atan2(core.num.as(dart.dsend(con, '*', [p.x])), core.num.as(dart.dsend(con, '*', [p.y])));
      }
      con = dart.dsend(dart.dsend(rh1, '*', [this.ns0]), '/', [this.a]);
      if (this.sphere != null && dart.test(this.sphere)) {
        lat = math.asin((dart.notNull(this.c) - dart.notNull(core.num.as(dart.dsend(con, '*', [con])))) / (2 * dart.notNull(this.ns0)));
      } else {
        qs = (dart.notNull(this.c) - dart.notNull(core.num.as(dart.dsend(con, '*', [con])))) / dart.notNull(this.ns0);
        lat = this[_phi1z](this.e3, qs);
      }
      lon = utils.adjust_lon(doubleL().as(dart.dsend(dart.dsend(theta, '/', [this.ns0]), '+', [this.long0])));
      p.x = doubleL().as(lon);
      p.y = doubleL().as(lat);
      return p;
    }
    [_phi1z](eccent, qs) {
      let sinphi = null;
      let cosphi = null;
      let con = null;
      let com = null;
      let dphi = null;
      let phi = utils.asinz(0.5 * dart.notNull(core.num.as(qs)));
      if (dart.dtest(dart.dsend(eccent, '<', [values.EPSLN]))) {
        return phi;
      }
      let eccnts = dart.dsend(eccent, '*', [eccent]);
      for (let i = 1; i <= 25; i = i + 1) {
        sinphi = math.sin(phi);
        cosphi = math.cos(phi);
        con = dart.dsend(eccent, '*', [sinphi]);
        com = 1 - dart.notNull(core.num.as(dart.dsend(con, '*', [con])));
        dphi = 0.5 * dart.notNull(core.num.as(com)) * dart.notNull(core.num.as(com)) / dart.notNull(core.num.as(cosphi)) * dart.notNull(core.num.as(dart.dsend(dart.dsend(dart.dsend(qs, '/', [1 - dart.notNull(core.num.as(eccnts))]), '-', [dart.dsend(sinphi, '/', [com])]), '+', [0.5 / dart.notNull(core.num.as(eccent)) * math.log((1 - dart.notNull(core.num.as(con))) / (1 + dart.notNull(core.num.as(con))))])));
        phi = dart.notNull(phi) + dart.notNull(core.num.as(dphi));
        if (dart.dtest(dart.dsend(dart.dsend(dphi, 'abs', []), '<=', [1e-7]))) {
          return phi;
        }
      }
      return null;
    }
  };
  (aea.AlbersProjection.init = function(params) {
    this[e3$1] = null;
    this[ns0] = null;
    this[c] = null;
    this[rh$1] = null;
    this[long0$24] = null;
    this[x0$24] = null;
    this[y0$24] = null;
    aea.AlbersProjection.__proto__.init.call(this, params);
    let lat1 = params.lat1;
    let lat2 = params.lat2;
    this.long0 = params.long0;
    this.x0 = params.x0;
    this.y0 = params.y0;
    if ((dart.notNull(lat1) + dart.notNull(lat2))[$abs]() < dart.notNull(values.EPSLN)) {
      return;
    }
    let temp = dart.notNull(this.b) / dart.notNull(this.a);
    this.es = 1 - math.pow(temp, 2);
    this.e3 = math.sqrt(this.es);
    let sin_po = math.sin(lat1);
    let cos_po = math.cos(lat1);
    let con = sin_po;
    let ms1 = utils.msfnz(this.e3, sin_po, cos_po);
    let qs1 = utils.qsfnz(this.e3, sin_po);
    sin_po = math.sin(lat2);
    cos_po = math.cos(lat2);
    let ms2 = utils.msfnz(this.e3, sin_po, cos_po);
    let qs2 = utils.qsfnz(this.e3, sin_po);
    sin_po = math.sin(params.lat0);
    cos_po = math.cos(params.lat0);
    let qs0 = utils.qsfnz(this.e3, sin_po);
    if ((dart.notNull(lat1) - dart.notNull(lat2))[$abs]() > dart.notNull(values.EPSLN)) {
      this.ns0 = (dart.notNull(ms1) * dart.notNull(ms1) - dart.notNull(ms2) * dart.notNull(ms2)) / (dart.notNull(qs2) - dart.notNull(qs1));
    } else {
      this.ns0 = con;
    }
    this.c = dart.notNull(ms1) * dart.notNull(ms1) + dart.notNull(this.ns0) * dart.notNull(qs1);
    this.rh = dart.notNull(this.a) * math.sqrt(dart.notNull(this.c) - dart.notNull(this.ns0) * dart.notNull(qs0)) / dart.notNull(this.ns0);
  }).prototype = aea.AlbersProjection.prototype;
  dart.addTypeTests(aea.AlbersProjection);
  dart.addTypeCaches(aea.AlbersProjection);
  dart.setMethodSignature(aea.AlbersProjection, () => ({
    __proto__: dart.getMethods(aea.AlbersProjection.__proto__),
    forward: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    inverse: dart.fnType(dart.legacy(point$.Point), [dart.legacy(point$.Point)]),
    [_phi1z]: dart.fnType(dart.legacy(core.double), [dart.dynamic, dart.dynamic])
  }));
  dart.setLibraryUri(aea.AlbersProjection, L33);
  dart.setFieldSignature(aea.AlbersProjection, () => ({
    __proto__: dart.getFields(aea.AlbersProjection.__proto__),
    e3: dart.fieldType(dart.legacy(core.double)),
    ns0: dart.fieldType(dart.legacy(core.double)),
    c: dart.fieldType(dart.legacy(core.double)),
    rh: dart.fieldType(dart.legacy(core.double)),
    long0: dart.fieldType(dart.legacy(core.double)),
    x0: dart.fieldType(dart.legacy(core.double)),
    y0: dart.fieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(aea.AlbersProjection, {
    /*aea.AlbersProjection.names*/get names() {
      return JSArrayOfStringL().of(["Albers_Conic_Equal_Area", "Albers", "aea"]);
    }
  }, true);
  dart.defineLazy(initializers, {
    /*initializers.initializers*/get initializers() {
      return (() => {
        let t6 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
        for (let t8 of (() => {
          let t7 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of merc.PseudoMercatorProjection.names)
            t7[$_set](name, dart.fn(params => new merc.PseudoMercatorProjection.init(params), ProjParamsLToPseudoMercatorProjectionL()));
          return t7;
        })()[$entries])
          t6[$_set](t8.key, t8.value);
        for (let t10 of (() => {
          let t9 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of longlat.LongLat.names)
            t9[$_set](name, dart.fn(params => new longlat.LongLat.init(params), ProjParamsLToLongLatL()));
          return t9;
        })()[$entries])
          t6[$_set](t10.key, t10.value);
        for (let t12 of (() => {
          let t11 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of somerc.SwissObliqueMercatorProjection.names)
            t11[$_set](name, dart.fn(params => new somerc.SwissObliqueMercatorProjection.init(params), ProjParamsLToSwissObliqueMercatorProjectionL()));
          return t11;
        })()[$entries])
          t6[$_set](t12.key, t12.value);
        for (let t14 of (() => {
          let t13 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of aea.AlbersProjection.names)
            t13[$_set](name, dart.fn(params => new aea.AlbersProjection.init(params), ProjParamsLToAlbersProjectionL()));
          return t13;
        })()[$entries])
          t6[$_set](t14.key, t14.value);
        for (let t16 of (() => {
          let t15 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of aeqd.AzimuthalEquidistantProjection.names)
            t15[$_set](name, dart.fn(params => new aeqd.AzimuthalEquidistantProjection.init(params), ProjParamsLToAzimuthalEquidistantProjectionL()));
          return t15;
        })()[$entries])
          t6[$_set](t16.key, t16.value);
        for (let t18 of (() => {
          let t17 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of cass.CassiniProjection.names)
            t17[$_set](name, dart.fn(params => new cass.CassiniProjection.init(params), ProjParamsLToCassiniProjectionL()));
          return t17;
        })()[$entries])
          t6[$_set](t18.key, t18.value);
        for (let t20 of (() => {
          let t19 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of cea.CentralCylindricalProjection.names)
            t19[$_set](name, dart.fn(params => new cea.CentralCylindricalProjection.init(params), ProjParamsLToCentralCylindricalProjectionL()));
          return t19;
        })()[$entries])
          t6[$_set](t20.key, t20.value);
        for (let t22 of (() => {
          let t21 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of eqc.EquidistantCylindricalProjection.names)
            t21[$_set](name, dart.fn(params => new eqc.EquidistantCylindricalProjection.init(params), ProjParamsLToEquidistantCylindricalProjectionL()));
          return t21;
        })()[$entries])
          t6[$_set](t22.key, t22.value);
        for (let t24 of (() => {
          let t23 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of eqdc.EquidistantConicProjection.names)
            t23[$_set](name, dart.fn(params => new eqdc.EquidistantConicProjection.init(params), ProjParamsLToEquidistantConicProjectionL()));
          return t23;
        })()[$entries])
          t6[$_set](t24.key, t24.value);
        for (let t26 of (() => {
          let t25 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of etmerc.ExtendedTransverseMercatorProjection.names)
            t25[$_set](name, dart.fn(params => new etmerc.ExtendedTransverseMercatorProjection.init(params), ProjParamsLToExtendedTransverseMercatorProjectionL()));
          return t25;
        })()[$entries])
          t6[$_set](t26.key, t26.value);
        for (let t28 of (() => {
          let t27 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of utm.UniversalTransverseMercatorProjection.names)
            t27[$_set](name, dart.fn(params => new utm.UniversalTransverseMercatorProjection.init(params), ProjParamsLToUniversalTransverseMercatorProjectionL()));
          return t27;
        })()[$entries])
          t6[$_set](t28.key, t28.value);
        for (let t30 of (() => {
          let t29 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of vandg.VanDerGrintenProjection.names)
            t29[$_set](name, dart.fn(params => new vandg.VanDerGrintenProjection.init(params), ProjParamsLToVanDerGrintenProjectionL()));
          return t29;
        })()[$entries])
          t6[$_set](t30.key, t30.value);
        for (let t32 of (() => {
          let t31 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of gauss.GaussProjection.names)
            t31[$_set](name, dart.fn(params => new gauss.GaussProjection.init(params), ProjParamsLToGaussProjectionL()));
          return t31;
        })()[$entries])
          t6[$_set](t32.key, t32.value);
        for (let t34 of (() => {
          let t33 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of sterea.StereographicNorthProjection.names)
            t33[$_set](name, dart.fn(params => new sterea.StereographicNorthProjection.init(params), ProjParamsLToStereographicNorthProjectionL()));
          return t33;
        })()[$entries])
          t6[$_set](t34.key, t34.value);
        for (let t36 of (() => {
          let t35 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of stere.StereographicSouthProjection.names)
            t35[$_set](name, dart.fn(params => new stere.StereographicSouthProjection.init(params), ProjParamsLToStereographicSouthProjectionL()));
          return t35;
        })()[$entries])
          t6[$_set](t36.key, t36.value);
        for (let t38 of (() => {
          let t37 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of sinu.SinusoidalProjection.names)
            t37[$_set](name, dart.fn(params => new sinu.SinusoidalProjection.init(params), ProjParamsLToSinusoidalProjectionL()));
          return t37;
        })()[$entries])
          t6[$_set](t38.key, t38.value);
        for (let t40 of (() => {
          let t39 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of robin.RobinsonProjection.names)
            t39[$_set](name, dart.fn(params => new robin.RobinsonProjection.init(params), ProjParamsLToRobinsonProjectionL()));
          return t39;
        })()[$entries])
          t6[$_set](t40.key, t40.value);
        for (let t42 of (() => {
          let t41 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of geocent.GeocentricProjection.names)
            t41[$_set](name, dart.fn(params => new geocent.GeocentricProjection.init(params), ProjParamsLToGeocentricProjectionL()));
          return t41;
        })()[$entries])
          t6[$_set](t42.key, t42.value);
        for (let t44 of (() => {
          let t43 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of gnom.GnomicProjection.names)
            t43[$_set](name, dart.fn(params => new gnom.GnomicProjection.init(params), ProjParamsLToGnomicProjectionL()));
          return t43;
        })()[$entries])
          t6[$_set](t44.key, t44.value);
        for (let t46 of (() => {
          let t45 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of gstmerc.GaussSchreiberTransverseMercatorProjection.names)
            t45[$_set](name, dart.fn(params => new gstmerc.GaussSchreiberTransverseMercatorProjection.init(params), ProjParamsLToGaussSchreiberTransverseMercatorProjectionL()));
          return t45;
        })()[$entries])
          t6[$_set](t46.key, t46.value);
        for (let t48 of (() => {
          let t47 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of krovak.KrovakProjection.names)
            t47[$_set](name, dart.fn(params => new krovak.KrovakProjection.init(params), ProjParamsLToKrovakProjectionL()));
          return t47;
        })()[$entries])
          t6[$_set](t48.key, t48.value);
        for (let t50 of (() => {
          let t49 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of laea.LambertAzimuthalEqualAreaProjection.names)
            t49[$_set](name, dart.fn(params => new laea.LambertAzimuthalEqualAreaProjection.init(params), ProjParamsLToLambertAzimuthalEqualAreaProjectionL()));
          return t49;
        })()[$entries])
          t6[$_set](t50.key, t50.value);
        for (let t52 of (() => {
          let t51 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of lcc.LambertConformalConicProjection.names)
            t51[$_set](name, dart.fn(params => new lcc.LambertConformalConicProjection.init(params), ProjParamsLToLambertConformalConicProjectionL()));
          return t51;
        })()[$entries])
          t6[$_set](t52.key, t52.value);
        for (let t54 of (() => {
          let t53 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of mill.MillerCylindricalProjection.names)
            t53[$_set](name, dart.fn(params => new mill.MillerCylindricalProjection.init(params), ProjParamsLToMillerCylindricalProjectionL()));
          return t53;
        })()[$entries])
          t6[$_set](t54.key, t54.value);
        for (let t56 of (() => {
          let t55 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of moll.MollweideProjection.names)
            t55[$_set](name, dart.fn(params => new moll.MollweideProjection.init(params), ProjParamsLToMollweideProjectionL()));
          return t55;
        })()[$entries])
          t6[$_set](t56.key, t56.value);
        for (let t58 of (() => {
          let t57 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of nzmg.NewZealandMapGridProjection.names)
            t57[$_set](name, dart.fn(params => new nzmg.NewZealandMapGridProjection.init(params), ProjParamsLToNewZealandMapGridProjectionL()));
          return t57;
        })()[$entries])
          t6[$_set](t58.key, t58.value);
        for (let t60 of (() => {
          let t59 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of omerc.HotineObliqueMercatorProjection.names)
            t59[$_set](name, dart.fn(params => new omerc.HotineObliqueMercatorProjection.init(params), ProjParamsLToHotineObliqueMercatorProjectionL()));
          return t59;
        })()[$entries])
          t6[$_set](t60.key, t60.value);
        for (let t62 of (() => {
          let t61 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of ortho.OrthographicProjection.names)
            t61[$_set](name, dart.fn(params => new ortho.OrthographicProjection.init(params), ProjParamsLToOrthographicProjectionL()));
          return t61;
        })()[$entries])
          t6[$_set](t62.key, t62.value);
        for (let t64 of (() => {
          let t63 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of poly.PolyconicProjection.names)
            t63[$_set](name, dart.fn(params => new poly.PolyconicProjection.init(params), ProjParamsLToPolyconicProjectionL()));
          return t63;
        })()[$entries])
          t6[$_set](t64.key, t64.value);
        for (let t66 of (() => {
          let t65 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of qsc.QuadrilateralizedSphericalCubeProjection.names)
            t65[$_set](name, dart.fn(params => new qsc.QuadrilateralizedSphericalCubeProjection.init(params), ProjParamsLToQuadrilateralizedSphericalCubeProjectionL()));
          return t65;
        })()[$entries])
          t6[$_set](t66.key, t66.value);
        for (let t68 of (() => {
          let t67 = new (IdentityMapOfStringL$ProjParamsLToLProjectionL()).new();
          for (let name of tmerc.TransverseMercatorProjection.names)
            t67[$_set](name, dart.fn(params => new tmerc.TransverseMercatorProjection.init(params), ProjParamsLToTransverseMercatorProjectionL()));
          return t67;
        })()[$entries])
          t6[$_set](t68.key, t68.value);
        return t6;
      })();
    }
  }, true);
  var _projectionCache = dart.privateName(projection_store, "_projectionCache");
  var WGS84 = dart.privateName(projection_store, "ProjectionStore.WGS84");
  var GOOGLE = dart.privateName(projection_store, "ProjectionStore.GOOGLE");
  projection_store.ProjectionStore = class ProjectionStore extends core.Object {
    get WGS84() {
      return this[WGS84];
    }
    set WGS84(value) {
      super.WGS84 = value;
    }
    get GOOGLE() {
      return this[GOOGLE];
    }
    set GOOGLE(value) {
      super.GOOGLE = value;
    }
    get isEmpty() {
      return this[_projectionCache][$isEmpty];
    }
    clearProjectionCache() {
      this[_projectionCache][$clear]();
    }
    static new() {
      return projection_store.ProjectionStore._projStore;
    }
    get(srsCode) {
      return this[_projectionCache][$_get](srsCode);
    }
    register(code, projection) {
      let t71, t70, t69;
      if (dart.test(this[_projectionCache][$containsKey](code))) {
        core.print("Warning a Projection was already registered with the following name: " + dart.str(code) + ", it will be overridden");
      }
      t69 = this[_projectionCache];
      t70 = code;
      t71 = projection;
      t69[$_set](t70, t71);
      return t71;
    }
  };
  (projection_store.ProjectionStore._internalInitializer = function(opts) {
    let wgs84 = opts && 'wgs84' in opts ? opts.wgs84 : null;
    let nad83 = opts && 'nad83' in opts ? opts.nad83 : null;
    let google = opts && 'google' in opts ? opts.google : null;
    this[WGS84] = wgs84;
    this[GOOGLE] = google;
    this[_projectionCache] = new (IdentityMapOfStringL$ProjectionL()).new();
    this.register("WGS84", wgs84);
    this.register("EPSG:4326", wgs84);
    this.register("EPSG:4269", nad83);
    this.register("EPSG:3857", google);
    this.register("EPSG:3785", google);
    this.register("GOOGLE", google);
    this.register("EPSG:900913", google);
    this.register("EPSG:102113", google);
  }).prototype = projection_store.ProjectionStore.prototype;
  (projection_store.ProjectionStore._internal = function() {
    projection_store.ProjectionStore._internalInitializer.call(this, {wgs84: projection.Projection.parse("+proj=longlat +datum=WGS84 +no_defs"), nad83: projection.Projection.parse("+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees"), google: projection.Projection.parse("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs")});
  }).prototype = projection_store.ProjectionStore.prototype;
  dart.addTypeTests(projection_store.ProjectionStore);
  dart.addTypeCaches(projection_store.ProjectionStore);
  dart.setMethodSignature(projection_store.ProjectionStore, () => ({
    __proto__: dart.getMethods(projection_store.ProjectionStore.__proto__),
    clearProjectionCache: dart.fnType(dart.void, []),
    get: dart.fnType(dart.legacy(projection.Projection), [dart.legacy(core.String)]),
    register: dart.fnType(dart.legacy(projection.Projection), [dart.legacy(core.String), dart.legacy(projection.Projection)])
  }));
  dart.setGetterSignature(projection_store.ProjectionStore, () => ({
    __proto__: dart.getGetters(projection_store.ProjectionStore.__proto__),
    isEmpty: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(projection_store.ProjectionStore, L34);
  dart.setFieldSignature(projection_store.ProjectionStore, () => ({
    __proto__: dart.getFields(projection_store.ProjectionStore.__proto__),
    WGS84: dart.finalFieldType(dart.legacy(projection.Projection)),
    GOOGLE: dart.finalFieldType(dart.legacy(projection.Projection)),
    [_projectionCache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(projection.Projection))))
  }));
  dart.defineLazy(projection_store.ProjectionStore, {
    /*projection_store.ProjectionStore._projStore*/get _projStore() {
      return new projection_store.ProjectionStore._internal();
    }
  }, true);
  utils.acosh = function acosh(x) {
    return 2 * math.log(math.sqrt((dart.notNull(x) + 1) / 2) + math.sqrt((dart.notNull(x) - 1) / 2));
  };
  utils.adjust_lat = function adjust_lat(x) {
    return x[$abs]() < dart.notNull(values.HALF_PI) ? x : dart.notNull(x) - dart.notNull(utils.sign(x)) * 3.141592653589793;
  };
  utils.adjust_lon = function adjust_lon(x) {
    return x[$abs]() <= dart.notNull(values.SPI) ? x : dart.notNull(x) - dart.notNull(utils.sign(x)) * dart.notNull(values.TWO_PI);
  };
  utils.adjust_zone = function adjust_zone(zone, lon) {
    if (zone == null) {
      zone = ((dart.notNull(utils.adjust_lon(lon)) + 3.141592653589793) * 30 / 3.141592653589793)[$floor]() + 1;
      if (dart.notNull(zone) < 0) {
        return 0;
      } else if (dart.notNull(zone) > 60) {
        return 60;
      }
    }
    return zone;
  };
  utils.asinh = function asinh(x) {
    let s = dart.notNull(x) >= 0 ? 1 : -1;
    return s * math.log(x[$abs]() + math.sqrt(dart.notNull(x) * dart.notNull(x) + 1));
  };
  utils.asinhy = function asinhy(x) {
    let y = x[$abs]();
    y = utils.log1py(dart.notNull(y) * (1 + dart.notNull(y) / (dart.notNull(utils.hypot(1.0, y)) + 1)));
    return dart.notNull(x) < 0 ? -dart.notNull(y) : y;
  };
  utils.asinz = function asinz(x) {
    if (x[$abs]() > 1) {
      x = dart.notNull(x) > 1 ? 1.0 : -1.0;
    }
    return math.asin(x);
  };
  utils.atanh = function atanh(x) {
    return math.log((dart.notNull(x) - 1) / (dart.notNull(x) + 1)) / 2;
  };
  utils.clens_cmplx = function clens_cmplx(pp, arg_r, arg_i) {
    let sin_arg_r = math.sin(arg_r);
    let cos_arg_r = math.cos(arg_r);
    let sinh_arg_i = utils.sinh(arg_i);
    let cosh_arg_i = utils.cosh(arg_i);
    let r = 2 * cos_arg_r * dart.notNull(cosh_arg_i);
    let i = -2 * sin_arg_r * dart.notNull(sinh_arg_i);
    let j = dart.notNull(pp[$length]) - 1;
    let hr = pp[$_get](j);
    let hi1 = 0.0;
    let hr1 = 0.0;
    let hi = 0.0;
    let hr2 = null;
    let hi2 = null;
    while ((j = j - 1) >= 0) {
      hr2 = hr1;
      hi2 = hi1;
      hr1 = hr;
      hi1 = hi;
      hr = doubleL().as(dart.dsend(dart.dsend(dart.dsend(dart.dsend(hr2, '_negate', []), '+', [r * dart.notNull(hr1)]), '-', [i * dart.notNull(hi1)]), '+', [pp[$_get](j)]));
      hi = doubleL().as(dart.dsend(dart.dsend(dart.dsend(hi2, '_negate', []), '+', [i * dart.notNull(hr1)]), '+', [r * dart.notNull(hi1)]));
    }
    r = sin_arg_r * dart.notNull(cosh_arg_i);
    i = cos_arg_r * dart.notNull(sinh_arg_i);
    return JSArrayOfdoubleL().of([r * dart.notNull(hr) - i * dart.notNull(hi), r * dart.notNull(hi) + i * dart.notNull(hr)]);
  };
  utils.clens = function clens(pp, arg_r) {
    let r = 2 * math.cos(arg_r);
    let i = dart.notNull(pp[$length]) - 1;
    let hr1 = pp[$_get](i);
    let hr2 = 0.0;
    let hr = null;
    while ((i = i - 1) >= 0) {
      hr = -dart.notNull(hr2) + r * dart.notNull(hr1) + dart.notNull(pp[$_get](i));
      hr2 = hr1;
      hr1 = doubleL().as(hr);
    }
    return math.sin(arg_r) * dart.notNull(core.num.as(hr));
  };
  utils.cosh = function cosh(x) {
    let r = math.exp(x);
    r = (r + 1 / r) / 2;
    return r;
  };
  utils.e0fn = function e0fn(x) {
    return 1 - 0.25 * dart.notNull(x) * (1 + dart.notNull(x) / 16 * (3 + 1.25 * dart.notNull(x)));
  };
  utils.e1fn = function e1fn(x) {
    return 0.375 * dart.notNull(x) * (1 + 0.25 * dart.notNull(x) * (1 + 0.46875 * dart.notNull(x)));
  };
  utils.e2fn = function e2fn(x) {
    return 0.05859375 * dart.notNull(x) * dart.notNull(x) * (1 + 0.75 * dart.notNull(x));
  };
  utils.e3fn = function e3fn(x) {
    return dart.notNull(x) * dart.notNull(x) * dart.notNull(x) * (35 / 3072);
  };
  utils.fL = function fL(x, L) {
    return 2 * math.atan(dart.notNull(x) * math.exp(L)) - dart.notNull(values.HALF_PI);
  };
  utils.gatg = function gatg(pp, B) {
    let cos_2B = 2 * math.cos(2 * dart.notNull(B));
    let i = dart.notNull(pp[$length]) - 1;
    let h1 = pp[$_get](i);
    let h2 = 0.0;
    let h = null;
    while ((i = i - 1) >= 0) {
      h = -dart.notNull(h2) + cos_2B * dart.notNull(h1) + dart.notNull(pp[$_get](i));
      h2 = h1;
      h1 = doubleL().as(h);
    }
    return dart.notNull(B) + dart.notNull(core.num.as(dart.dsend(h, '*', [math.sin(2 * dart.notNull(B))])));
  };
  utils.gN = function gN(a, e, sinphi) {
    let temp = dart.notNull(e) * dart.notNull(sinphi);
    return dart.notNull(a) / math.sqrt(1 - temp * temp);
  };
  utils.hypot = function hypot(x, y) {
    let t69;
    x = x[$abs]();
    y = y[$abs]();
    let a = math.max(doubleL(), x, y);
    let b = math.min(doubleL(), x, y) / (t69 = a, t69 === null ? 1 : t69);
    return a * math.sqrt(1 + math.pow(b, 2));
  };
  utils.imlfn = function imlfn(ml, e0, e1, e2, e3) {
    let phi = null;
    let dphi = null;
    phi = dart.notNull(ml) / dart.notNull(e0);
    for (let i = 0; i < 15; i = i + 1) {
      dphi = (dart.notNull(ml) - (dart.notNull(e0) * dart.notNull(phi) - dart.notNull(e1) * math.sin(2 * dart.notNull(phi)) + dart.notNull(e2) * math.sin(4 * dart.notNull(phi)) - dart.notNull(e3) * math.sin(6 * dart.notNull(phi)))) / (dart.notNull(e0) - 2 * dart.notNull(e1) * math.cos(2 * dart.notNull(phi)) + 4 * dart.notNull(e2) * math.cos(4 * dart.notNull(phi)) - 6 * dart.notNull(e3) * math.cos(6 * dart.notNull(phi)));
      phi = dart.notNull(phi) + dart.notNull(dphi);
      if (dphi[$abs]() <= 1e-10) {
        return phi;
      }
    }
    return 0 / 0;
  };
  utils.inverseNadCvt = function inverseNadCvt(t, val, tb, ct) {
    let t69, t69$, t69$0;
    if (t.x[$isNaN]) {
      return val;
    }
    t.x = doubleL().as(dart.dsend(dart.dload(tb, 'x'), '+', [t.x]));
    t.y = doubleL().as(dart.dsend(dart.dload(tb, 'y'), '-', [t.y]));
    let i = 9;
    let tol = 1e-12;
    let dif = null;
    let del = null;
    do {
      del = utils.nad_intr(t, ct);
      if (del.x[$isNaN]) {
        break;
      }
      dif = new point$.Point.new({x: dart.notNull(t.x) - dart.notNull(del.x) - dart.notNull(core.num.as(dart.dload(tb, 'x'))), y: dart.notNull(t.y) + dart.notNull(del.y) - dart.notNull(core.num.as(dart.dload(tb, 'y')))});
      t69 = t;
      t69.x = dart.notNull(t69.x) - dart.notNull(dif.x);
      t69$ = t;
      t69$.y = dart.notNull(t69$.y) - dart.notNull(dif.y);
    } while ((t69$0 = i, i = t69$0 - 1, t69$0) !== 0 && dif.x[$abs]() > tol && dif.y[$abs]() > tol);
    if (i < 0) {
      return val;
    }
    val.x = utils.adjust_lon(dart.notNull(t.x) + dart.notNull(core.num.as(dart.dsend(dart.dload(ct, 'll'), '_get', [0]))));
    val.y = dart.notNull(t.y) + dart.notNull(core.num.as(dart.dsend(dart.dload(ct, 'll'), '_get', [1])));
    return val;
  };
  utils.invlatiso = function invlatiso(eccent, ts) {
    let phi = utils.fL(1.0, ts);
    let Iphi = 0.0;
    let con = 0.0;
    do {
      Iphi = phi;
      con = dart.notNull(eccent) * math.sin(Iphi);
      phi = utils.fL(math.exp(dart.notNull(eccent) * math.log((1 + con) / (1 - con)) / 2), ts);
    } while ((dart.notNull(phi) - dart.notNull(Iphi))[$abs]() > 1e-12);
    return phi;
  };
  utils.iqsfnz = function iqsfnz(eccent, q) {
    let temp = 1 - (1 - dart.notNull(eccent) * dart.notNull(eccent)) / (2 * dart.notNull(eccent)) * math.log((1 - dart.notNull(eccent)) / (1 + dart.notNull(eccent)));
    if ((q[$abs]() - temp)[$abs]() < 0.000001) {
      if (dart.notNull(q) < 0) {
        return -1 * dart.notNull(values.HALF_PI);
      } else {
        return values.HALF_PI;
      }
    }
    let phi = math.asin(0.5 * dart.notNull(q));
    let dphi = null;
    let sin_phi = null;
    let cos_phi = null;
    let con = null;
    for (let i = 0; i < 30; i = i + 1) {
      sin_phi = math.sin(phi);
      cos_phi = math.cos(phi);
      con = dart.notNull(eccent) * dart.notNull(sin_phi);
      dphi = math.pow(1 - dart.notNull(con) * dart.notNull(con), 2) / (2 * dart.notNull(cos_phi)) * (dart.notNull(q) / (1 - dart.notNull(eccent) * dart.notNull(eccent)) - dart.notNull(sin_phi) / (1 - dart.notNull(con) * dart.notNull(con)) + 0.5 / dart.notNull(eccent) * math.log((1 - dart.notNull(con)) / (1 + dart.notNull(con))));
      phi = phi + dart.notNull(dphi);
      if (dphi[$abs]() <= 1e-10) {
        return phi;
      }
    }
    return 0 / 0;
  };
  utils.latiso = function latiso(eccent, phi, sinphi) {
    if (phi[$abs]() > dart.notNull(values.HALF_PI)) {
      return 0 / 0;
    }
    if (phi == values.HALF_PI) {
      return 1 / 0;
    }
    if (phi === -1 * dart.notNull(values.HALF_PI)) {
      return -1 / 0;
    }
    let con = dart.notNull(eccent) * dart.notNull(sinphi);
    return math.log(math.tan((dart.notNull(values.HALF_PI) + dart.notNull(phi)) / 2)) + dart.notNull(eccent) * math.log((1 - con) / (1 + con)) / 2;
  };
  utils.log1py = function log1py(x) {
    let y = 1 + dart.notNull(x);
    let z = y - 1;
    return z === 0 ? x : dart.notNull(x) * math.log(y) / z;
  };
  utils.mlfn = function mlfn(e0, e1, e2, e3, phi) {
    return dart.notNull(e0) * dart.notNull(phi) - dart.notNull(e1) * math.sin(2 * dart.notNull(phi)) + dart.notNull(e2) * math.sin(4 * dart.notNull(phi)) - dart.notNull(e3) * math.sin(6 * dart.notNull(phi));
  };
  utils.msfnz = function msfnz(eccent, sinphi, cosphi) {
    let con = dart.notNull(eccent) * dart.notNull(sinphi);
    return dart.notNull(cosphi) / math.sqrt(1 - con * con);
  };
  utils.nad_cvt = function nad_cvt(pin, inverse, ct) {
    let t69, t69$;
    let val = new point$.Point.new({x: 0 / 0, y: 0 / 0});
    if (pin.x[$isNaN]) {
      return val;
    }
    let tb = new point$.Point.new({x: pin.x, y: pin.y});
    t69 = tb;
    t69.x = dart.notNull(t69.x) - dart.notNull(core.num.as(dart.dsend(dart.dload(ct, 'll'), '_get', [0])));
    t69$ = tb;
    t69$.y = dart.notNull(t69$.y) - dart.notNull(core.num.as(dart.dsend(dart.dload(ct, 'll'), '_get', [1])));
    tb.x = dart.notNull(utils.adjust_lon(dart.notNull(tb.x) - 3.141592653589793)) + 3.141592653589793;
    let t = utils.nad_intr(tb, ct);
    if (dart.test(inverse)) {
      return utils.inverseNadCvt(t, val, tb, ct);
    } else {
      if (!t.x[$isNaN]) {
        val.x = dart.notNull(pin.x) - dart.notNull(t.x);
        val.y = dart.notNull(pin.y) + dart.notNull(t.y);
      }
    }
    return val;
  };
  utils.nad_intr = function nad_intr(pin, ct) {
    let t = new point$.Point.new({x: doubleL().as(dart.dsend(dart.dsend(dart.dload(pin, 'x'), '-', [1e-7]), '/', [dart.dsend(dart.dload(ct, 'del'), '_get', [0])])), y: doubleL().as(dart.dsend(dart.dsend(dart.dload(pin, 'y'), '-', [1e-7]), '/', [dart.dsend(dart.dload(ct, 'del'), '_get', [1])]))});
    let indx = new point$.Point.new({x: t.x[$floorToDouble](), y: t.y[$floorToDouble]()});
    let frct = new point$.Point.new({x: dart.notNull(t.x) - 1 * dart.notNull(indx.x), y: dart.notNull(t.y) - 1 * dart.notNull(indx.y)});
    let val = new point$.Point.new({x: 0 / 0, y: 0 / 0});
    let temp = utils.nadInterBreakout(indx, frct, "x", 0, ct);
    if (dart.dtest(temp)) {
      indx = PointL().as(dart.dsend(temp, '_get', [0]));
      frct = PointL().as(dart.dsend(temp, '_get', [1]));
    } else {
      return val;
    }
    temp = utils.nadInterBreakout(indx, frct, "y", 1, ct);
    if (!dart.equals(temp, false)) {
      indx = PointL().as(dart.dsend(temp, '_get', [0]));
      frct = PointL().as(dart.dsend(temp, '_get', [1]));
    } else {
      return val;
    }
    let inx = dart.notNull(indx.y) * dart.notNull(core.num.as(dart.dsend(dart.dload(ct, 'lim'), '_get', [0]))) + dart.notNull(indx.x);
    let f00 = new point$.Point.new({x: doubleL().as(dart.dsend(dart.dsend(dart.dload(ct, 'cvs'), '_get', [inx]), '_get', [0])), y: doubleL().as(dart.dsend(dart.dsend(dart.dload(ct, 'cvs'), '_get', [inx]), '_get', [1]))});
    inx = inx + 1;
    let f10 = new point$.Point.new({x: doubleL().as(dart.dsend(dart.dsend(dart.dload(ct, 'cvs'), '_get', [inx]), '_get', [0])), y: doubleL().as(dart.dsend(dart.dsend(dart.dload(ct, 'cvs'), '_get', [inx]), '_get', [1]))});
    inx = inx + dart.notNull(core.num.as(dart.dsend(dart.dload(ct, 'lim'), '_get', [0])));
    let f11 = new point$.Point.new({x: doubleL().as(dart.dsend(dart.dsend(dart.dload(ct, 'cvs'), '_get', [inx]), '_get', [0])), y: doubleL().as(dart.dsend(dart.dsend(dart.dload(ct, 'cvs'), '_get', [inx]), '_get', [1]))});
    inx = inx - 1;
    let f01 = new point$.Point.new({x: doubleL().as(dart.dsend(dart.dsend(dart.dload(ct, 'cvs'), '_get', [inx]), '_get', [0])), y: doubleL().as(dart.dsend(dart.dsend(dart.dload(ct, 'cvs'), '_get', [inx]), '_get', [1]))});
    let m11 = dart.notNull(frct.x) * dart.notNull(frct.y);
    let m10 = dart.notNull(frct.x) * (1 - dart.notNull(frct.y));
    let m00 = (1 - dart.notNull(frct.x)) * (1 - dart.notNull(frct.y));
    let m01 = (1 - dart.notNull(frct.x)) * dart.notNull(frct.y);
    val.x = m00 * dart.notNull(f00.x) + m10 * dart.notNull(f10.x) + m01 * dart.notNull(f01.x) + m11 * dart.notNull(f11.x);
    val.y = m00 * dart.notNull(f00.y) + m10 * dart.notNull(f10.y) + m01 * dart.notNull(f01.y) + m11 * dart.notNull(f11.y);
    return val;
  };
  utils.nadInterBreakout = function nadInterBreakout(indx, frct, letter, number, ct) {
    let t70, t69, t70$, t69$, t70$0, t69$0;
    let inx = null;
    if (dart.dtest(dart.dsend(dart.dsend(indx, '_get', [letter]), '<', [0]))) {
      if (!(dart.equals(dart.dsend(indx, '_get', [letter]), -1) && dart.dtest(dart.dsend(dart.dsend(frct, '_get', [letter]), '>', [0.99999999999])))) {
        return false;
      }
      t69 = indx;
      t70 = letter;
      dart.dsend(t69, '_set', [t70, dart.dsend(dart.dsend(t69, '_get', [t70]), '+', [1])]);
      dart.dsend(frct, '_set', [letter, 0]);
    } else {
      inx = dart.dsend(dart.dsend(indx, '_get', [letter]), '+', [1]);
      if (dart.dtest(dart.dsend(inx, '>=', [dart.dsend(dart.dload(ct, 'lim'), '_get', [number])]))) {
        if (!(dart.equals(inx, dart.dsend(dart.dload(ct, 'lim'), '_get', [number])) && dart.dtest(dart.dsend(dart.dsend(frct, '_get', [letter]), '<', [1e-11])))) {
          return false;
        }
        if (letter === "x") {
          t69$ = indx;
          t70$ = letter;
          dart.dsend(t69$, '_set', [t70$, dart.dsend(dart.dsend(t69$, '_get', [t70$]), '-', [1])]);
        } else {
          t69$0 = indx;
          t70$0 = letter;
          dart.dsend(t69$0, '_set', [t70$0, dart.dsend(dart.dsend(t69$0, '_get', [t70$0]), '+', [1])]);
        }
        dart.dsend(frct, '_set', [letter, 1]);
      }
    }
    return [indx, frct];
  };
  utils.phi2z = function phi2z(eccent, ts) {
    let eccnth = 0.5 * dart.notNull(eccent);
    let con = null;
    let dphi = null;
    let phi = dart.notNull(values.HALF_PI) - 2 * math.atan(ts);
    for (let i = 0; i <= 15; i = i + 1) {
      con = dart.notNull(eccent) * math.sin(phi);
      dphi = dart.notNull(values.HALF_PI) - 2 * math.atan(dart.notNull(ts) * math.pow((1 - dart.notNull(con)) / (1 + dart.notNull(con)), eccnth)) - phi;
      phi = phi + dart.notNull(dphi);
      if (dphi[$abs]() <= 1e-10) {
        return phi;
      }
    }
    return -9999.0;
  };
  utils.pj_enfn = function pj_enfn(es) {
    let C00 = 1.0;
    let C02 = 0.25;
    let C04 = 0.046875;
    let C06 = 0.01953125;
    let C08 = 0.01068115234375;
    let C22 = 0.75;
    let C44 = 0.46875;
    let C46 = 0.013020833333333334;
    let C48 = 0.007120768229166667;
    let C66 = 0.3645833333333333;
    let C68 = 0.005696614583333333;
    let C88 = 0.3076171875;
    let en = ListOfdoubleL().new(5);
    en[$_set](0, C00 - dart.notNull(es) * (C02 + dart.notNull(es) * (C04 + dart.notNull(es) * (C06 + dart.notNull(es) * C08))));
    en[$_set](1, dart.notNull(es) * (C22 - dart.notNull(es) * (C04 + dart.notNull(es) * (C06 + dart.notNull(es) * C08))));
    let t = dart.notNull(es) * dart.notNull(es);
    en[$_set](2, t * (C44 - dart.notNull(es) * (C46 + dart.notNull(es) * C48)));
    t = t * dart.notNull(es);
    en[$_set](3, t * (C66 - dart.notNull(es) * C68));
    en[$_set](4, t * dart.notNull(es) * C88);
    return en;
  };
  utils.pj_inv_mlfn = function pj_inv_mlfn(arg, es, en) {
    let MAX_ITER = 20;
    let k = 1 / (1 - dart.notNull(es));
    let phi = arg;
    for (let i = 0; i < MAX_ITER; i = i + 1) {
      let s = math.sin(phi);
      let t = 1 - dart.notNull(es) * s * s;
      t = (dart.notNull(utils.pj_mlfn(phi, s, math.cos(phi), en)) - dart.notNull(arg)) * (t * math.sqrt(t)) * k;
      phi = dart.notNull(phi) - t;
      if (t[$abs]() < dart.notNull(values.EPSLN)) {
        return phi;
      }
    }
    return phi;
  };
  utils.pj_mlfn = function pj_mlfn(phi, sphi, cphi, en) {
    cphi = dart.notNull(cphi) * dart.notNull(sphi);
    sphi = dart.notNull(sphi) * dart.notNull(sphi);
    return dart.notNull(en[$_get](0)) * dart.notNull(phi) - dart.notNull(cphi) * (dart.notNull(en[$_get](1)) + dart.notNull(sphi) * (dart.notNull(en[$_get](2)) + dart.notNull(sphi) * (dart.notNull(en[$_get](3)) + dart.notNull(sphi) * dart.notNull(en[$_get](4)))));
  };
  utils.qsfnz = function qsfnz(eccent, sinphi) {
    let con = null;
    if (dart.notNull(eccent) > 1e-7) {
      con = dart.notNull(eccent) * dart.notNull(sinphi);
      return (1 - dart.notNull(eccent) * dart.notNull(eccent)) * (dart.notNull(sinphi) / (1 - dart.notNull(con) * dart.notNull(con)) - 0.5 / dart.notNull(eccent) * math.log((1 - dart.notNull(con)) / (1 + dart.notNull(con))));
    } else {
      return 2 * dart.notNull(sinphi);
    }
  };
  utils.sign = function sign(x) {
    return dart.notNull(x) < 0 ? -1.0 : 1.0;
  };
  utils.sinh = function sinh(x) {
    let r = math.exp(x);
    r = (r - 1 / r) / 2;
    return r;
  };
  utils.srat = function srat(esinp, exp) {
    return math.pow((1 - dart.notNull(esinp)) / (1 + dart.notNull(esinp)), exp);
  };
  utils.tanh = function tanh(x) {
    let r = math.exp(x);
    r = (r - 1 / r) / (r + 1 / r);
    return r;
  };
  utils.toPoint = function toPoint(array) {
    let out = new point$.Point.new({x: array[$_get](0), y: array[$_get](1)});
    if (dart.notNull(array[$length]) > 2) {
      out.z = array[$_get](2);
    }
    if (dart.notNull(array[$length]) > 3) {
      out.m = array[$_get](3);
    }
    return out;
  };
  utils.tsfnz = function tsfnz(eccent, phi, sinphi) {
    let con = dart.notNull(eccent) * dart.notNull(sinphi);
    let com = 0.5 * dart.notNull(eccent);
    con = math.pow((1 - con) / (1 + con), com);
    return math.tan(0.5 * (dart.notNull(values.HALF_PI) - dart.notNull(phi))) / con;
  };
  utils.checkCoord = function checkCoord(coord) {
    if (coord != null && coord[$isFinite]) {
      return;
    }
    dart.throw(core.Exception.new("coordinates must be finite numbers"));
  };
  utils.checkSanity = function checkSanity(point) {
    utils.checkCoord(point.x);
    utils.checkCoord(point.y);
  };
  utils.adjust_axis = function adjust_axis(crs, denorm, point) {
    let t69;
    let xin = point.x;
    let yin = point.y;
    let zin = (t69 = point.z, t69 == null ? 0.0 : t69);
    let v = null;
    let t = null;
    let i = null;
    let pointString = "      {\n        \"x\": " + dart.str(point.x) + ", \n        \"y\": " + dart.str(point.y) + ", \n        \"z\": " + dart.str(point.z) + "\n      }\n    ";
    let pointObj = convert.jsonDecode(pointString);
    let outString = "      {\n        \"x\": null, \n        \"y\": null, \n        \"z\": null\n      }\n    ";
    let out = convert.jsonDecode(outString);
    for (let t69$ = i = 0; dart.dtest(dart.dsend(i, '<', [3])); i = dart.dsend(i, '+', [1])) {
      if (dart.test(denorm) && dart.equals(i, 2) && point.z == null) {
        continue;
      }
      if (dart.equals(i, 0)) {
        v = xin;
        if ("ew"[$contains](crs.axis[$_get](core.int.as(i)))) {
          t = "x";
        } else {
          t = "y";
        }
      } else if (dart.equals(i, 1)) {
        v = yin;
        if ("ns"[$contains](crs.axis[$_get](core.int.as(i)))) {
          t = "y";
        } else {
          t = "x";
        }
      } else {
        v = zin;
        t = "z";
      }
      switch (crs.axis[$_get](core.int.as(i))) {
        case "e":
        case "w":
        case "n":
        case "s":
        {
          dart.dsend(out, '_set', [t, v]);
          break;
        }
        case "u":
        {
          if (dart.dsend(pointObj, '_get', [t]) != null) {
            dart.dsend(out, '_set', ["z", v]);
          }
          break;
        }
        case "d":
        {
          if (dart.dsend(pointObj, '_get', [t]) != null) {
            dart.dsend(out, '_set', ["z", dart.dsend(v, '_negate', [])]);
          }
          break;
        }
        default:
        {
          return null;
        }
      }
    }
    return new point$.Point.withZ({x: doubleL().as(dart.dsend(out, '_get', ["x"])), y: doubleL().as(dart.dsend(out, '_get', ["y"])), z: doubleL().as(dart.dsend(out, '_get', ["z"]))});
  };
  dart.trackLibraries("packages/proj4dart/src/classes/projection_tuple.dart", {
    "package:proj4dart/src/classes/projection_tuple.dart": projection_tuple,
    "package:proj4dart/src/projections/vandg.dart": vandg,
    "package:proj4dart/src/projections/utm.dart": utm,
    "package:proj4dart/src/projections/tmerc.dart": tmerc,
    "package:proj4dart/src/projections/sterea.dart": sterea,
    "package:proj4dart/src/projections/stere.dart": stere,
    "package:proj4dart/src/projections/somerc.dart": somerc,
    "package:proj4dart/src/projections/sinu.dart": sinu,
    "package:proj4dart/src/projections/robin.dart": robin,
    "package:proj4dart/src/projections/qsc.dart": qsc,
    "package:proj4dart/src/projections/poly.dart": poly,
    "package:proj4dart/src/projections/ortho.dart": ortho,
    "package:proj4dart/src/projections/omerc.dart": omerc,
    "package:proj4dart/src/projections/nzmg.dart": nzmg,
    "package:proj4dart/src/projections/moll.dart": moll,
    "package:proj4dart/src/projections/mill.dart": mill,
    "package:proj4dart/src/projections/merc.dart": merc,
    "package:proj4dart/src/projections/longlat.dart": longlat,
    "package:proj4dart/src/projections/lcc.dart": lcc,
    "package:proj4dart/src/projections/laea.dart": laea,
    "package:proj4dart/src/projections/krovak.dart": krovak,
    "package:proj4dart/src/projections/gstmerc.dart": gstmerc,
    "package:proj4dart/src/projections/gnom.dart": gnom,
    "package:proj4dart/src/projections/geocent.dart": geocent,
    "package:proj4dart/src/projections/gauss.dart": gauss,
    "package:proj4dart/src/projections/etmerc.dart": etmerc,
    "package:proj4dart/src/projections/eqdc.dart": eqdc,
    "package:proj4dart/src/projections/eqc.dart": eqc,
    "package:proj4dart/src/projections/cea.dart": cea,
    "package:proj4dart/src/projections/cass.dart": cass,
    "package:proj4dart/src/projections/aeqd.dart": aeqd,
    "package:proj4dart/src/projections/aea.dart": aea,
    "package:proj4dart/src/constants/initializers.dart": initializers,
    "package:proj4dart/src/globals/projection_store.dart": projection_store,
    "package:proj4dart/src/common/utils.dart": utils,
    "package:proj4dart/src/classes/projection.dart": projection,
    "package:proj4dart/proj4dart.dart": proj4dart
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["projection_tuple.dart","projection.dart","../projections/vandg.dart","../projections/etmerc.dart","../projections/utm.dart","../projections/tmerc.dart","../projections/gauss.dart","../projections/sterea.dart","../projections/stere.dart","../projections/somerc.dart","../projections/sinu.dart","../projections/robin.dart","../projections/qsc.dart","../projections/poly.dart","../projections/ortho.dart","../projections/omerc.dart","../projections/nzmg.dart","../projections/moll.dart","../projections/mill.dart","../projections/merc.dart","../projections/longlat.dart","../projections/lcc.dart","../projections/laea.dart","../projections/krovak.dart","../projections/gstmerc.dart","../projections/gnom.dart","../projections/geocent.dart","../projections/eqdc.dart","../projections/eqc.dart","../projections/cea.dart","../projections/cass.dart","../projections/aeqd.dart","../projections/aea.dart","../constants/initializers.dart","../globals/projection_store.dart","../common/utils.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/proj4dart/src/classes/projection_tuple.dart.lib.js"}');
  // Exports:
  return {
    src__classes__projection_tuple: projection_tuple,
    src__projections__vandg: vandg,
    src__projections__utm: utm,
    src__projections__tmerc: tmerc,
    src__projections__sterea: sterea,
    src__projections__stere: stere,
    src__projections__somerc: somerc,
    src__projections__sinu: sinu,
    src__projections__robin: robin,
    src__projections__qsc: qsc,
    src__projections__poly: poly,
    src__projections__ortho: ortho,
    src__projections__omerc: omerc,
    src__projections__nzmg: nzmg,
    src__projections__moll: moll,
    src__projections__mill: mill,
    src__projections__merc: merc,
    src__projections__longlat: longlat,
    src__projections__lcc: lcc,
    src__projections__laea: laea,
    src__projections__krovak: krovak,
    src__projections__gstmerc: gstmerc,
    src__projections__gnom: gnom,
    src__projections__geocent: geocent,
    src__projections__gauss: gauss,
    src__projections__etmerc: etmerc,
    src__projections__eqdc: eqdc,
    src__projections__eqc: eqc,
    src__projections__cea: cea,
    src__projections__cass: cass,
    src__projections__aeqd: aeqd,
    src__projections__aea: aea,
    src__constants__initializers: initializers,
    src__globals__projection_store: projection_store,
    src__common__utils: utils,
    src__classes__projection: projection,
    proj4dart: proj4dart
  };
}));

//# sourceMappingURL=projection_tuple.dart.lib.js.map
