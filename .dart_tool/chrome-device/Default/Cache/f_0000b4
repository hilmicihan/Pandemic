define(['dart_sdk', 'packages/flutter/src/material/colors.dart', 'packages/fl_chart/src/utils/utils.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/equatable/src/equatable_mixin.dart', 'packages/fl_chart/src/chart/base/base_chart/touch_input.dart', 'packages/flutter/src/widgets/implicit_animations.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/gestures/velocity_tracker.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/rendering/custom_layout.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/colors.dart', 'packages/fl_chart/src/extensions/color_extension.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/fl_chart/src/extensions/path_extension.dart', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/border_radius.dart'], (function load__packages__fl_chart__src__chart__scatter_chart__scatter_chart_painter_dart(dart_sdk, packages__flutter__src__material__colors$46dart, packages__fl_chart__src__utils__utils$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__equatable__src__equatable_mixin$46dart, packages__fl_chart__src__chart__base__base_chart__touch_input$46dart, packages__flutter__src__widgets__implicit_animations$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__gestures__velocity_tracker$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__rendering__custom_layout$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__colors$46dart, packages__fl_chart__src__extensions__color_extension$46dart, packages__flutter__src__painting__alignment$46dart, packages__fl_chart__src__extensions__path_extension$46dart, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__border_radius$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const colors$ = packages__flutter__src__material__colors$46dart.src__material__colors;
  const utils = packages__fl_chart__src__utils__utils$46dart.src__utils__utils;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const equatable_mixin = packages__equatable__src__equatable_mixin$46dart.src__equatable_mixin;
  const touch_input = packages__fl_chart__src__chart__base__base_chart__touch_input$46dart.src__chart__base__base_chart__touch_input;
  const implicit_animations = packages__flutter__src__widgets__implicit_animations$46dart.src__widgets__implicit_animations;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const binding = packages__flutter__src__widgets__widget_span$46dart.src__widgets__binding;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const velocity_tracker = packages__flutter__src__gestures__velocity_tracker$46dart.src__gestures__velocity_tracker;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const custom_layout = packages__flutter__src__rendering__custom_layout$46dart.src__rendering__custom_layout;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const color_extension = packages__fl_chart__src__extensions__color_extension$46dart.src__extensions__color_extension;
  const alignment$ = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const path_extension = packages__fl_chart__src__extensions__path_extension$46dart.src__extensions__path_extension;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  var scatter_chart_painter = Object.create(dart.library);
  var scatter_chart = Object.create(dart.library);
  var pie_chart_data = Object.create(dart.library);
  var pie_chart_painter = Object.create(dart.library);
  var pie_chart = Object.create(dart.library);
  var scatter_chart_data = Object.create(dart.library);
  var lerp = Object.create(dart.library);
  var line_chart = Object.create(dart.library);
  var line_chart_data = Object.create(dart.library);
  var canvas_extension = Object.create(dart.library);
  var line_chart_painter = Object.create(dart.library);
  var base_chart_data = Object.create(dart.library);
  var canvas_wrapper = Object.create(dart.library);
  var base_chart_painter = Object.create(dart.library);
  var axis_chart_painter = Object.create(dart.library);
  var axis_chart_data = Object.create(dart.library);
  var bar_chart_data = Object.create(dart.library);
  var bar_chart_painter = Object.create(dart.library);
  var bar_chart = Object.create(dart.library);
  var fl_chart = Object.create(dart.library);
  var $length = dartx.length;
  var $contains = dartx.contains;
  var $_get = dartx._get;
  var $abs = dartx.abs;
  var $truncate = dartx.truncate;
  var $isNotEmpty = dartx.isNotEmpty;
  var $map = dartx.map;
  var $reduce = dartx.reduce;
  var $toString = dartx.toString;
  var $isEmpty = dartx.isEmpty;
  var $toList = dartx.toList;
  var $asMap = dartx.asMap;
  var $forEach = dartx.forEach;
  var $isInfinite = dartx.isInfinite;
  var $modulo = dartx['%'];
  var $_set = dartx._set;
  var $keys = dartx.keys;
  var $elementAt = dartx.elementAt;
  var $toInt = dartx.toInt;
  var $round = dartx.round;
  var $indexOf = dartx.indexOf;
  var $compareTo = dartx.compareTo;
  var $sort = dartx.sort;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $toStringAsFixed = dartx.toStringAsFixed;
  var $last = dartx.last;
  var $removeLast = dartx.removeLast;
  var $reversed = dartx.reversed;
  var $addAll = dartx.addAll;
  var $toDouble = dartx.toDouble;
  dart._checkModuleNullSafetyMode(false);
  var T$ = Object.create({
    ScatterChartPainterL: () => (T$.ScatterChartPainterL = dart.constFn(dart.legacy(scatter_chart_painter.ScatterChartPainter)))(),
    ScatterSpotL: () => (T$.ScatterSpotL = dart.constFn(dart.legacy(scatter_chart_data.ScatterSpot)))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    ScatterChartDataL: () => (T$.ScatterChartDataL = dart.constFn(dart.legacy(scatter_chart_data.ScatterChartData)))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    JSArrayOfObjectL: () => (T$.JSArrayOfObjectL = dart.constFn(_interceptors.JSArray$(T$.ObjectL())))(),
    StatefulWidgetL: () => (T$.StatefulWidgetL = dart.constFn(dart.legacy(framework.StatefulWidget)))(),
    StateOfStatefulWidgetL: () => (T$.StateOfStatefulWidgetL = dart.constFn(framework.State$(T$.StatefulWidgetL())))(),
    StateLOfStatefulWidgetL: () => (T$.StateLOfStatefulWidgetL = dart.constFn(dart.legacy(T$.StateOfStatefulWidgetL())))(),
    GlobalKeyOfStateLOfStatefulWidgetL: () => (T$.GlobalKeyOfStateLOfStatefulWidgetL = dart.constFn(framework.GlobalKey$(T$.StateLOfStatefulWidgetL())))(),
    JSArrayOfintL: () => (T$.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T$.intL())))(),
    LongPressStartDetailsL: () => (T$.LongPressStartDetailsL = dart.constFn(dart.legacy(long_press.LongPressStartDetails)))(),
    LongPressStartDetailsLToNull: () => (T$.LongPressStartDetailsLToNull = dart.constFn(dart.fnType(core.Null, [T$.LongPressStartDetailsL()])))(),
    LongPressEndDetailsL: () => (T$.LongPressEndDetailsL = dart.constFn(dart.legacy(long_press.LongPressEndDetails)))(),
    LongPressEndDetailsLToNull: () => (T$.LongPressEndDetailsLToNull = dart.constFn(dart.fnType(core.Null, [T$.LongPressEndDetailsL()])))(),
    LongPressMoveUpdateDetailsL: () => (T$.LongPressMoveUpdateDetailsL = dart.constFn(dart.legacy(long_press.LongPressMoveUpdateDetails)))(),
    LongPressMoveUpdateDetailsLToNull: () => (T$.LongPressMoveUpdateDetailsLToNull = dart.constFn(dart.fnType(core.Null, [T$.LongPressMoveUpdateDetailsL()])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    DragEndDetailsL: () => (T$.DragEndDetailsL = dart.constFn(dart.legacy(drag_details.DragEndDetails)))(),
    DragEndDetailsLToNull: () => (T$.DragEndDetailsLToNull = dart.constFn(dart.fnType(core.Null, [T$.DragEndDetailsL()])))(),
    DragDownDetailsL: () => (T$.DragDownDetailsL = dart.constFn(dart.legacy(drag_details.DragDownDetails)))(),
    DragDownDetailsLToNull: () => (T$.DragDownDetailsLToNull = dart.constFn(dart.fnType(core.Null, [T$.DragDownDetailsL()])))(),
    DragUpdateDetailsL: () => (T$.DragUpdateDetailsL = dart.constFn(dart.legacy(drag_details.DragUpdateDetails)))(),
    DragUpdateDetailsLToNull: () => (T$.DragUpdateDetailsLToNull = dart.constFn(dart.fnType(core.Null, [T$.DragUpdateDetailsL()])))(),
    ScatterTouchResponseL: () => (T$.ScatterTouchResponseL = dart.constFn(dart.legacy(scatter_chart_data.ScatterTouchResponse)))(),
    TouchHandlerOfScatterTouchResponseL: () => (T$.TouchHandlerOfScatterTouchResponseL = dart.constFn(base_chart_painter.TouchHandler$(T$.ScatterTouchResponseL())))(),
    TouchHandlerLOfScatterTouchResponseL: () => (T$.TouchHandlerLOfScatterTouchResponseL = dart.constFn(dart.legacy(T$.TouchHandlerOfScatterTouchResponseL())))(),
    BaseTouchResponseL: () => (T$.BaseTouchResponseL = dart.constFn(dart.legacy(base_chart_data.BaseTouchResponse)))(),
    TouchHandlerOfBaseTouchResponseL: () => (T$.TouchHandlerOfBaseTouchResponseL = dart.constFn(base_chart_painter.TouchHandler$(T$.BaseTouchResponseL())))(),
    TouchHandlerLOfBaseTouchResponseL: () => (T$.TouchHandlerLOfBaseTouchResponseL = dart.constFn(dart.legacy(T$.TouchHandlerOfBaseTouchResponseL())))(),
    TouchHandlerLOfBaseTouchResponseLToNull: () => (T$.TouchHandlerLOfBaseTouchResponseLToNull = dart.constFn(dart.fnType(core.Null, [T$.TouchHandlerLOfBaseTouchResponseL()])))(),
    _LocationL: () => (T$._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    RenderBoxL: () => (T$.RenderBoxL = dart.constFn(dart.legacy(box.RenderBox)))(),
    FlPanStartL: () => (T$.FlPanStartL = dart.constFn(dart.legacy(touch_input.FlPanStart)))(),
    FlPanMoveUpdateL: () => (T$.FlPanMoveUpdateL = dart.constFn(dart.legacy(touch_input.FlPanMoveUpdate)))(),
    FlLongPressStartL: () => (T$.FlLongPressStartL = dart.constFn(dart.legacy(touch_input.FlLongPressStart)))(),
    FlLongPressMoveUpdateL: () => (T$.FlLongPressMoveUpdateL = dart.constFn(dart.legacy(touch_input.FlLongPressMoveUpdate)))(),
    ScatterChartDataTweenL: () => (T$.ScatterChartDataTweenL = dart.constFn(dart.legacy(scatter_chart_data.ScatterChartDataTween)))(),
    dynamicToScatterChartDataTweenL: () => (T$.dynamicToScatterChartDataTweenL = dart.constFn(dart.fnType(T$.ScatterChartDataTweenL(), [dart.dynamic])))(),
    PieChartSectionDataL: () => (T$.PieChartSectionDataL = dart.constFn(dart.legacy(pie_chart_data.PieChartSectionData)))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    PieChartSectionDataLTodoubleL: () => (T$.PieChartSectionDataLTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [T$.PieChartSectionDataL()])))(),
    doubleLAnddoubleLTodoubleL: () => (T$.doubleLAnddoubleLTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [T$.doubleL(), T$.doubleL()])))(),
    PieChartDataL: () => (T$.PieChartDataL = dart.constFn(dart.legacy(pie_chart_data.PieChartData)))(),
    intLAndPieChartSectionDataLToNull: () => (T$.intLAndPieChartSectionDataLToNull = dart.constFn(dart.fnType(core.Null, [T$.intL(), T$.PieChartSectionDataL()])))(),
    OffsetL: () => (T$.OffsetL = dart.constFn(dart.legacy(ui.Offset)))(),
    doubleLToOffsetL: () => (T$.doubleLToOffsetL = dart.constFn(dart.fnType(T$.OffsetL(), [T$.doubleL()])))(),
    IdentityMapOfintL$OffsetL: () => (T$.IdentityMapOfintL$OffsetL = dart.constFn(_js_helper.IdentityMap$(T$.intL(), T$.OffsetL())))(),
    PieChartPainterL: () => (T$.PieChartPainterL = dart.constFn(dart.legacy(pie_chart_painter.PieChartPainter)))(),
    DurationL: () => (T$.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    DurationLToNull: () => (T$.DurationLToNull = dart.constFn(dart.fnType(core.Null, [T$.DurationL()])))(),
    PieTouchResponseL: () => (T$.PieTouchResponseL = dart.constFn(dart.legacy(pie_chart_data.PieTouchResponse)))(),
    PieChartWidgetsPositionHandlerL: () => (T$.PieChartWidgetsPositionHandlerL = dart.constFn(dart.legacy(pie_chart_painter.PieChartWidgetsPositionHandler)))(),
    PieChartWidgetsPositionHandlerLToNull: () => (T$.PieChartWidgetsPositionHandlerLToNull = dart.constFn(dart.fnType(core.Null, [T$.PieChartWidgetsPositionHandlerL()])))(),
    WidgetL: () => (T$.WidgetL = dart.constFn(dart.legacy(framework.Widget)))(),
    ListOfWidgetL: () => (T$.ListOfWidgetL = dart.constFn(core.List$(T$.WidgetL())))(),
    LayoutIdL: () => (T$.LayoutIdL = dart.constFn(dart.legacy(basic.LayoutId)))(),
    intLToLayoutIdL: () => (T$.intLToLayoutIdL = dart.constFn(dart.fnType(T$.LayoutIdL(), [T$.intL()])))(),
    PieChartDataTweenL: () => (T$.PieChartDataTweenL = dart.constFn(dart.legacy(pie_chart_data.PieChartDataTween)))(),
    dynamicToPieChartDataTweenL: () => (T$.dynamicToPieChartDataTweenL = dart.constFn(dart.fnType(T$.PieChartDataTweenL(), [dart.dynamic])))(),
    BadgeWidgetsDelegateL: () => (T$.BadgeWidgetsDelegateL = dart.constFn(dart.legacy(pie_chart.BadgeWidgetsDelegate)))(),
    ScatterTouchTooltipDataL: () => (T$.ScatterTouchTooltipDataL = dart.constFn(dart.legacy(scatter_chart_data.ScatterTouchTooltipData)))(),
    ScatterTooltipItemL: () => (T$.ScatterTooltipItemL = dart.constFn(dart.legacy(scatter_chart_data.ScatterTooltipItem)))(),
    ScatterSpotLToScatterTooltipItemL: () => (T$.ScatterSpotLToScatterTooltipItemL = dart.constFn(dart.fnType(T$.ScatterTooltipItemL(), [T$.ScatterSpotL()])))(),
    ColorL: () => (T$.ColorL = dart.constFn(dart.legacy(ui.Color)))(),
    ColorN: () => (T$.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    ColorNAndColorNAnddoubleToColorN: () => (T$.ColorNAndColorNAnddoubleToColorN = dart.constFn(dart.fnType(T$.ColorN(), [T$.ColorN(), T$.ColorN(), core.double])))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    numN: () => (T$.numN = dart.constFn(dart.nullable(core.num)))(),
    numNAndnumNAnddoubleTodoubleN: () => (T$.numNAndnumNAnddoubleTodoubleN = dart.constFn(dart.fnType(T$.doubleN(), [T$.numN(), T$.numN(), core.double])))(),
    intLAndintLAnddoubleLTointL: () => (T$.intLAndintLAnddoubleLTointL = dart.constFn(dart.fnType(T$.intL(), [T$.intL(), T$.intL(), T$.doubleL()])))(),
    FlSpotL: () => (T$.FlSpotL = dart.constFn(dart.legacy(axis_chart_data.FlSpot)))(),
    FlSpotLAndFlSpotLAnddoubleLToFlSpotL: () => (T$.FlSpotLAndFlSpotLAnddoubleLToFlSpotL = dart.constFn(dart.fnType(T$.FlSpotL(), [T$.FlSpotL(), T$.FlSpotL(), T$.doubleL()])))(),
    HorizontalLineL: () => (T$.HorizontalLineL = dart.constFn(dart.legacy(line_chart_data.HorizontalLine)))(),
    HorizontalLineLAndHorizontalLineLAnddoubleLToHorizontalLineL: () => (T$.HorizontalLineLAndHorizontalLineLAnddoubleLToHorizontalLineL = dart.constFn(dart.fnType(T$.HorizontalLineL(), [T$.HorizontalLineL(), T$.HorizontalLineL(), T$.doubleL()])))(),
    VerticalLineL: () => (T$.VerticalLineL = dart.constFn(dart.legacy(line_chart_data.VerticalLine)))(),
    VerticalLineLAndVerticalLineLAnddoubleLToVerticalLineL: () => (T$.VerticalLineLAndVerticalLineLAnddoubleLToVerticalLineL = dart.constFn(dart.fnType(T$.VerticalLineL(), [T$.VerticalLineL(), T$.VerticalLineL(), T$.doubleL()])))(),
    HorizontalRangeAnnotationL: () => (T$.HorizontalRangeAnnotationL = dart.constFn(dart.legacy(axis_chart_data.HorizontalRangeAnnotation)))(),
    HorizontalRangeAnnotationLAndHorizontalRangeAnnotationLAnddoubleLToHorizontalRangeAnnotationL: () => (T$.HorizontalRangeAnnotationLAndHorizontalRangeAnnotationLAnddoubleLToHorizontalRangeAnnotationL = dart.constFn(dart.fnType(T$.HorizontalRangeAnnotationL(), [T$.HorizontalRangeAnnotationL(), T$.HorizontalRangeAnnotationL(), T$.doubleL()])))(),
    VerticalRangeAnnotationL: () => (T$.VerticalRangeAnnotationL = dart.constFn(dart.legacy(axis_chart_data.VerticalRangeAnnotation)))(),
    VerticalRangeAnnotationLAndVerticalRangeAnnotationLAnddoubleLToVerticalRangeAnnotationL: () => (T$.VerticalRangeAnnotationLAndVerticalRangeAnnotationLAnddoubleLToVerticalRangeAnnotationL = dart.constFn(dart.fnType(T$.VerticalRangeAnnotationL(), [T$.VerticalRangeAnnotationL(), T$.VerticalRangeAnnotationL(), T$.doubleL()])))(),
    LineChartBarDataL: () => (T$.LineChartBarDataL = dart.constFn(dart.legacy(line_chart_data.LineChartBarData)))(),
    LineChartBarDataLAndLineChartBarDataLAnddoubleLToLineChartBarDataL: () => (T$.LineChartBarDataLAndLineChartBarDataLAnddoubleLToLineChartBarDataL = dart.constFn(dart.fnType(T$.LineChartBarDataL(), [T$.LineChartBarDataL(), T$.LineChartBarDataL(), T$.doubleL()])))(),
    BetweenBarsDataL: () => (T$.BetweenBarsDataL = dart.constFn(dart.legacy(line_chart_data.BetweenBarsData)))(),
    BetweenBarsDataLAndBetweenBarsDataLAnddoubleLToBetweenBarsDataL: () => (T$.BetweenBarsDataLAndBetweenBarsDataLAnddoubleLToBetweenBarsDataL = dart.constFn(dart.fnType(T$.BetweenBarsDataL(), [T$.BetweenBarsDataL(), T$.BetweenBarsDataL(), T$.doubleL()])))(),
    BarChartGroupDataL: () => (T$.BarChartGroupDataL = dart.constFn(dart.legacy(bar_chart_data.BarChartGroupData)))(),
    BarChartGroupDataLAndBarChartGroupDataLAnddoubleLToBarChartGroupDataL: () => (T$.BarChartGroupDataLAndBarChartGroupDataLAnddoubleLToBarChartGroupDataL = dart.constFn(dart.fnType(T$.BarChartGroupDataL(), [T$.BarChartGroupDataL(), T$.BarChartGroupDataL(), T$.doubleL()])))(),
    BarChartRodDataL: () => (T$.BarChartRodDataL = dart.constFn(dart.legacy(bar_chart_data.BarChartRodData)))(),
    BarChartRodDataLAndBarChartRodDataLAnddoubleLToBarChartRodDataL: () => (T$.BarChartRodDataLAndBarChartRodDataLAnddoubleLToBarChartRodDataL = dart.constFn(dart.fnType(T$.BarChartRodDataL(), [T$.BarChartRodDataL(), T$.BarChartRodDataL(), T$.doubleL()])))(),
    PieChartSectionDataLAndPieChartSectionDataLAnddoubleLToPieChartSectionDataL: () => (T$.PieChartSectionDataLAndPieChartSectionDataLAnddoubleLToPieChartSectionDataL = dart.constFn(dart.fnType(T$.PieChartSectionDataL(), [T$.PieChartSectionDataL(), T$.PieChartSectionDataL(), T$.doubleL()])))(),
    ScatterSpotLAndScatterSpotLAnddoubleLToScatterSpotL: () => (T$.ScatterSpotLAndScatterSpotLAnddoubleLToScatterSpotL = dart.constFn(dart.fnType(T$.ScatterSpotL(), [T$.ScatterSpotL(), T$.ScatterSpotL(), T$.doubleL()])))(),
    BarChartRodStackItemL: () => (T$.BarChartRodStackItemL = dart.constFn(dart.legacy(bar_chart_data.BarChartRodStackItem)))(),
    BarChartRodStackItemLAndBarChartRodStackItemLAnddoubleLToBarChartRodStackItemL: () => (T$.BarChartRodStackItemLAndBarChartRodStackItemLAnddoubleLToBarChartRodStackItemL = dart.constFn(dart.fnType(T$.BarChartRodStackItemL(), [T$.BarChartRodStackItemL(), T$.BarChartRodStackItemL(), T$.doubleL()])))(),
    ShowingTooltipIndicatorsL: () => (T$.ShowingTooltipIndicatorsL = dart.constFn(dart.legacy(line_chart_data.ShowingTooltipIndicators)))(),
    JSArrayOfShowingTooltipIndicatorsL: () => (T$.JSArrayOfShowingTooltipIndicatorsL = dart.constFn(_interceptors.JSArray$(T$.ShowingTooltipIndicatorsL())))(),
    ListOfintL: () => (T$.ListOfintL = dart.constFn(core.List$(T$.intL())))(),
    ListLOfintL: () => (T$.ListLOfintL = dart.constFn(dart.legacy(T$.ListOfintL())))(),
    IdentityMapOfintL$ListLOfintL: () => (T$.IdentityMapOfintL$ListLOfintL = dart.constFn(_js_helper.IdentityMap$(T$.intL(), T$.ListLOfintL())))(),
    LineTouchResponseL: () => (T$.LineTouchResponseL = dart.constFn(dart.legacy(line_chart_data.LineTouchResponse)))(),
    LineChartBarDataLToLineChartBarDataL: () => (T$.LineChartBarDataLToLineChartBarDataL = dart.constFn(dart.fnType(T$.LineChartBarDataL(), [T$.LineChartBarDataL()])))(),
    LineBarSpotL: () => (T$.LineBarSpotL = dart.constFn(dart.legacy(line_chart_data.LineBarSpot)))(),
    ListOfLineBarSpotL: () => (T$.ListOfLineBarSpotL = dart.constFn(core.List$(T$.LineBarSpotL())))(),
    LineBarSpotLAndLineBarSpotLTointL: () => (T$.LineBarSpotLAndLineBarSpotLTointL = dart.constFn(dart.fnType(T$.intL(), [T$.LineBarSpotL(), T$.LineBarSpotL()])))(),
    LineChartDataL: () => (T$.LineChartDataL = dart.constFn(dart.legacy(line_chart_data.LineChartData)))(),
    LineChartDataTweenL: () => (T$.LineChartDataTweenL = dart.constFn(dart.legacy(line_chart_data.LineChartDataTween)))(),
    dynamicToLineChartDataTweenL: () => (T$.dynamicToLineChartDataTweenL = dart.constFn(dart.fnType(T$.LineChartDataTweenL(), [dart.dynamic])))(),
    JSArrayOfColorL: () => (T$.JSArrayOfColorL = dart.constFn(_interceptors.JSArray$(T$.ColorL())))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    FlSpotLToboolL: () => (T$.FlSpotLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.FlSpotL()])))(),
    FlSpotLAndLineChartBarDataLToboolL: () => (T$.FlSpotLAndLineChartBarDataLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.FlSpotL(), T$.LineChartBarDataL()])))(),
    FlDotPainterL: () => (T$.FlDotPainterL = dart.constFn(dart.legacy(line_chart_data.FlDotPainter)))(),
    FlSpotLAnddoubleLAndLineChartBarDataL__ToFlDotPainterL: () => (T$.FlSpotLAnddoubleLAndLineChartBarDataL__ToFlDotPainterL = dart.constFn(dart.fnType(T$.FlDotPainterL(), [T$.FlSpotL(), T$.doubleL(), T$.LineChartBarDataL(), T$.intL()], {size: T$.doubleL()}, {})))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    HorizontalLineLToStringL: () => (T$.HorizontalLineLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.HorizontalLineL()])))(),
    EdgeInsetsN: () => (T$.EdgeInsetsN = dart.constFn(dart.nullable(edge_insets.EdgeInsets)))(),
    VerticalLineLToStringL: () => (T$.VerticalLineLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.VerticalLineL()])))(),
    TouchedSpotIndicatorDataL: () => (T$.TouchedSpotIndicatorDataL = dart.constFn(dart.legacy(line_chart_data.TouchedSpotIndicatorData)))(),
    ListOfTouchedSpotIndicatorDataL: () => (T$.ListOfTouchedSpotIndicatorDataL = dart.constFn(core.List$(T$.TouchedSpotIndicatorDataL())))(),
    ListLOfTouchedSpotIndicatorDataL: () => (T$.ListLOfTouchedSpotIndicatorDataL = dart.constFn(dart.legacy(T$.ListOfTouchedSpotIndicatorDataL())))(),
    LineChartBarDataLAndListLOfintLToListLOfTouchedSpotIndicatorDataL: () => (T$.LineChartBarDataLAndListLOfintLToListLOfTouchedSpotIndicatorDataL = dart.constFn(dart.fnType(T$.ListLOfTouchedSpotIndicatorDataL(), [T$.LineChartBarDataL(), T$.ListLOfintL()])))(),
    LineTooltipItemL: () => (T$.LineTooltipItemL = dart.constFn(dart.legacy(line_chart_data.LineTooltipItem)))(),
    ListOfLineTooltipItemL: () => (T$.ListOfLineTooltipItemL = dart.constFn(core.List$(T$.LineTooltipItemL())))(),
    ListLOfLineTooltipItemL: () => (T$.ListLOfLineTooltipItemL = dart.constFn(dart.legacy(T$.ListOfLineTooltipItemL())))(),
    ListLOfLineBarSpotL: () => (T$.ListLOfLineBarSpotL = dart.constFn(dart.legacy(T$.ListOfLineBarSpotL())))(),
    ListLOfLineBarSpotLToListLOfLineTooltipItemL: () => (T$.ListLOfLineBarSpotLToListLOfLineTooltipItemL = dart.constFn(dart.fnType(T$.ListLOfLineTooltipItemL(), [T$.ListLOfLineBarSpotL()])))(),
    JSArrayOfTouchedSpotIndicatorDataL: () => (T$.JSArrayOfTouchedSpotIndicatorDataL = dart.constFn(_interceptors.JSArray$(T$.TouchedSpotIndicatorDataL())))(),
    FlSpotLAnddoubleLAndLineChartBarDataL__ToFlDotPainterL$1: () => (T$.FlSpotLAnddoubleLAndLineChartBarDataL__ToFlDotPainterL$1 = dart.constFn(dart.fnType(T$.FlDotPainterL(), [T$.FlSpotL(), T$.doubleL(), T$.LineChartBarDataL(), T$.intL()])))(),
    intLToTouchedSpotIndicatorDataL: () => (T$.intLToTouchedSpotIndicatorDataL = dart.constFn(dart.fnType(T$.TouchedSpotIndicatorDataL(), [T$.intL()])))(),
    LineBarSpotLToLineTooltipItemL: () => (T$.LineBarSpotLToLineTooltipItemL = dart.constFn(dart.fnType(T$.LineTooltipItemL(), [T$.LineBarSpotL()])))(),
    PaintL: () => (T$.PaintL = dart.constFn(dart.legacy(ui.Paint)))(),
    OffsetLAndOffsetLAndPaintL__Tovoid: () => (T$.OffsetLAndOffsetLAndPaintL__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.OffsetL(), T$.OffsetL(), T$.PaintL(), T$.ListLOfintL()])))(),
    JSArrayOfFlSpotL: () => (T$.JSArrayOfFlSpotL = dart.constFn(_interceptors.JSArray$(T$.FlSpotL())))(),
    ListOfFlSpotL: () => (T$.ListOfFlSpotL = dart.constFn(core.List$(T$.FlSpotL())))(),
    ListLOfFlSpotL: () => (T$.ListLOfFlSpotL = dart.constFn(dart.legacy(T$.ListOfFlSpotL())))(),
    JSArrayOfListLOfFlSpotL: () => (T$.JSArrayOfListLOfFlSpotL = dart.constFn(_interceptors.JSArray$(T$.ListLOfFlSpotL())))(),
    JSArrayOfdoubleL: () => (T$.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T$.doubleL())))(),
    intLAndColorLToNull: () => (T$.intLAndColorLToNull = dart.constFn(dart.fnType(core.Null, [T$.intL(), T$.ColorL()])))(),
    EdgeInsetsL: () => (T$.EdgeInsetsL = dart.constFn(dart.legacy(edge_insets.EdgeInsets)))(),
    TextPainterL: () => (T$.TextPainterL = dart.constFn(dart.legacy(text_painter.TextPainter)))(),
    JSArrayOfTextPainterL: () => (T$.JSArrayOfTextPainterL = dart.constFn(_interceptors.JSArray$(T$.TextPainterL())))(),
    JSArrayOfLineBarSpotL: () => (T$.JSArrayOfLineBarSpotL = dart.constFn(_interceptors.JSArray$(T$.LineBarSpotL())))(),
    LineChartPainterL: () => (T$.LineChartPainterL = dart.constFn(dart.legacy(line_chart_painter.LineChartPainter)))(),
    doubleLToStringL: () => (T$.doubleLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.doubleL()])))(),
    TextStyleL: () => (T$.TextStyleL = dart.constFn(dart.legacy(text_style.TextStyle)))(),
    doubleLToTextStyleL: () => (T$.doubleLToTextStyleL = dart.constFn(dart.fnType(T$.TextStyleL(), [T$.doubleL()])))(),
    SideTitlesL: () => (T$.SideTitlesL = dart.constFn(dart.legacy(axis_chart_data.SideTitles)))(),
    doubleLAnddoubleLAndSideTitlesL__ToboolL: () => (T$.doubleLAnddoubleLAndSideTitlesL__ToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.doubleL(), T$.doubleL(), T$.SideTitlesL(), T$.doubleL(), T$.doubleL()])))(),
    FlLineL: () => (T$.FlLineL = dart.constFn(dart.legacy(axis_chart_data.FlLine)))(),
    doubleLToFlLineL: () => (T$.doubleLToFlLineL = dart.constFn(dart.fnType(T$.FlLineL(), [T$.doubleL()])))(),
    doubleLToboolL: () => (T$.doubleLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.doubleL()])))(),
    BarChartDataL: () => (T$.BarChartDataL = dart.constFn(dart.legacy(bar_chart_data.BarChartData)))(),
    BarChartAlignmentL: () => (T$.BarChartAlignmentL = dart.constFn(dart.legacy(bar_chart_data.BarChartAlignment)))(),
    BarChartRodDataLTodoubleL: () => (T$.BarChartRodDataLTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [T$.BarChartRodDataL()])))(),
    BorderRadiusL: () => (T$.BorderRadiusL = dart.constFn(dart.legacy(border_radius.BorderRadius)))(),
    BarTooltipItemL: () => (T$.BarTooltipItemL = dart.constFn(dart.legacy(bar_chart_data.BarTooltipItem)))(),
    BarChartGroupDataLAndintLAndBarChartRodDataL__ToBarTooltipItemL: () => (T$.BarChartGroupDataLAndintLAndBarChartRodDataL__ToBarTooltipItemL = dart.constFn(dart.fnType(T$.BarTooltipItemL(), [T$.BarChartGroupDataL(), T$.intL(), T$.BarChartRodDataL(), T$.intL()])))(),
    ListOfdoubleL: () => (T$.ListOfdoubleL = dart.constFn(core.List$(T$.doubleL())))(),
    intLAndBarChartGroupDataLToNull: () => (T$.intLAndBarChartGroupDataLToNull = dart.constFn(dart.fnType(core.Null, [T$.intL(), T$.BarChartGroupDataL()])))(),
    BarChartGroupDataLTodoubleL: () => (T$.BarChartGroupDataLTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [T$.BarChartGroupDataL()])))(),
    _GroupBarsPositionL: () => (T$._GroupBarsPositionL = dart.constFn(dart.legacy(bar_chart_painter._GroupBarsPosition)))(),
    JSArrayOf_GroupBarsPositionL: () => (T$.JSArrayOf_GroupBarsPositionL = dart.constFn(_interceptors.JSArray$(T$._GroupBarsPositionL())))(),
    intLAndBarChartRodDataLToNull: () => (T$.intLAndBarChartRodDataLToNull = dart.constFn(dart.fnType(core.Null, [T$.intL(), T$.BarChartRodDataL()])))(),
    numL: () => (T$.numL = dart.constFn(dart.legacy(core.num)))(),
    BarChartPainterL: () => (T$.BarChartPainterL = dart.constFn(dart.legacy(bar_chart_painter.BarChartPainter)))(),
    BarTouchResponseL: () => (T$.BarTouchResponseL = dart.constFn(dart.legacy(bar_chart_data.BarTouchResponse)))(),
    JSArrayOfBarChartGroupDataL: () => (T$.JSArrayOfBarChartGroupDataL = dart.constFn(_interceptors.JSArray$(T$.BarChartGroupDataL())))(),
    BarChartDataTweenL: () => (T$.BarChartDataTweenL = dart.constFn(dart.legacy(bar_chart_data.BarChartDataTween)))(),
    dynamicToBarChartDataTweenL: () => (T$.dynamicToBarChartDataTweenL = dart.constFn(dart.fnType(T$.BarChartDataTweenL(), [dart.dynamic])))()
  });
  const CT = Object.create(null);
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], T$.ScatterSpotL());
    },
    get C1() {
      return C[1] = dart.constList([], T$.intL());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 150000
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: velocity_tracker.Velocity.prototype,
        [Velocity_pixelsPerSecond]: C[4] || CT.C4
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 129,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 9,
        [_Location_line]: 130,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 9,
        [_Location_line]: 131,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.constList([C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9], T$._LocationL());
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[6] || CT.C6,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 128,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/scatter_chart/scatter_chart.dart"
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressStart",
        [_Location_column]: 7,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressEnd",
        [_Location_column]: 7,
        [_Location_line]: 56,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressMoveUpdate",
        [_Location_column]: 7,
        [_Location_line]: 68,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanCancel",
        [_Location_column]: 7,
        [_Location_line]: 80,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanEnd",
        [_Location_column]: 7,
        [_Location_line]: 92,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanDown",
        [_Location_column]: 7,
        [_Location_line]: 104,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanUpdate",
        [_Location_column]: 7,
        [_Location_line]: 116,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 128,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.constList([C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19], T$._LocationL());
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[11] || CT.C11,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 43,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/scatter_chart/scatter_chart.dart"
      });
    },
    get C20() {
      return C[20] = dart.constList([], T$.PieChartSectionDataL());
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [FontWeight_index]: 6
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[22] || CT.C22,
        [TextStyle_fontSize]: 16,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[23] || CT.C23,
        [TextStyle_inherit]: true
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 148,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 9,
        [_Location_line]: 149,
        [_Location_file]: null
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 9,
        [_Location_line]: 150,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 165,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.constList([C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30], T$._LocationL());
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[26] || CT.C26,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 147,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressStart",
        [_Location_column]: 7,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressEnd",
        [_Location_column]: 7,
        [_Location_line]: 75,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressMoveUpdate",
        [_Location_column]: 7,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanCancel",
        [_Location_column]: 7,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanEnd",
        [_Location_column]: 7,
        [_Location_line]: 111,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanDown",
        [_Location_column]: 7,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanUpdate",
        [_Location_column]: 7,
        [_Location_line]: 135,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 147,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.constList([C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40], T$._LocationL());
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[32] || CT.C32,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 63,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C42() {
      return C[42] = dart.constList([], T$._LocationL());
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[42] || CT.C42,
        [_Location_name]: null,
        [_Location_column]: 26,
        [_Location_line]: 188,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "id",
        [_Location_column]: 19,
        [_Location_line]: 187,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 19,
        [_Location_line]: 188,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.constList([C[45] || CT.C45, C[46] || CT.C46], T$._LocationL());
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[44] || CT.C44,
        [_Location_name]: null,
        [_Location_column]: 24,
        [_Location_line]: 186,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[42] || CT.C42,
        [_Location_name]: null,
        [_Location_column]: 26,
        [_Location_line]: 197,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "id",
        [_Location_column]: 19,
        [_Location_line]: 196,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 19,
        [_Location_line]: 197,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.constList([C[50] || CT.C50, C[51] || CT.C51], T$._LocationL());
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[49] || CT.C49,
        [_Location_name]: null,
        [_Location_column]: 24,
        [_Location_line]: 195,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "id",
        [_Location_column]: 17,
        [_Location_line]: 202,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 17,
        [_Location_line]: 203,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.constList([C[54] || CT.C54, C[55] || CT.C55], T$._LocationL());
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[53] || CT.C53,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 201,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "delegate",
        [_Location_column]: 11,
        [_Location_line]: 176,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 180,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.constList([C[58] || CT.C58, C[59] || CT.C59], T$._LocationL());
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[57] || CT.C57,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 175,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/pie_chart/pie_chart.dart"
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 8,
        [EdgeInsets_right]: 16,
        [EdgeInsets_top]: 8,
        [EdgeInsets_left]: 16
      });
    },
    get C61() {
      return C[61] = dart.fn(scatter_chart_data.defaultScatterTooltipItem, T$.ScatterSpotLToScatterTooltipItemL());
    },
    get C62() {
      return C[62] = dart.fn(ui.Color.lerp, T$.ColorNAndColorNAnddoubleToColorN());
    },
    get C63() {
      return C[63] = dart.fn(ui.lerpDouble, T$.numNAndnumNAnddoubleTodoubleN());
    },
    get C64() {
      return C[64] = dart.fn(lerp.lerpInt, T$.intLAndintLAnddoubleLTointL());
    },
    get C65() {
      return C[65] = dart.fn(axis_chart_data.FlSpot.lerp, T$.FlSpotLAndFlSpotLAnddoubleLToFlSpotL());
    },
    get C66() {
      return C[66] = dart.fn(line_chart_data.HorizontalLine.lerp, T$.HorizontalLineLAndHorizontalLineLAnddoubleLToHorizontalLineL());
    },
    get C67() {
      return C[67] = dart.fn(line_chart_data.VerticalLine.lerp, T$.VerticalLineLAndVerticalLineLAnddoubleLToVerticalLineL());
    },
    get C68() {
      return C[68] = dart.fn(axis_chart_data.HorizontalRangeAnnotation.lerp, T$.HorizontalRangeAnnotationLAndHorizontalRangeAnnotationLAnddoubleLToHorizontalRangeAnnotationL());
    },
    get C69() {
      return C[69] = dart.fn(axis_chart_data.VerticalRangeAnnotation.lerp, T$.VerticalRangeAnnotationLAndVerticalRangeAnnotationLAnddoubleLToVerticalRangeAnnotationL());
    },
    get C70() {
      return C[70] = dart.fn(line_chart_data.LineChartBarData.lerp, T$.LineChartBarDataLAndLineChartBarDataLAnddoubleLToLineChartBarDataL());
    },
    get C71() {
      return C[71] = dart.fn(line_chart_data.BetweenBarsData.lerp, T$.BetweenBarsDataLAndBetweenBarsDataLAnddoubleLToBetweenBarsDataL());
    },
    get C72() {
      return C[72] = dart.fn(bar_chart_data.BarChartGroupData.lerp, T$.BarChartGroupDataLAndBarChartGroupDataLAnddoubleLToBarChartGroupDataL());
    },
    get C73() {
      return C[73] = dart.fn(bar_chart_data.BarChartRodData.lerp, T$.BarChartRodDataLAndBarChartRodDataLAnddoubleLToBarChartRodDataL());
    },
    get C74() {
      return C[74] = dart.fn(pie_chart_data.PieChartSectionData.lerp, T$.PieChartSectionDataLAndPieChartSectionDataLAnddoubleLToPieChartSectionDataL());
    },
    get C75() {
      return C[75] = dart.fn(scatter_chart_data.ScatterSpot.lerp, T$.ScatterSpotLAndScatterSpotLAnddoubleLToScatterSpotL());
    },
    get C76() {
      return C[76] = dart.fn(bar_chart_data.BarChartRodStackItem.lerp, T$.BarChartRodStackItemLAndBarChartRodStackItemLAnddoubleLToBarChartRodStackItemL());
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 132,
        [_Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 9,
        [_Location_line]: 133,
        [_Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 9,
        [_Location_line]: 134,
        [_Location_file]: null
      });
    },
    get C78() {
      return C[78] = dart.constList([C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81], T$._LocationL());
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[78] || CT.C78,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 131,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/line_chart/line_chart.dart"
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressStart",
        [_Location_column]: 7,
        [_Location_line]: 47,
        [_Location_file]: null
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressEnd",
        [_Location_column]: 7,
        [_Location_line]: 59,
        [_Location_file]: null
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressMoveUpdate",
        [_Location_column]: 7,
        [_Location_line]: 71,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanCancel",
        [_Location_column]: 7,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanEnd",
        [_Location_column]: 7,
        [_Location_line]: 95,
        [_Location_file]: null
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanDown",
        [_Location_column]: 7,
        [_Location_line]: 107,
        [_Location_file]: null
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanUpdate",
        [_Location_column]: 7,
        [_Location_line]: 119,
        [_Location_file]: null
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 131,
        [_Location_file]: null
      });
    },
    get C83() {
      return C[83] = dart.constList([C[84] || CT.C84, C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90, C[91] || CT.C91], T$._LocationL());
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[83] || CT.C83,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 46,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/line_chart/line_chart.dart"
      });
    },
    get C92() {
      return C[92] = dart.constList([], T$.LineChartBarDataL());
    },
    get C93() {
      return C[93] = dart.constList([], T$.BetweenBarsDataL());
    },
    get C94() {
      return C[94] = dart.constList([], T$.ShowingTooltipIndicatorsL());
    },
    get C95() {
      return C[95] = dart.constList([], T$.FlSpotL());
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294937216.0
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294922834.0
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294907716.0
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292149248.0
      });
    },
    get C98() {
      return C[98] = dart.constMap(T$.intL(), T$.ColorL(), [100, C[99] || CT.C99, 200, C[100] || CT.C100, 400, C[101] || CT.C101, 700, C[102] || CT.C102]);
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: colors$.MaterialAccentColor.prototype,
        [Color_value]: 4294922834.0,
        [ColorSwatch__swatch]: C[98] || CT.C98
      });
    },
    get C96() {
      return C[96] = dart.constList([C[97] || CT.C97], T$.ColorL());
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 1
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: ui.Shadow.prototype,
        [Shadow_blurRadius]: 0,
        [Shadow_offset]: C[4] || CT.C4,
        [Shadow_color]: C[24] || CT.C24
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293718001.0
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291811548.0
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289773253.0
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287669422.0
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286091420.0
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284513675.0
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283723386.0
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282735204.0
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281812815.0
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280693304.0
      });
    },
    get C107() {
      return C[107] = dart.constMap(T$.intL(), T$.ColorL(), [50, C[108] || CT.C108, 100, C[109] || CT.C109, 200, C[110] || CT.C110, 300, C[111] || CT.C111, 400, C[112] || CT.C112, 500, C[113] || CT.C113, 600, C[114] || CT.C114, 700, C[115] || CT.C115, 800, C[116] || CT.C116, 900, C[117] || CT.C117]);
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: colors$.MaterialColor.prototype,
        [Color_value]: 4284513675.0,
        [ColorSwatch__swatch]: C[107] || CT.C107
      });
    },
    get C105() {
      return C[105] = dart.constList([C[106] || CT.C106], T$.ColorL());
    },
    get C118() {
      return C[118] = dart.fn(line_chart_data.showAllSpotsBelowLine, T$.FlSpotLToboolL());
    },
    get C119() {
      return C[119] = dart.fn(line_chart_data.showAllDots, T$.FlSpotLAndLineChartBarDataLToboolL());
    },
    get C120() {
      return C[120] = dart.fn(line_chart_data._defaultGetDotPainter, T$.FlSpotLAnddoubleLAndLineChartBarDataL__ToFlDotPainterL());
    },
    get C121() {
      return C[121] = dart.fn(line_chart_data.HorizontalLineLabel.defaultLineLabelResolver, T$.HorizontalLineLToStringL());
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 6,
        [EdgeInsets_right]: 6,
        [EdgeInsets_top]: 6,
        [EdgeInsets_left]: 6
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: C[22] || CT.C22,
        [TextStyle_fontSize]: 14,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[124] || CT.C124,
        [TextStyle_inherit]: true
      });
    },
    get C125() {
      return C[125] = dart.fn(line_chart_data.VerticalLineLabel.defaultLineLabelResolver, T$.VerticalLineLToStringL());
    },
    get C126() {
      return C[126] = dart.constList([], T$.HorizontalLineL());
    },
    get C127() {
      return C[127] = dart.constList([], T$.VerticalLineL());
    },
    get C128() {
      return C[128] = dart.fn(line_chart_data.defaultTouchedIndicators, T$.LineChartBarDataLAndListLOfintLToListLOfTouchedSpotIndicatorDataL());
    },
    get C129() {
      return C[129] = dart.fn(line_chart_data.defaultLineTooltipItem, T$.ListLOfLineBarSpotLToListLOfLineTooltipItemL());
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: 11,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: C[124] || CT.C124,
        [TextStyle_inherit]: true
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: ui.ClipOp.prototype,
        [_name]: "ClipOp.intersect",
        index: 1
      });
    },
    get C132() {
      return C[132] = dart.fn(base_chart_data.defaultGetTitle, T$.doubleLToStringL());
    },
    get C133() {
      return C[133] = dart.fn(base_chart_data.defaultGetTitleTextStyle, T$.doubleLToTextStyleL());
    },
    get C134() {
      return C[134] = dart.fn(axis_chart_data.defaultCheckToShowTitle, T$.doubleLAnddoubleLAndSideTitlesL__ToboolL());
    },
    get C135() {
      return C[135] = dart.fn(axis_chart_data.defaultGridLine, T$.doubleLToFlLineL());
    },
    get C136() {
      return C[136] = dart.fn(axis_chart_data.showAllGrids, T$.doubleLToboolL());
    },
    get C137() {
      return C[137] = dart.constList([], T$.HorizontalRangeAnnotationL());
    },
    get C138() {
      return C[138] = dart.constList([], T$.VerticalRangeAnnotationL());
    },
    get C139() {
      return C[139] = dart.constList([], T$.BarChartGroupDataL());
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$]: "BarChartAlignment.start",
        index: 0
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$]: "BarChartAlignment.end",
        index: 1
      });
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$]: "BarChartAlignment.center",
        index: 2
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$]: "BarChartAlignment.spaceEvenly",
        index: 3
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$]: "BarChartAlignment.spaceAround",
        index: 4
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: bar_chart_data.BarChartAlignment.prototype,
        [_name$]: "BarChartAlignment.spaceBetween",
        index: 5
      });
    },
    get C146() {
      return C[146] = dart.constList([C[140] || CT.C140, C[141] || CT.C141, C[142] || CT.C142, C[143] || CT.C143, C[144] || CT.C144, C[145] || CT.C145], T$.BarChartAlignmentL());
    },
    get C147() {
      return C[147] = dart.constList([], T$.BarChartRodDataL());
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 0.5
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0.5
      });
    },
    get C150() {
      return C[150] = dart.constList([], T$.BarChartRodStackItemL());
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 4,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 4,
        [EdgeInsets_left]: 4
      });
    },
    get C152() {
      return C[152] = dart.fn(bar_chart_data.defaultBarTooltipItem, T$.BarChartGroupDataLAndintLAndBarChartRodDataL__ToBarTooltipItemL());
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 127,
        [_Location_file]: null
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 9,
        [_Location_line]: 128,
        [_Location_file]: null
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 9,
        [_Location_line]: 129,
        [_Location_file]: null
      });
    },
    get C154() {
      return C[154] = dart.constList([C[155] || CT.C155, C[156] || CT.C156, C[157] || CT.C157], T$._LocationL());
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[154] || CT.C154,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 126,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/bar_chart/bar_chart.dart"
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressStart",
        [_Location_column]: 7,
        [_Location_line]: 42,
        [_Location_file]: null
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressEnd",
        [_Location_column]: 7,
        [_Location_line]: 54,
        [_Location_file]: null
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPressMoveUpdate",
        [_Location_column]: 7,
        [_Location_line]: 66,
        [_Location_file]: null
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanCancel",
        [_Location_column]: 7,
        [_Location_line]: 78,
        [_Location_file]: null
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanEnd",
        [_Location_column]: 7,
        [_Location_line]: 90,
        [_Location_file]: null
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanDown",
        [_Location_column]: 7,
        [_Location_line]: 102,
        [_Location_file]: null
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPanUpdate",
        [_Location_column]: 7,
        [_Location_line]: 114,
        [_Location_file]: null
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 126,
        [_Location_file]: null
      });
    },
    get C159() {
      return C[159] = dart.constList([C[160] || CT.C160, C[161] || CT.C161, C[162] || CT.C162, C[163] || CT.C163, C[164] || CT.C164, C[165] || CT.C165, C[166] || CT.C166, C[167] || CT.C167], T$._LocationL());
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[159] || CT.C159,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 41,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/bar_chart/bar_chart.dart"
      });
    }
  }, false);
  var C = Array(168).fill(void 0);
  var I = [
    "package:fl_chart/src/chart/base/base_chart/base_chart_painter.dart",
    "package:fl_chart/src/chart/base/axis_chart/axis_chart_painter.dart",
    "package:fl_chart/src/chart/base/base_chart/base_chart_data.dart",
    "package:fl_chart/src/chart/base/axis_chart/axis_chart_data.dart",
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_data.dart",
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_painter.dart",
    "package:fl_chart/src/chart/scatter_chart/scatter_chart.dart",
    "package:fl_chart/src/chart/pie_chart/pie_chart_data.dart",
    "package:fl_chart/src/chart/pie_chart/pie_chart_painter.dart",
    "package:fl_chart/src/chart/pie_chart/pie_chart.dart",
    "package:fl_chart/src/chart/line_chart/line_chart.dart",
    "package:fl_chart/src/chart/line_chart/line_chart_data.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/line_chart/line_chart_data.dart",
    "package:fl_chart/src/chart/line_chart/line_chart_painter.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/base/base_chart/base_chart_data.dart",
    "package:fl_chart/src/utils/canvas_wrapper.dart",
    "package:fl_chart/src/chart/bar_chart/bar_chart_data.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/fl_chart-0.12.2/lib/src/chart/bar_chart/bar_chart_data.dart",
    "package:fl_chart/src/chart/bar_chart/bar_chart_painter.dart",
    "package:fl_chart/src/chart/bar_chart/bar_chart.dart"
  ];
  var _spotsPaint = dart.privateName(scatter_chart_painter, "_spotsPaint");
  var _bgTouchTooltipPaint = dart.privateName(scatter_chart_painter, "_bgTouchTooltipPaint");
  var _drawTitles = dart.privateName(scatter_chart_painter, "_drawTitles");
  var _drawSpots = dart.privateName(scatter_chart_painter, "_drawSpots");
  var _drawTouchTooltip = dart.privateName(scatter_chart_painter, "_drawTouchTooltip");
  var _gridPaint = dart.privateName(axis_chart_painter, "_gridPaint");
  var _backgroundPaint = dart.privateName(axis_chart_painter, "_backgroundPaint");
  var _rangeAnnotationPaint = dart.privateName(axis_chart_painter, "_rangeAnnotationPaint");
  var _drawBackground = dart.privateName(axis_chart_painter, "_drawBackground");
  var _drawRangeAnnotation = dart.privateName(axis_chart_painter, "_drawRangeAnnotation");
  var _drawGrid = dart.privateName(axis_chart_painter, "_drawGrid");
  var data$ = dart.privateName(base_chart_painter, "BaseChartPainter.data");
  var targetData$ = dart.privateName(base_chart_painter, "BaseChartPainter.targetData");
  var textScale$ = dart.privateName(base_chart_painter, "BaseChartPainter.textScale");
  var _borderPaint = dart.privateName(base_chart_painter, "_borderPaint");
  var _drawViewBorder = dart.privateName(base_chart_painter, "_drawViewBorder");
  const _is_BaseChartPainter_default = Symbol('_is_BaseChartPainter_default');
  base_chart_painter.BaseChartPainter$ = dart.generic(D => {
    class BaseChartPainter extends custom_paint.CustomPainter {
      get data() {
        return this[data$];
      }
      set data(value) {
        super.data = value;
      }
      get targetData() {
        return this[targetData$];
      }
      set targetData(value) {
        super.targetData = value;
      }
      get textScale() {
        return this[textScale$];
      }
      set textScale(value) {
        this[textScale$] = value;
      }
      paint(canvas, size) {
        let canvasWrapper = new canvas_wrapper.CanvasWrapper.new(canvas, size);
        this[_drawViewBorder](canvasWrapper);
      }
      [_drawViewBorder](canvasWrapper) {
        if (!dart.test(this.data.borderData.show)) {
          return;
        }
        let viewSize = canvasWrapper.size;
        let chartViewSize = this.getChartUsableDrawSize(viewSize);
        let topLeft = new ui.Offset.new(this.getLeftOffsetDrawSize(), this.getTopOffsetDrawSize());
        let topRight = new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width), this.getTopOffsetDrawSize());
        let bottomLeft = new ui.Offset.new(this.getLeftOffsetDrawSize(), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height));
        let bottomRight = new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height));
        let topBorder = this.data.borderData.border.top;
        if (topBorder.width !== 0.0) {
          this[_borderPaint].color = topBorder.color;
          this[_borderPaint].strokeWidth = topBorder.width;
          canvasWrapper.drawLine(topLeft, topRight, this[_borderPaint]);
        }
        let rightBorder = this.data.borderData.border.right;
        if (rightBorder.width !== 0.0) {
          this[_borderPaint].color = rightBorder.color;
          this[_borderPaint].strokeWidth = rightBorder.width;
          canvasWrapper.drawLine(topRight, bottomRight, this[_borderPaint]);
        }
        let bottomBorder = this.data.borderData.border.bottom;
        if (bottomBorder.width !== 0.0) {
          this[_borderPaint].color = bottomBorder.color;
          this[_borderPaint].strokeWidth = bottomBorder.width;
          canvasWrapper.drawLine(bottomRight, bottomLeft, this[_borderPaint]);
        }
        let leftBorder = this.data.borderData.border.left;
        if (leftBorder.width !== 0.0) {
          this[_borderPaint].color = leftBorder.color;
          this[_borderPaint].strokeWidth = leftBorder.width;
          canvasWrapper.drawLine(bottomLeft, topLeft, this[_borderPaint]);
        }
      }
      getChartUsableDrawSize(viewSize) {
        let usableWidth = dart.notNull(viewSize.width) - dart.notNull(this.getExtraNeededHorizontalSpace());
        let usableHeight = dart.notNull(viewSize.height) - dart.notNull(this.getExtraNeededVerticalSpace());
        return new ui.Size.new(usableWidth, usableHeight);
      }
      getExtraNeededHorizontalSpace() {
        return 0.0;
      }
      getExtraNeededVerticalSpace() {
        return 0.0;
      }
      getLeftOffsetDrawSize() {
        return 0.0;
      }
      getTopOffsetDrawSize() {
        return 0.0;
      }
    }
    (BaseChartPainter.new = function(data, targetData, opts) {
      let t0;
      let textScale = opts && 'textScale' in opts ? opts.textScale : 1;
      this[_borderPaint] = null;
      this[data$] = data;
      this[targetData$] = targetData;
      this[textScale$] = textScale;
      BaseChartPainter.__proto__.new.call(this);
      this[_borderPaint] = (t0 = ui.Paint.new(), (() => {
        t0.style = ui.PaintingStyle.stroke;
        return t0;
      })());
    }).prototype = BaseChartPainter.prototype;
    dart.addTypeTests(BaseChartPainter);
    BaseChartPainter.prototype[_is_BaseChartPainter_default] = true;
    dart.addTypeCaches(BaseChartPainter);
    dart.setMethodSignature(BaseChartPainter, () => ({
      __proto__: dart.getMethods(BaseChartPainter.__proto__),
      paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Size)]),
      [_drawViewBorder]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
      getChartUsableDrawSize: dart.fnType(dart.legacy(ui.Size), [dart.legacy(ui.Size)]),
      getExtraNeededHorizontalSpace: dart.fnType(dart.legacy(core.double), []),
      getExtraNeededVerticalSpace: dart.fnType(dart.legacy(core.double), []),
      getLeftOffsetDrawSize: dart.fnType(dart.legacy(core.double), []),
      getTopOffsetDrawSize: dart.fnType(dart.legacy(core.double), [])
    }));
    dart.setLibraryUri(BaseChartPainter, I[0]);
    dart.setFieldSignature(BaseChartPainter, () => ({
      __proto__: dart.getFields(BaseChartPainter.__proto__),
      data: dart.finalFieldType(dart.legacy(D)),
      targetData: dart.finalFieldType(dart.legacy(D)),
      [_borderPaint]: dart.fieldType(dart.legacy(ui.Paint)),
      textScale: dart.fieldType(dart.legacy(core.double))
    }));
    return BaseChartPainter;
  });
  base_chart_painter.BaseChartPainter = base_chart_painter.BaseChartPainter$();
  dart.addTypeTests(base_chart_painter.BaseChartPainter, _is_BaseChartPainter_default);
  const _is_AxisChartPainter_default = Symbol('_is_AxisChartPainter_default');
  axis_chart_painter.AxisChartPainter$ = dart.generic(D => {
    class AxisChartPainter extends base_chart_painter.BaseChartPainter$(dart.legacy(D)) {
      paint(canvas, size) {
        super.paint(canvas, size);
        let canvasWrapper = new canvas_wrapper.CanvasWrapper.new(canvas, size);
        this[_drawBackground](canvasWrapper);
        this[_drawRangeAnnotation](canvasWrapper);
        this[_drawGrid](canvasWrapper);
      }
      drawAxisTitles(canvasWrapper) {
        if (!dart.test(this.data.axisTitleData.show)) {
          return;
        }
        let viewSize = this.getChartUsableDrawSize(canvasWrapper.size);
        let axisTitles = this.data.axisTitleData;
        let leftTitle = axisTitles.leftTitle;
        if (dart.test(leftTitle.showTitle)) {
          let span = new text_span.TextSpan.new({style: leftTitle.textStyle, text: leftTitle.titleText});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: leftTitle.textAlign, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
          tp.layout({minWidth: viewSize.height});
          canvasWrapper.save();
          canvasWrapper.rotate(-3.141592653589793 * 0.5);
          canvasWrapper.drawText(tp, new ui.Offset.new(-dart.notNull(viewSize.height) - dart.notNull(this.getTopOffsetDrawSize()), dart.notNull(leftTitle.reservedSize) - dart.notNull(tp.height)));
          canvasWrapper.restore();
        }
        let topTitle = axisTitles.topTitle;
        if (dart.test(topTitle.showTitle)) {
          let span = new text_span.TextSpan.new({style: topTitle.textStyle, text: topTitle.titleText});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: topTitle.textAlign, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
          tp.layout({minWidth: viewSize.width});
          canvasWrapper.drawText(tp, new ui.Offset.new(this.getLeftOffsetDrawSize(), dart.notNull(topTitle.reservedSize) - dart.notNull(tp.height)));
        }
        let rightTitle = axisTitles.rightTitle;
        if (dart.test(rightTitle.showTitle)) {
          let span = new text_span.TextSpan.new({style: rightTitle.textStyle, text: rightTitle.titleText});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: rightTitle.textAlign, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
          tp.layout({minWidth: viewSize.height});
          canvasWrapper.save();
          canvasWrapper.rotate(-3.141592653589793 * 0.5);
          canvasWrapper.drawText(tp, new ui.Offset.new(-dart.notNull(viewSize.height) - dart.notNull(this.getTopOffsetDrawSize()), dart.notNull(viewSize.width) + dart.notNull(this.getExtraNeededHorizontalSpace()) - dart.notNull(rightTitle.reservedSize)));
          canvasWrapper.restore();
        }
        let bottomTitle = axisTitles.bottomTitle;
        if (dart.test(bottomTitle.showTitle)) {
          let span = new text_span.TextSpan.new({style: bottomTitle.textStyle, text: bottomTitle.titleText});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: bottomTitle.textAlign, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
          tp.layout({minWidth: viewSize.width});
          canvasWrapper.drawText(tp, new ui.Offset.new(this.getLeftOffsetDrawSize(), dart.notNull(this.getExtraNeededVerticalSpace()) - dart.notNull(bottomTitle.reservedSize) + dart.notNull(viewSize.height)));
        }
      }
      getExtraNeededHorizontalSpace() {
        let sum = super.getExtraNeededHorizontalSpace();
        if (dart.test(this.data.axisTitleData.show)) {
          let leftSide = this.data.axisTitleData.leftTitle;
          if (dart.test(leftSide.showTitle)) {
            sum = dart.notNull(sum) + (dart.notNull(leftSide.reservedSize) + dart.notNull(leftSide.margin));
          }
          let rightSide = this.data.axisTitleData.rightTitle;
          if (dart.test(rightSide.showTitle)) {
            sum = dart.notNull(sum) + (dart.notNull(rightSide.reservedSize) + dart.notNull(rightSide.margin));
          }
        }
        return sum;
      }
      getExtraNeededVerticalSpace() {
        let sum = super.getExtraNeededVerticalSpace();
        if (dart.test(this.data.axisTitleData.show)) {
          let topSide = this.data.axisTitleData.topTitle;
          if (dart.test(topSide.showTitle)) {
            sum = dart.notNull(sum) + (dart.notNull(topSide.reservedSize) + dart.notNull(topSide.margin));
          }
          let bottomSide = this.data.axisTitleData.bottomTitle;
          if (dart.test(bottomSide.showTitle)) {
            sum = dart.notNull(sum) + (dart.notNull(bottomSide.reservedSize) + dart.notNull(bottomSide.margin));
          }
        }
        return sum;
      }
      getLeftOffsetDrawSize() {
        let sum = super.getLeftOffsetDrawSize();
        let leftAxisTitle = this.data.axisTitleData.leftTitle;
        if (dart.test(this.data.axisTitleData.show) && dart.test(leftAxisTitle.showTitle)) {
          sum = dart.notNull(sum) + (dart.notNull(leftAxisTitle.reservedSize) + dart.notNull(leftAxisTitle.margin));
        }
        return sum;
      }
      getTopOffsetDrawSize() {
        let sum = super.getTopOffsetDrawSize();
        let topAxisTitle = this.data.axisTitleData.topTitle;
        if (dart.test(this.data.axisTitleData.show) && dart.test(topAxisTitle.showTitle)) {
          sum = dart.notNull(sum) + (dart.notNull(topAxisTitle.reservedSize) + dart.notNull(topAxisTitle.margin));
        }
        return sum;
      }
      [_drawGrid](canvasWrapper) {
        let t0, t1, t0$, t1$, t0$0, t0$1, t1$0, t0$2, t1$1, t0$3;
        if (!dart.test(this.data.gridData.show) || this.data.gridData == null) {
          return;
        }
        let viewSize = canvasWrapper.size;
        let usableViewSize = this.getChartUsableDrawSize(viewSize);
        if (dart.test(this.data.gridData.drawVerticalLine)) {
          let verticalInterval = (t0 = this.data.gridData.verticalInterval, t0 == null ? utils.getEfficientInterval(viewSize.width, this.data.horizontalDiff) : t0);
          let verticalSeek = dart.notNull(this.data.minX) + dart.notNull(verticalInterval);
          let delta = dart.notNull(this.data.maxX) - dart.notNull(this.data.minX);
          let count = (delta / dart.notNull(verticalInterval))[$truncate]();
          let lastPosition = count * verticalSeek;
          let lastPositionOverlapsWithBorder = lastPosition === this.data.maxX;
          let end = lastPositionOverlapsWithBorder ? dart.notNull(this.data.maxX) - dart.notNull(verticalInterval) : this.data.maxX;
          while (verticalSeek <= dart.notNull(end)) {
            if (dart.test((t0$ = this.data.gridData, t1 = verticalSeek, t0$.checkToShowVerticalLine(t1)))) {
              let flLineStyle = (t0$0 = this.data.gridData, t1$ = verticalSeek, t0$0.getDrawingVerticalLine(t1$));
              this[_gridPaint].color = flLineStyle.color;
              this[_gridPaint].strokeWidth = flLineStyle.strokeWidth;
              let bothX = this.getPixelX(verticalSeek, usableViewSize);
              let x1 = bothX;
              let y1 = 0 + dart.notNull(this.getTopOffsetDrawSize());
              let x2 = bothX;
              let y2 = dart.notNull(usableViewSize.height) + dart.notNull(this.getTopOffsetDrawSize());
              canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, new ui.Offset.new(x1, y1), new ui.Offset.new(x2, y2), this[_gridPaint], flLineStyle.dashArray);
            }
            verticalSeek = verticalSeek + dart.notNull(verticalInterval);
          }
        }
        if (dart.test(this.data.gridData.drawHorizontalLine)) {
          let horizontalInterval = (t0$1 = this.data.gridData.horizontalInterval, t0$1 == null ? utils.getEfficientInterval(viewSize.height, this.data.verticalDiff) : t0$1);
          let horizontalSeek = dart.notNull(this.data.minY) + dart.notNull(horizontalInterval);
          let delta = dart.notNull(this.data.maxY) - dart.notNull(this.data.minY);
          let count = (delta / dart.notNull(horizontalInterval))[$truncate]();
          let lastPosition = count * horizontalSeek;
          let lastPositionOverlapsWithBorder = lastPosition === this.data.maxY;
          let end = lastPositionOverlapsWithBorder ? dart.notNull(this.data.maxY) - dart.notNull(horizontalInterval) : this.data.maxY;
          while (horizontalSeek <= dart.notNull(end)) {
            if (dart.test((t0$2 = this.data.gridData, t1$0 = horizontalSeek, t0$2.checkToShowHorizontalLine(t1$0)))) {
              let flLine = (t0$3 = this.data.gridData, t1$1 = horizontalSeek, t0$3.getDrawingHorizontalLine(t1$1));
              this[_gridPaint].color = flLine.color;
              this[_gridPaint].strokeWidth = flLine.strokeWidth;
              let bothY = this.getPixelY(horizontalSeek, usableViewSize);
              let x1 = 0 + dart.notNull(this.getLeftOffsetDrawSize());
              let y1 = bothY;
              let x2 = dart.notNull(usableViewSize.width) + dart.notNull(this.getLeftOffsetDrawSize());
              let y2 = bothY;
              canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, new ui.Offset.new(x1, y1), new ui.Offset.new(x2, y2), this[_gridPaint], flLine.dashArray);
            }
            horizontalSeek = horizontalSeek + dart.notNull(horizontalInterval);
          }
        }
      }
      [_drawBackground](canvasWrapper) {
        if (this.data.backgroundColor == null) {
          return;
        }
        let viewSize = canvasWrapper.size;
        let usableViewSize = this.getChartUsableDrawSize(viewSize);
        this[_backgroundPaint].color = this.data.backgroundColor;
        canvasWrapper.drawRect(new ui.Rect.fromLTWH(this.getLeftOffsetDrawSize(), this.getTopOffsetDrawSize(), usableViewSize.width, usableViewSize.height), this[_backgroundPaint]);
      }
      [_drawRangeAnnotation](canvasWrapper) {
        if (this.data.rangeAnnotations == null) {
          return;
        }
        let viewSize = canvasWrapper.size;
        let chartUsableSize = this.getChartUsableDrawSize(viewSize);
        if (dart.test(this.data.rangeAnnotations.verticalRangeAnnotations[$isNotEmpty])) {
          for (let annotation of this.data.rangeAnnotations.verticalRangeAnnotations) {
            let topChartPadding = this.getTopOffsetDrawSize();
            let from = new ui.Offset.new(this.getPixelX(annotation.x1, chartUsableSize), topChartPadding);
            let bottomChartPadding = dart.notNull(this.getExtraNeededVerticalSpace()) - dart.notNull(this.getTopOffsetDrawSize());
            let to = new ui.Offset.new(this.getPixelX(annotation.x2, chartUsableSize), dart.notNull(viewSize.height) - bottomChartPadding);
            let rect = new ui.Rect.fromPoints(from, to);
            this[_rangeAnnotationPaint].color = annotation.color;
            canvasWrapper.drawRect(rect, this[_rangeAnnotationPaint]);
          }
        }
        if (dart.test(this.data.rangeAnnotations.horizontalRangeAnnotations[$isNotEmpty])) {
          for (let annotation of this.data.rangeAnnotations.horizontalRangeAnnotations) {
            let leftChartPadding = this.getLeftOffsetDrawSize();
            let from = new ui.Offset.new(leftChartPadding, this.getPixelY(annotation.y1, chartUsableSize));
            let rightChartPadding = dart.notNull(this.getExtraNeededHorizontalSpace()) - dart.notNull(this.getLeftOffsetDrawSize());
            let to = new ui.Offset.new(dart.notNull(viewSize.width) - rightChartPadding, this.getPixelY(annotation.y2, chartUsableSize));
            let rect = new ui.Rect.fromPoints(from, to);
            this[_rangeAnnotationPaint].color = annotation.color;
            canvasWrapper.drawRect(rect, this[_rangeAnnotationPaint]);
          }
        }
      }
      getPixelX(spotX, chartUsableSize) {
        let deltaX = dart.notNull(this.data.maxX) - dart.notNull(this.data.minX);
        if (deltaX === 0.0) {
          return this.getLeftOffsetDrawSize();
        }
        return (dart.notNull(spotX) - dart.notNull(this.data.minX)) / deltaX * dart.notNull(chartUsableSize.width) + dart.notNull(this.getLeftOffsetDrawSize());
      }
      getPixelY(spotY, chartUsableSize) {
        let deltaY = dart.notNull(this.data.maxY) - dart.notNull(this.data.minY);
        if (deltaY === 0.0) {
          return dart.notNull(chartUsableSize.height) + dart.notNull(this.getTopOffsetDrawSize());
        }
        let y = (dart.notNull(spotY) - dart.notNull(this.data.minY)) / deltaY * dart.notNull(chartUsableSize.height);
        y = dart.notNull(chartUsableSize.height) - y;
        return y + dart.notNull(this.getTopOffsetDrawSize());
      }
    }
    (AxisChartPainter.new = function(data, targetData, opts) {
      let t0, t0$, t0$0;
      let textScale = opts && 'textScale' in opts ? opts.textScale : null;
      this[_gridPaint] = null;
      this[_backgroundPaint] = null;
      this[_rangeAnnotationPaint] = null;
      AxisChartPainter.__proto__.new.call(this, data, targetData, {textScale: textScale});
      this[_gridPaint] = (t0 = ui.Paint.new(), (() => {
        t0.style = ui.PaintingStyle.stroke;
        return t0;
      })());
      this[_backgroundPaint] = (t0$ = ui.Paint.new(), (() => {
        t0$.style = ui.PaintingStyle.fill;
        return t0$;
      })());
      this[_rangeAnnotationPaint] = (t0$0 = ui.Paint.new(), (() => {
        t0$0.style = ui.PaintingStyle.fill;
        return t0$0;
      })());
    }).prototype = AxisChartPainter.prototype;
    dart.addTypeTests(AxisChartPainter);
    AxisChartPainter.prototype[_is_AxisChartPainter_default] = true;
    dart.addTypeCaches(AxisChartPainter);
    dart.setMethodSignature(AxisChartPainter, () => ({
      __proto__: dart.getMethods(AxisChartPainter.__proto__),
      drawAxisTitles: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
      [_drawGrid]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
      [_drawBackground]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
      [_drawRangeAnnotation]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
      getPixelX: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(ui.Size)]),
      getPixelY: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(ui.Size)])
    }));
    dart.setLibraryUri(AxisChartPainter, I[1]);
    dart.setFieldSignature(AxisChartPainter, () => ({
      __proto__: dart.getFields(AxisChartPainter.__proto__),
      [_gridPaint]: dart.fieldType(dart.legacy(ui.Paint)),
      [_backgroundPaint]: dart.fieldType(dart.legacy(ui.Paint)),
      [_rangeAnnotationPaint]: dart.fieldType(dart.legacy(ui.Paint))
    }));
    return AxisChartPainter;
  });
  axis_chart_painter.AxisChartPainter = axis_chart_painter.AxisChartPainter$();
  dart.addTypeTests(axis_chart_painter.AxisChartPainter, _is_AxisChartPainter_default);
  var scatterSpots$ = dart.privateName(scatter_chart_data, "ScatterChartData.scatterSpots");
  var titlesData$ = dart.privateName(scatter_chart_data, "ScatterChartData.titlesData");
  var scatterTouchData$ = dart.privateName(scatter_chart_data, "ScatterChartData.scatterTouchData");
  var showingTooltipIndicators$ = dart.privateName(scatter_chart_data, "ScatterChartData.showingTooltipIndicators");
  var gridData$ = dart.privateName(axis_chart_data, "AxisChartData.gridData");
  var axisTitleData$ = dart.privateName(axis_chart_data, "AxisChartData.axisTitleData");
  var rangeAnnotations$ = dart.privateName(axis_chart_data, "AxisChartData.rangeAnnotations");
  var minX$ = dart.privateName(axis_chart_data, "AxisChartData.minX");
  var maxX$ = dart.privateName(axis_chart_data, "AxisChartData.maxX");
  var minY$ = dart.privateName(axis_chart_data, "AxisChartData.minY");
  var maxY$ = dart.privateName(axis_chart_data, "AxisChartData.maxY");
  var clipData$ = dart.privateName(axis_chart_data, "AxisChartData.clipData");
  var backgroundColor$ = dart.privateName(axis_chart_data, "AxisChartData.backgroundColor");
  var borderData$ = dart.privateName(base_chart_data, "BaseChartData.borderData");
  var touchData$ = dart.privateName(base_chart_data, "BaseChartData.touchData");
  const Object_EquatableMixin$36 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36.new = function() {
  }).prototype = Object_EquatableMixin$36.prototype;
  dart.applyMixin(Object_EquatableMixin$36, equatable_mixin.EquatableMixin);
  base_chart_data.BaseChartData = class BaseChartData extends Object_EquatableMixin$36 {
    get borderData() {
      return this[borderData$];
    }
    set borderData(value) {
      this[borderData$] = value;
    }
    get touchData() {
      return this[touchData$];
    }
    set touchData(value) {
      this[touchData$] = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.borderData, this.touchData]);
    }
  };
  (base_chart_data.BaseChartData.new = function(opts) {
    let t0;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let touchData = opts && 'touchData' in opts ? opts.touchData : null;
    this[borderData$] = (t0 = borderData, t0 == null ? new base_chart_data.FlBorderData.new() : t0);
    this[touchData$] = touchData;
    ;
  }).prototype = base_chart_data.BaseChartData.prototype;
  dart.addTypeTests(base_chart_data.BaseChartData);
  dart.addTypeCaches(base_chart_data.BaseChartData);
  dart.setGetterSignature(base_chart_data.BaseChartData, () => ({
    __proto__: dart.getGetters(base_chart_data.BaseChartData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(base_chart_data.BaseChartData, I[2]);
  dart.setFieldSignature(base_chart_data.BaseChartData, () => ({
    __proto__: dart.getFields(base_chart_data.BaseChartData.__proto__),
    borderData: dart.fieldType(dart.legacy(base_chart_data.FlBorderData)),
    touchData: dart.fieldType(dart.legacy(base_chart_data.FlTouchData))
  }));
  const BaseChartData_EquatableMixin$36 = class BaseChartData_EquatableMixin extends base_chart_data.BaseChartData {};
  (BaseChartData_EquatableMixin$36.new = function(opts) {
    BaseChartData_EquatableMixin$36.__proto__.new.call(this, opts);
  }).prototype = BaseChartData_EquatableMixin$36.prototype;
  dart.applyMixin(BaseChartData_EquatableMixin$36, equatable_mixin.EquatableMixin);
  axis_chart_data.AxisChartData = class AxisChartData extends BaseChartData_EquatableMixin$36 {
    get gridData() {
      return this[gridData$];
    }
    set gridData(value) {
      super.gridData = value;
    }
    get axisTitleData() {
      return this[axisTitleData$];
    }
    set axisTitleData(value) {
      super.axisTitleData = value;
    }
    get rangeAnnotations() {
      return this[rangeAnnotations$];
    }
    set rangeAnnotations(value) {
      super.rangeAnnotations = value;
    }
    get minX() {
      return this[minX$];
    }
    set minX(value) {
      this[minX$] = value;
    }
    get maxX() {
      return this[maxX$];
    }
    set maxX(value) {
      this[maxX$] = value;
    }
    get minY() {
      return this[minY$];
    }
    set minY(value) {
      this[minY$] = value;
    }
    get maxY() {
      return this[maxY$];
    }
    set maxY(value) {
      this[maxY$] = value;
    }
    get clipData() {
      return this[clipData$];
    }
    set clipData(value) {
      this[clipData$] = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      this[backgroundColor$] = value;
    }
    get verticalDiff() {
      return dart.notNull(this.maxY) - dart.notNull(this.minY);
    }
    get horizontalDiff() {
      return dart.notNull(this.maxX) - dart.notNull(this.minX);
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.gridData, this.axisTitleData, this.rangeAnnotations, this.minX, this.maxX, this.minY, this.maxY, this.clipData, this.backgroundColor, this.borderData, this.touchData]);
    }
  };
  (axis_chart_data.AxisChartData.new = function(opts) {
    let t0, t0$, t0$0;
    let gridData = opts && 'gridData' in opts ? opts.gridData : null;
    let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
    let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
    let minX = opts && 'minX' in opts ? opts.minX : null;
    let maxX = opts && 'maxX' in opts ? opts.maxX : null;
    let minY = opts && 'minY' in opts ? opts.minY : null;
    let maxY = opts && 'maxY' in opts ? opts.maxY : null;
    let clipData = opts && 'clipData' in opts ? opts.clipData : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let touchData = opts && 'touchData' in opts ? opts.touchData : null;
    this[gridData$] = (t0 = gridData, t0 == null ? new axis_chart_data.FlGridData.new() : t0);
    this[axisTitleData$] = axisTitleData;
    this[rangeAnnotations$] = (t0$ = rangeAnnotations, t0$ == null ? new axis_chart_data.RangeAnnotations.new() : t0$);
    this[minX$] = minX;
    this[maxX$] = maxX;
    this[minY$] = minY;
    this[maxY$] = maxY;
    this[clipData$] = (t0$0 = clipData, t0$0 == null ? new base_chart_data.FlClipData.none() : t0$0);
    this[backgroundColor$] = backgroundColor;
    axis_chart_data.AxisChartData.__proto__.new.call(this, {borderData: borderData, touchData: touchData});
    ;
  }).prototype = axis_chart_data.AxisChartData.prototype;
  dart.addTypeTests(axis_chart_data.AxisChartData);
  dart.addTypeCaches(axis_chart_data.AxisChartData);
  dart.setGetterSignature(axis_chart_data.AxisChartData, () => ({
    __proto__: dart.getGetters(axis_chart_data.AxisChartData.__proto__),
    verticalDiff: dart.legacy(core.double),
    horizontalDiff: dart.legacy(core.double)
  }));
  dart.setLibraryUri(axis_chart_data.AxisChartData, I[3]);
  dart.setFieldSignature(axis_chart_data.AxisChartData, () => ({
    __proto__: dart.getFields(axis_chart_data.AxisChartData.__proto__),
    gridData: dart.finalFieldType(dart.legacy(axis_chart_data.FlGridData)),
    axisTitleData: dart.finalFieldType(dart.legacy(axis_chart_data.FlAxisTitleData)),
    rangeAnnotations: dart.finalFieldType(dart.legacy(axis_chart_data.RangeAnnotations)),
    minX: dart.fieldType(dart.legacy(core.double)),
    maxX: dart.fieldType(dart.legacy(core.double)),
    minY: dart.fieldType(dart.legacy(core.double)),
    maxY: dart.fieldType(dart.legacy(core.double)),
    clipData: dart.fieldType(dart.legacy(base_chart_data.FlClipData)),
    backgroundColor: dart.fieldType(dart.legacy(ui.Color))
  }));
  const AxisChartData_EquatableMixin$36 = class AxisChartData_EquatableMixin extends axis_chart_data.AxisChartData {};
  (AxisChartData_EquatableMixin$36.new = function(opts) {
    AxisChartData_EquatableMixin$36.__proto__.new.call(this, opts);
  }).prototype = AxisChartData_EquatableMixin$36.prototype;
  dart.applyMixin(AxisChartData_EquatableMixin$36, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterChartData = class ScatterChartData extends AxisChartData_EquatableMixin$36 {
    get scatterSpots() {
      return this[scatterSpots$];
    }
    set scatterSpots(value) {
      super.scatterSpots = value;
    }
    get titlesData() {
      return this[titlesData$];
    }
    set titlesData(value) {
      super.titlesData = value;
    }
    get scatterTouchData() {
      return this[scatterTouchData$];
    }
    set scatterTouchData(value) {
      super.scatterTouchData = value;
    }
    get showingTooltipIndicators() {
      return this[showingTooltipIndicators$];
    }
    set showingTooltipIndicators(value) {
      super.showingTooltipIndicators = value;
    }
    initSuperMinMaxValues(minX, maxX, minY, maxY) {
      let t0, t0$, t0$0, t0$1;
      if (dart.test(this.scatterSpots[$isNotEmpty])) {
        let canModifyMinX = minX == null;
        if (canModifyMinX) {
          minX = this.scatterSpots[$_get](0).x;
        }
        let canModifyMaxX = maxX == null;
        if (canModifyMaxX) {
          maxX = this.scatterSpots[$_get](0).x;
        }
        let canModifyMinY = minY == null;
        if (canModifyMinY) {
          minY = this.scatterSpots[$_get](0).y;
        }
        let canModifyMaxY = maxY == null;
        if (canModifyMaxY) {
          maxY = this.scatterSpots[$_get](0).y;
        }
        for (let j = 0; j < dart.notNull(this.scatterSpots[$length]); j = j + 1) {
          let spot = this.scatterSpots[$_get](j);
          if (canModifyMaxX && dart.notNull(spot.x) > dart.notNull(maxX)) {
            maxX = spot.x;
          }
          if (canModifyMinX && dart.notNull(spot.x) < dart.notNull(minX)) {
            minX = spot.x;
          }
          if (canModifyMaxY && dart.notNull(spot.y) > dart.notNull(maxY)) {
            maxY = spot.y;
          }
          if (canModifyMinY && dart.notNull(spot.y) < dart.notNull(minY)) {
            minY = spot.y;
          }
        }
      }
      super.minX = (t0 = minX, t0 == null ? 0.0 : t0);
      super.maxX = (t0$ = maxX, t0$ == null ? 1.0 : t0$);
      super.minY = (t0$0 = minY, t0$0 == null ? 0.0 : t0$0);
      super.maxY = (t0$1 = maxY, t0$1 == null ? 1.0 : t0$1);
    }
    lerp(a, b, t) {
      if (T$.ScatterChartDataL().is(a) && T$.ScatterChartDataL().is(b) && t != null) {
        return new scatter_chart_data.ScatterChartData.new({scatterSpots: lerp.lerpScatterSpotList(a.scatterSpots, b.scatterSpots, t), titlesData: axis_chart_data.FlTitlesData.lerp(a.titlesData, b.titlesData, t), scatterTouchData: b.scatterTouchData, showingTooltipIndicators: lerp.lerpIntList(a.showingTooltipIndicators, b.showingTooltipIndicators, t), gridData: axis_chart_data.FlGridData.lerp(a.gridData, b.gridData, t), borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), axisTitleData: axis_chart_data.FlAxisTitleData.lerp(a.axisTitleData, b.axisTitleData, t), minX: ui.lerpDouble(a.minX, b.minX, t), maxX: ui.lerpDouble(a.maxX, b.maxX, t), minY: ui.lerpDouble(a.minY, b.minY, t), maxY: ui.lerpDouble(a.maxY, b.maxY, t), clipData: b.clipData, backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t)});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10;
      let scatterSpots = opts && 'scatterSpots' in opts ? opts.scatterSpots : null;
      let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
      let scatterTouchData = opts && 'scatterTouchData' in opts ? opts.scatterTouchData : null;
      let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
      let gridData = opts && 'gridData' in opts ? opts.gridData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
      let minX = opts && 'minX' in opts ? opts.minX : null;
      let maxX = opts && 'maxX' in opts ? opts.maxX : null;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let clipData = opts && 'clipData' in opts ? opts.clipData : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      return new scatter_chart_data.ScatterChartData.new({scatterSpots: (t0 = scatterSpots, t0 == null ? this.scatterSpots : t0), titlesData: (t0$ = titlesData, t0$ == null ? this.titlesData : t0$), scatterTouchData: (t0$0 = scatterTouchData, t0$0 == null ? this.scatterTouchData : t0$0), showingTooltipIndicators: (t0$1 = showingTooltipIndicators, t0$1 == null ? this.showingTooltipIndicators : t0$1), gridData: (t0$2 = gridData, t0$2 == null ? this.gridData : t0$2), borderData: (t0$3 = borderData, t0$3 == null ? this.borderData : t0$3), axisTitleData: (t0$4 = axisTitleData, t0$4 == null ? this.axisTitleData : t0$4), minX: (t0$5 = minX, t0$5 == null ? this.minX : t0$5), maxX: (t0$6 = maxX, t0$6 == null ? this.maxX : t0$6), minY: (t0$7 = minY, t0$7 == null ? this.minY : t0$7), maxY: (t0$8 = maxY, t0$8 == null ? this.maxY : t0$8), clipData: (t0$9 = clipData, t0$9 == null ? this.clipData : t0$9), backgroundColor: (t0$10 = backgroundColor, t0$10 == null ? this.backgroundColor : t0$10)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.scatterSpots, this.titlesData, this.scatterTouchData, this.showingTooltipIndicators, this.gridData, this.touchData, this.borderData, this.axisTitleData, this.clipData, this.backgroundColor, this.minX, this.maxX, this.minY, this.maxY, this.rangeAnnotations]);
    }
  };
  (scatter_chart_data.ScatterChartData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
    let scatterSpots = opts && 'scatterSpots' in opts ? opts.scatterSpots : null;
    let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
    let scatterTouchData = opts && 'scatterTouchData' in opts ? opts.scatterTouchData : null;
    let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
    let gridData = opts && 'gridData' in opts ? opts.gridData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
    let minX = opts && 'minX' in opts ? opts.minX : null;
    let maxX = opts && 'maxX' in opts ? opts.maxX : null;
    let minY = opts && 'minY' in opts ? opts.minY : null;
    let maxY = opts && 'maxY' in opts ? opts.maxY : null;
    let clipData = opts && 'clipData' in opts ? opts.clipData : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[scatterSpots$] = (t0 = scatterSpots, t0 == null ? C[0] || CT.C0 : t0);
    this[titlesData$] = (t0$ = titlesData, t0$ == null ? new axis_chart_data.FlTitlesData.new() : t0$);
    this[scatterTouchData$] = (t0$0 = scatterTouchData, t0$0 == null ? new scatter_chart_data.ScatterTouchData.new() : t0$0);
    this[showingTooltipIndicators$] = (t0$1 = showingTooltipIndicators, t0$1 == null ? C[1] || CT.C1 : t0$1);
    scatter_chart_data.ScatterChartData.__proto__.new.call(this, {gridData: (t0$2 = gridData, t0$2 == null ? new axis_chart_data.FlGridData.new() : t0$2), touchData: (t0$3 = scatterTouchData, t0$3 == null ? new scatter_chart_data.ScatterTouchData.new() : t0$3), borderData: borderData, axisTitleData: (t0$4 = axisTitleData, t0$4 == null ? new axis_chart_data.FlAxisTitleData.new() : t0$4), clipData: (t0$5 = clipData, t0$5 == null ? new base_chart_data.FlClipData.none() : t0$5), backgroundColor: backgroundColor});
    this.initSuperMinMaxValues(minX, maxX, minY, maxY);
  }).prototype = scatter_chart_data.ScatterChartData.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterChartData);
  dart.addTypeCaches(scatter_chart_data.ScatterChartData);
  dart.setMethodSignature(scatter_chart_data.ScatterChartData, () => ({
    __proto__: dart.getMethods(scatter_chart_data.ScatterChartData.__proto__),
    initSuperMinMaxValues: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    lerp: dart.fnType(dart.legacy(scatter_chart_data.ScatterChartData), [dart.legacy(base_chart_data.BaseChartData), dart.legacy(base_chart_data.BaseChartData), dart.legacy(core.double)]),
    copyWith: dart.fnType(dart.legacy(scatter_chart_data.ScatterChartData), [], {axisTitleData: dart.legacy(axis_chart_data.FlAxisTitleData), backgroundColor: dart.legacy(ui.Color), borderData: dart.legacy(base_chart_data.FlBorderData), clipData: dart.legacy(base_chart_data.FlClipData), gridData: dart.legacy(axis_chart_data.FlGridData), maxX: dart.legacy(core.double), maxY: dart.legacy(core.double), minX: dart.legacy(core.double), minY: dart.legacy(core.double), scatterSpots: dart.legacy(core.List$(dart.legacy(scatter_chart_data.ScatterSpot))), scatterTouchData: dart.legacy(scatter_chart_data.ScatterTouchData), showingTooltipIndicators: dart.legacy(core.List$(dart.legacy(core.int))), titlesData: dart.legacy(axis_chart_data.FlTitlesData)}, {})
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterChartData, I[4]);
  dart.setFieldSignature(scatter_chart_data.ScatterChartData, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterChartData.__proto__),
    scatterSpots: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(scatter_chart_data.ScatterSpot)))),
    titlesData: dart.finalFieldType(dart.legacy(axis_chart_data.FlTitlesData)),
    scatterTouchData: dart.finalFieldType(dart.legacy(scatter_chart_data.ScatterTouchData)),
    showingTooltipIndicators: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  const _is_TouchHandler_default = Symbol('_is_TouchHandler_default');
  base_chart_painter.TouchHandler$ = dart.generic(T => {
    class TouchHandler extends core.Object {}
    TouchHandler[dart.mixinOn] = Object => class TouchHandler extends Object {
      handleTouch(touchInput, size) {
        return dart.throw(new core.UnsupportedError.new("not implemented"));
      }
    };
    (TouchHandler[dart.mixinNew] = function() {
    }).prototype = TouchHandler.prototype;
    dart.addTypeTests(TouchHandler);
    TouchHandler.prototype[_is_TouchHandler_default] = true;
    dart.addTypeCaches(TouchHandler);
    TouchHandler[dart.implements] = () => [core.Object];
    dart.setMethodSignature(TouchHandler, () => ({
      __proto__: dart.getMethods(TouchHandler.__proto__),
      handleTouch: dart.fnType(dart.legacy(T), [dart.legacy(touch_input.FlTouchInput), dart.legacy(ui.Size)])
    }));
    dart.setLibraryUri(TouchHandler, I[0]);
    return TouchHandler;
  });
  base_chart_painter.TouchHandler = base_chart_painter.TouchHandler$();
  dart.addTypeTests(base_chart_painter.TouchHandler, _is_TouchHandler_default);
  var touchedSpot$ = dart.privateName(scatter_chart_data, "ScatterTouchResponse.touchedSpot");
  var touchedSpotIndex$ = dart.privateName(scatter_chart_data, "ScatterTouchResponse.touchedSpotIndex");
  var touchInput$ = dart.privateName(base_chart_data, "BaseTouchResponse.touchInput");
  const Object_EquatableMixin$36$ = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$.new = function() {
  }).prototype = Object_EquatableMixin$36$.prototype;
  dart.applyMixin(Object_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  base_chart_data.BaseTouchResponse = class BaseTouchResponse extends Object_EquatableMixin$36$ {
    get touchInput() {
      return this[touchInput$];
    }
    set touchInput(value) {
      super.touchInput = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.touchInput]);
    }
  };
  (base_chart_data.BaseTouchResponse.new = function(touchInput) {
    this[touchInput$] = touchInput;
    ;
  }).prototype = base_chart_data.BaseTouchResponse.prototype;
  dart.addTypeTests(base_chart_data.BaseTouchResponse);
  dart.addTypeCaches(base_chart_data.BaseTouchResponse);
  dart.setGetterSignature(base_chart_data.BaseTouchResponse, () => ({
    __proto__: dart.getGetters(base_chart_data.BaseTouchResponse.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(base_chart_data.BaseTouchResponse, I[2]);
  dart.setFieldSignature(base_chart_data.BaseTouchResponse, () => ({
    __proto__: dart.getFields(base_chart_data.BaseTouchResponse.__proto__),
    touchInput: dart.finalFieldType(dart.legacy(touch_input.FlTouchInput))
  }));
  const BaseTouchResponse_EquatableMixin$36 = class BaseTouchResponse_EquatableMixin extends base_chart_data.BaseTouchResponse {};
  (BaseTouchResponse_EquatableMixin$36.new = function(touchInput) {
    BaseTouchResponse_EquatableMixin$36.__proto__.new.call(this, touchInput);
  }).prototype = BaseTouchResponse_EquatableMixin$36.prototype;
  dart.applyMixin(BaseTouchResponse_EquatableMixin$36, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterTouchResponse = class ScatterTouchResponse extends BaseTouchResponse_EquatableMixin$36 {
    get touchedSpot() {
      return this[touchedSpot$];
    }
    set touchedSpot(value) {
      super.touchedSpot = value;
    }
    get touchedSpotIndex() {
      return this[touchedSpotIndex$];
    }
    set touchedSpotIndex(value) {
      super.touchedSpotIndex = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.touchInput, this.touchedSpot, this.touchedSpotIndex]);
    }
  };
  (scatter_chart_data.ScatterTouchResponse.new = function(touchInput, touchedSpot, touchedSpotIndex) {
    this[touchedSpot$] = touchedSpot;
    this[touchedSpotIndex$] = touchedSpotIndex;
    scatter_chart_data.ScatterTouchResponse.__proto__.new.call(this, touchInput);
    ;
  }).prototype = scatter_chart_data.ScatterTouchResponse.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTouchResponse);
  dart.addTypeCaches(scatter_chart_data.ScatterTouchResponse);
  dart.setLibraryUri(scatter_chart_data.ScatterTouchResponse, I[4]);
  dart.setFieldSignature(scatter_chart_data.ScatterTouchResponse, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTouchResponse.__proto__),
    touchedSpot: dart.finalFieldType(dart.legacy(scatter_chart_data.ScatterSpot)),
    touchedSpotIndex: dart.finalFieldType(dart.legacy(core.int))
  }));
  const AxisChartPainter_TouchHandler$36 = class AxisChartPainter_TouchHandler extends axis_chart_painter.AxisChartPainter$(dart.legacy(scatter_chart_data.ScatterChartData)) {};
  (AxisChartPainter_TouchHandler$36.new = function(data, targetData, opts) {
    AxisChartPainter_TouchHandler$36.__proto__.new.call(this, data, targetData, opts);
  }).prototype = AxisChartPainter_TouchHandler$36.prototype;
  dart.applyMixin(AxisChartPainter_TouchHandler$36, base_chart_painter.TouchHandler$(dart.legacy(scatter_chart_data.ScatterTouchResponse)));
  scatter_chart_painter.ScatterChartPainter = class ScatterChartPainter extends AxisChartPainter_TouchHandler$36 {
    paint(canvas, size) {
      super.paint(canvas, size);
      let canvasWrapper = new canvas_wrapper.CanvasWrapper.new(canvas, size);
      this.drawAxisTitles(canvasWrapper);
      this[_drawTitles](canvasWrapper);
      this[_drawSpots](canvasWrapper);
      for (let i = 0; i < dart.notNull(this.targetData.scatterSpots[$length]); i = i + 1) {
        if (!dart.test(this.targetData.showingTooltipIndicators[$contains](i))) {
          continue;
        }
        let scatterSpot = this.targetData.scatterSpots[$_get](i);
        this[_drawTouchTooltip](canvasWrapper, this.targetData.scatterTouchData.touchTooltipData, scatterSpot);
      }
    }
    [_drawTitles](canvasWrapper) {
      let t0, t5, t4, t3, t2, t1, t0$, t1$, t0$0, t1$0, t0$1, t0$2, t5$, t4$, t3$, t2$, t1$1, t0$3, t1$2, t0$4, t1$3, t0$5, t0$6, t5$0, t4$0, t3$0, t2$0, t1$4, t0$7, t1$5, t0$8, t1$6, t0$9, t0$10, t5$1, t4$1, t3$1, t2$1, t1$7, t0$11, t1$8, t0$12, t1$9, t0$13;
      if (!dart.test(this.targetData.titlesData.show)) {
        return;
      }
      let viewSize = this.getChartUsableDrawSize(canvasWrapper.size);
      let leftTitles = this.targetData.titlesData.leftTitles;
      let leftInterval = (t0 = leftTitles.interval, t0 == null ? utils.getEfficientInterval(viewSize.height, this.data.verticalDiff) : t0);
      if (dart.test(leftTitles.showTitles)) {
        let verticalSeek = this.data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(this.data.maxY)) {
          if (dart.test((t0$ = leftTitles, t1 = this.data.minY, t2 = this.data.maxY, t3 = leftTitles, t4 = leftInterval, t5 = verticalSeek, t0$.checkToShowTitle(t1, t2, t3, t4, t5)))) {
            let x = 0 + dart.notNull(this.getLeftOffsetDrawSize());
            let y = this.getPixelY(verticalSeek, viewSize);
            let text = (t0$0 = leftTitles, t1$ = verticalSeek, t0$0.getTitles(t1$));
            let span = new text_span.TextSpan.new({style: (t0$1 = leftTitles, t1$0 = verticalSeek, t0$1.getTextStyles(t1$0)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace()});
            x = x - (dart.notNull(tp.width) + dart.notNull(leftTitles.margin));
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(leftTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) - dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxY) - dart.notNull(verticalSeek) < dart.notNull(leftInterval) && this.data.maxY != verticalSeek) {
            verticalSeek = this.data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(leftInterval);
          }
        }
      }
      let topTitles = this.targetData.titlesData.topTitles;
      let topInterval = (t0$2 = topTitles.interval, t0$2 == null ? utils.getEfficientInterval(viewSize.width, this.data.horizontalDiff) : t0$2);
      if (dart.test(topTitles.showTitles)) {
        let horizontalSeek = this.data.minX;
        while (dart.notNull(horizontalSeek) <= dart.notNull(this.data.maxX)) {
          if (dart.test((t0$3 = topTitles, t1$1 = this.data.minX, t2$ = this.data.maxX, t3$ = topTitles, t4$ = topInterval, t5$ = horizontalSeek, t0$3.checkToShowTitle(t1$1, t2$, t3$, t4$, t5$)))) {
            let x = this.getPixelX(horizontalSeek, viewSize);
            let y = this.getTopOffsetDrawSize();
            let text = (t0$4 = topTitles, t1$2 = horizontalSeek, t0$4.getTitles(t1$2));
            let span = new text_span.TextSpan.new({style: (t0$5 = topTitles, t1$3 = horizontalSeek, t0$5.getTextStyles(t1$3)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout();
            x = dart.notNull(x) - dart.notNull(tp.width) / 2;
            y = dart.notNull(y) - (dart.notNull(topTitles.margin) + dart.notNull(tp.height));
            canvasWrapper.save();
            canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(topTitles.rotateAngle));
            canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            x = dart.notNull(x) - dart.notNull(utils.translateRotatedPosition(tp.width, topTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxX) - dart.notNull(horizontalSeek) < dart.notNull(topInterval) && this.data.maxX != horizontalSeek) {
            horizontalSeek = this.data.maxX;
          } else {
            horizontalSeek = dart.notNull(horizontalSeek) + dart.notNull(topInterval);
          }
        }
      }
      let rightTitles = this.targetData.titlesData.rightTitles;
      let rightInterval = (t0$6 = rightTitles.interval, t0$6 == null ? utils.getEfficientInterval(viewSize.height, this.data.verticalDiff) : t0$6);
      if (dart.test(rightTitles.showTitles)) {
        let verticalSeek = this.data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(this.data.maxY)) {
          if (dart.test((t0$7 = rightTitles, t1$4 = this.data.minY, t2$0 = this.data.maxY, t3$0 = rightTitles, t4$0 = rightInterval, t5$0 = verticalSeek, t0$7.checkToShowTitle(t1$4, t2$0, t3$0, t4$0, t5$0)))) {
            let x = dart.notNull(viewSize.width) + dart.notNull(this.getLeftOffsetDrawSize());
            let y = this.getPixelY(verticalSeek, viewSize);
            let text = (t0$8 = rightTitles, t1$5 = verticalSeek, t0$8.getTitles(t1$5));
            let span = new text_span.TextSpan.new({style: (t0$9 = rightTitles, t1$6 = verticalSeek, t0$9.getTextStyles(t1$6)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace()});
            x = x + dart.notNull(rightTitles.margin);
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(rightTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) + dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxY) - dart.notNull(verticalSeek) < dart.notNull(rightInterval) && this.data.maxY != verticalSeek) {
            verticalSeek = this.data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(rightInterval);
          }
        }
      }
      let bottomTitles = this.targetData.titlesData.bottomTitles;
      let bottomInterval = (t0$10 = bottomTitles.interval, t0$10 == null ? utils.getEfficientInterval(viewSize.width, this.data.horizontalDiff) : t0$10);
      if (dart.test(bottomTitles.showTitles)) {
        let horizontalSeek = this.data.minX;
        while (dart.notNull(horizontalSeek) <= dart.notNull(this.data.maxX)) {
          if (dart.test((t0$11 = bottomTitles, t1$7 = this.data.minX, t2$1 = this.data.maxX, t3$1 = bottomTitles, t4$1 = bottomInterval, t5$1 = horizontalSeek, t0$11.checkToShowTitle(t1$7, t2$1, t3$1, t4$1, t5$1)))) {
            let x = this.getPixelX(horizontalSeek, viewSize);
            let y = dart.notNull(viewSize.height) + dart.notNull(this.getTopOffsetDrawSize());
            let text = (t0$12 = bottomTitles, t1$8 = horizontalSeek, t0$12.getTitles(t1$8));
            let span = new text_span.TextSpan.new({style: (t0$13 = bottomTitles, t1$9 = horizontalSeek, t0$13.getTextStyles(t1$9)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout();
            x = dart.notNull(x) - dart.notNull(tp.width) / 2;
            y = y + dart.notNull(bottomTitles.margin);
            canvasWrapper.save();
            canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, y + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(bottomTitles.rotateAngle));
            canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(y + dart.notNull(tp.height) / 2));
            x = dart.notNull(x) + dart.notNull(utils.translateRotatedPosition(tp.width, bottomTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxX) - dart.notNull(horizontalSeek) < dart.notNull(bottomInterval) && this.data.maxX != horizontalSeek) {
            horizontalSeek = this.data.maxX;
          } else {
            horizontalSeek = dart.notNull(horizontalSeek) + dart.notNull(bottomInterval);
          }
        }
      }
    }
    [_drawSpots](canvasWrapper) {
      if (this.data.scatterSpots == null) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize);
      for (let scatterSpot of this.data.scatterSpots) {
        if (!dart.test(scatterSpot.show)) {
          continue;
        }
        let pixelX = this.getPixelX(scatterSpot.x, chartUsableSize);
        let pixelY = this.getPixelY(scatterSpot.y, chartUsableSize);
        this[_spotsPaint].color = scatterSpot.color;
        canvasWrapper.drawCircle(new ui.Offset.new(pixelX, pixelY), scatterSpot.radius, this[_spotsPaint]);
      }
    }
    [_drawTouchTooltip](canvasWrapper, tooltipData, showOnSpot) {
      let t1, t0;
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize);
      let tooltipItem = (t0 = tooltipData, t1 = showOnSpot, t0.getTooltipItems(t1));
      if (tooltipItem == null) {
        return;
      }
      let span = new text_span.TextSpan.new({style: tooltipItem.textStyle, text: tooltipItem.text});
      let drawingTextPainter = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
      drawingTextPainter.layout({maxWidth: tooltipData.maxContentWidth});
      let width = drawingTextPainter.width;
      let height = drawingTextPainter.height;
      let mostTopOffset = new ui.Offset.new(this.getPixelX(showOnSpot.x, chartUsableSize), this.getPixelY(showOnSpot.y, chartUsableSize));
      let tooltipWidth = dart.notNull(width) + dart.notNull(tooltipData.tooltipPadding.horizontal);
      let tooltipHeight = dart.notNull(height) + dart.notNull(tooltipData.tooltipPadding.vertical);
      let rect = new ui.Rect.fromLTWH(dart.notNull(mostTopOffset.dx) - tooltipWidth / 2, dart.notNull(mostTopOffset.dy) - tooltipHeight - dart.notNull(tooltipItem.bottomMargin), tooltipWidth, tooltipHeight);
      if (dart.test(tooltipData.fitInsideHorizontally)) {
        if (dart.notNull(rect.left) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.left);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) + shiftAmount, rect.top, dart.notNull(rect.right) + shiftAmount, rect.bottom);
        }
        if (dart.notNull(rect.right) > dart.notNull(viewSize.width)) {
          let shiftAmount = dart.notNull(rect.right) - dart.notNull(viewSize.width);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) - shiftAmount, rect.top, dart.notNull(rect.right) - shiftAmount, rect.bottom);
        }
      }
      if (dart.test(tooltipData.fitInsideVertically)) {
        if (dart.notNull(rect.top) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.top);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) + shiftAmount, rect.right, dart.notNull(rect.bottom) + shiftAmount);
        }
        if (dart.notNull(rect.bottom) > dart.notNull(viewSize.height)) {
          let shiftAmount = dart.notNull(rect.bottom) - dart.notNull(viewSize.height);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) - shiftAmount, rect.right, dart.notNull(rect.bottom) - shiftAmount);
        }
      }
      let radius = new ui.Radius.circular(tooltipData.tooltipRoundedRadius);
      let roundedRect = new ui.RRect.fromRectAndCorners(rect, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
      this[_bgTouchTooltipPaint].color = tooltipData.tooltipBgColor;
      canvasWrapper.drawRRect(roundedRect, this[_bgTouchTooltipPaint]);
      let drawOffset = new ui.Offset.new(dart.notNull(rect.center.dx) - dart.notNull(drawingTextPainter.width) / 2, dart.notNull(rect.topCenter.dy) + dart.notNull(tooltipData.tooltipPadding.top));
      canvasWrapper.drawText(drawingTextPainter, drawOffset);
    }
    getExtraNeededHorizontalSpace() {
      let sum = super.getExtraNeededHorizontalSpace();
      if (dart.test(this.data.titlesData.show)) {
        let leftSide = this.data.titlesData.leftTitles;
        if (dart.test(leftSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(leftSide.reservedSize) + dart.notNull(leftSide.margin));
        }
        let rightSide = this.data.titlesData.rightTitles;
        if (dart.test(rightSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(rightSide.reservedSize) + dart.notNull(rightSide.margin));
        }
      }
      return sum;
    }
    getExtraNeededVerticalSpace() {
      let sum = super.getExtraNeededVerticalSpace();
      if (dart.test(this.data.titlesData.show)) {
        let topSide = this.data.titlesData.topTitles;
        if (dart.test(topSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(topSide.reservedSize) + dart.notNull(topSide.margin));
        }
        let bottomSide = this.data.titlesData.bottomTitles;
        if (dart.test(bottomSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(bottomSide.reservedSize) + dart.notNull(bottomSide.margin));
        }
      }
      return sum;
    }
    getLeftOffsetDrawSize() {
      let sum = super.getLeftOffsetDrawSize();
      let leftTitles = this.data.titlesData.leftTitles;
      if (dart.test(this.data.titlesData.show) && dart.test(leftTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(leftTitles.reservedSize) + dart.notNull(leftTitles.margin));
      }
      return sum;
    }
    getTopOffsetDrawSize() {
      let sum = super.getTopOffsetDrawSize();
      let topTitles = this.data.titlesData.topTitles;
      if (dart.test(this.data.titlesData.show) && dart.test(topTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(topTitles.reservedSize) + dart.notNull(topTitles.margin));
      }
      return sum;
    }
    handleTouch(touchInput, size) {
      let chartViewSize = this.getChartUsableDrawSize(size);
      for (let i = 0; i < dart.notNull(this.data.scatterSpots[$length]); i = i + 1) {
        let spot = this.data.scatterSpots[$_get](i);
        let spotPixelX = this.getPixelX(spot.x, chartViewSize);
        let spotPixelY = this.getPixelY(spot.y, chartViewSize);
        if ((dart.notNull(touchInput.getOffset().dx) - dart.notNull(spotPixelX))[$abs]() <= dart.notNull(spot.radius) / 2 + dart.notNull(this.data.scatterTouchData.touchSpotThreshold) && (dart.notNull(touchInput.getOffset().dy) - dart.notNull(spotPixelY))[$abs]() <= dart.notNull(spot.radius) / 2 + dart.notNull(this.data.scatterTouchData.touchSpotThreshold)) {
          return new scatter_chart_data.ScatterTouchResponse.new(touchInput, spot, i);
        }
      }
      return new scatter_chart_data.ScatterTouchResponse.new(touchInput, null, -1);
    }
    shouldRepaint(oldDelegate) {
      T$.ScatterChartPainterL().as(oldDelegate);
      return !dart.equals(oldDelegate.data, this.data);
    }
  };
  (scatter_chart_painter.ScatterChartPainter.new = function(data, targetData, touchHandler, opts) {
    let t0, t0$;
    let textScale = opts && 'textScale' in opts ? opts.textScale : null;
    this[_spotsPaint] = null;
    this[_bgTouchTooltipPaint] = null;
    scatter_chart_painter.ScatterChartPainter.__proto__.new.call(this, data, targetData, {textScale: textScale});
    touchHandler(this);
    this[_spotsPaint] = (t0 = ui.Paint.new(), (() => {
      t0.style = ui.PaintingStyle.fill;
      return t0;
    })());
    this[_bgTouchTooltipPaint] = (t0$ = ui.Paint.new(), (() => {
      t0$.style = ui.PaintingStyle.fill;
      t0$.color = colors$.Colors.white;
      return t0$;
    })());
  }).prototype = scatter_chart_painter.ScatterChartPainter.prototype;
  dart.addTypeTests(scatter_chart_painter.ScatterChartPainter);
  dart.addTypeCaches(scatter_chart_painter.ScatterChartPainter);
  dart.setMethodSignature(scatter_chart_painter.ScatterChartPainter, () => ({
    __proto__: dart.getMethods(scatter_chart_painter.ScatterChartPainter.__proto__),
    [_drawTitles]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
    [_drawSpots]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
    [_drawTouchTooltip]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(scatter_chart_data.ScatterTouchTooltipData), dart.legacy(scatter_chart_data.ScatterSpot)]),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(scatter_chart_painter.ScatterChartPainter, I[5]);
  dart.setFieldSignature(scatter_chart_painter.ScatterChartPainter, () => ({
    __proto__: dart.getFields(scatter_chart_painter.ScatterChartPainter.__proto__),
    [_spotsPaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_bgTouchTooltipPaint]: dart.fieldType(dart.legacy(ui.Paint))
  }));
  var data$0 = dart.privateName(scatter_chart, "ScatterChart.data");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  scatter_chart.ScatterChart = class ScatterChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new scatter_chart._ScatterChartState.new();
    }
  };
  (scatter_chart.ScatterChart.new = function(data, opts) {
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$0] = data;
    scatter_chart.ScatterChart.__proto__.new.call(this, {duration: swapAnimationDuration, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = scatter_chart.ScatterChart.prototype;
  dart.addTypeTests(scatter_chart.ScatterChart);
  dart.addTypeCaches(scatter_chart.ScatterChart);
  dart.setMethodSignature(scatter_chart.ScatterChart, () => ({
    __proto__: dart.getMethods(scatter_chart.ScatterChart.__proto__),
    createState: dart.fnType(dart.legacy(scatter_chart._ScatterChartState), [])
  }));
  dart.setLibraryUri(scatter_chart.ScatterChart, I[6]);
  dart.setFieldSignature(scatter_chart.ScatterChart, () => ({
    __proto__: dart.getFields(scatter_chart.ScatterChart.__proto__),
    data: dart.finalFieldType(dart.legacy(scatter_chart_data.ScatterChartData))
  }));
  var _scatterChartDataTween = dart.privateName(scatter_chart, "_scatterChartDataTween");
  var _touchHandler = dart.privateName(scatter_chart, "_touchHandler");
  var _chartKey = dart.privateName(scatter_chart, "_chartKey");
  var _getData = dart.privateName(scatter_chart, "_getData");
  var _getChartSize = dart.privateName(scatter_chart, "_getChartSize");
  var _canHandleTouch = dart.privateName(scatter_chart, "_canHandleTouch");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var Velocity_pixelsPerSecond = dart.privateName(velocity_tracker, "Velocity.pixelsPerSecond");
  var _withTouchedIndicators = dart.privateName(scatter_chart, "_withTouchedIndicators");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _handleBuiltInTouch = dart.privateName(scatter_chart, "_handleBuiltInTouch");
  scatter_chart._ScatterChartState = class _ScatterChartState extends implicit_animations.AnimatedWidgetBaseState$(dart.legacy(scatter_chart.ScatterChart)) {
    build(context) {
      let showingData = this[_getData]();
      let touchData = showingData.scatterTouchData;
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize]();
          if (chartSize == null) {
            return;
          }
          let response = (t0 = this[_touchHandler], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressStart.new(d.localPosition), chartSize));
          if (dart.test(this[_canHandleTouch](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressStartDetailsLToNull()), onLongPressEnd: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize]();
          if (chartSize == null) {
            return;
          }
          let response = (t0 = this[_touchHandler], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressEnd.new(d.localPosition), chartSize));
          if (dart.test(this[_canHandleTouch](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressEndDetailsLToNull()), onLongPressMoveUpdate: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize]();
          if (chartSize == null) {
            return;
          }
          let response = (t0 = this[_touchHandler], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressMoveUpdate.new(d.localPosition), chartSize));
          if (dart.test(this[_canHandleTouch](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressMoveUpdateDetailsLToNull()), onPanCancel: dart.fn(() => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize]();
          if (chartSize == null) {
            return;
          }
          let response = (t0 = this[_touchHandler], t0 == null ? null : t0.handleTouch(new touch_input.FlPanEnd.new(ui.Offset.zero, C[3] || CT.C3), chartSize));
          if (dart.test(this[_canHandleTouch](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.VoidToNull()), onPanEnd: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize]();
          if (chartSize == null) {
            return;
          }
          let response = (t0 = this[_touchHandler], t0 == null ? null : t0.handleTouch(new touch_input.FlPanEnd.new(ui.Offset.zero, details.velocity), chartSize));
          if (dart.test(this[_canHandleTouch](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragEndDetailsLToNull()), onPanDown: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize]();
          if (chartSize == null) {
            return;
          }
          let response = (t0 = this[_touchHandler], t0 == null ? null : t0.handleTouch(new touch_input.FlPanStart.new(details.localPosition), chartSize));
          if (dart.test(this[_canHandleTouch](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragDownDetailsLToNull()), onPanUpdate: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize]();
          if (chartSize == null) {
            return;
          }
          let response = (t0 = this[_touchHandler], t0 == null ? null : t0.handleTouch(new touch_input.FlPanMoveUpdate.new(details.localPosition), chartSize));
          if (dart.test(this[_canHandleTouch](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragUpdateDetailsLToNull()), child: new basic.CustomPaint.new({key: this[_chartKey], size: utils.getDefaultSize(media_query.MediaQuery.of(context).size), painter: new scatter_chart_painter.ScatterChartPainter.new(this[_withTouchedIndicators](this[_scatterChartDataTween].evaluate(this.animation)), this[_withTouchedIndicators](showingData), dart.fn(touchHandler => {
            this.setState(dart.fn(() => {
              this[_touchHandler] = T$.TouchHandlerLOfScatterTouchResponseL().as(touchHandler);
            }, T$.VoidToNull()));
          }, T$.TouchHandlerLOfBaseTouchResponseLToNull()), {textScale: media_query.MediaQuery.of(context).textScaleFactor}), $creationLocationd_0dea112b090073317d4: C[5] || CT.C5}), $creationLocationd_0dea112b090073317d4: C[10] || CT.C10});
    }
    [_canHandleTouch](response, touchData) {
      return response != null && touchData != null && touchData.touchCallback != null;
    }
    [_withTouchedIndicators](scatterChartData) {
      if (scatterChartData == null) {
        return scatterChartData;
      }
      if (!dart.test(scatterChartData.scatterTouchData.enabled) || !dart.test(scatterChartData.scatterTouchData.handleBuiltInTouches)) {
        return scatterChartData;
      }
      return scatterChartData.copyWith({showingTooltipIndicators: this.touchedSpots});
    }
    [_getChartSize]() {
      let t0;
      let containerRenderBox = T$.RenderBoxL().as((t0 = this[_chartKey].currentContext, t0 == null ? null : t0.findRenderObject()));
      if (containerRenderBox != null && dart.test(containerRenderBox.hasSize)) {
        return containerRenderBox.size;
      }
      return null;
    }
    [_getData]() {
      let scatterTouchData = this.widget.data.scatterTouchData;
      if (dart.test(scatterTouchData.enabled) && dart.test(scatterTouchData.handleBuiltInTouches)) {
        return this.widget.data.copyWith({scatterTouchData: this.widget.data.scatterTouchData.copyWith({touchCallback: dart.bind(this, _handleBuiltInTouch)})});
      }
      return this.widget.data;
    }
    [_handleBuiltInTouch](touchResponse) {
      let t1, t0;
      if (this.widget.data.scatterTouchData.touchCallback != null) {
        t0 = this.widget.data.scatterTouchData;
        t1 = touchResponse;
        t0.touchCallback(t1);
      }
      if (T$.FlPanStartL().is(touchResponse.touchInput) || T$.FlPanMoveUpdateL().is(touchResponse.touchInput) || T$.FlLongPressStartL().is(touchResponse.touchInput) || T$.FlLongPressMoveUpdateL().is(touchResponse.touchInput)) {
        this.setState(dart.fn(() => {
          this.touchedSpots = T$.JSArrayOfintL().of([touchResponse.touchedSpotIndex]);
        }, T$.VoidToNull()));
      } else {
        this.setState(dart.fn(() => {
          this.touchedSpots = T$.JSArrayOfintL().of([]);
        }, T$.VoidToNull()));
      }
    }
    forEachTween(visitor) {
      this[_scatterChartDataTween] = T$.ScatterChartDataTweenL().as(visitor(this[_scatterChartDataTween], this[_getData](), dart.fn(value => new scatter_chart_data.ScatterChartDataTween.new({begin: T$.ScatterChartDataL().as(value)}), T$.dynamicToScatterChartDataTweenL())));
    }
  };
  (scatter_chart._ScatterChartState.new = function() {
    this[_scatterChartDataTween] = null;
    this[_touchHandler] = null;
    this[_chartKey] = T$.GlobalKeyOfStateLOfStatefulWidgetL().new();
    this.touchedSpots = T$.JSArrayOfintL().of([]);
    scatter_chart._ScatterChartState.__proto__.new.call(this);
    ;
  }).prototype = scatter_chart._ScatterChartState.prototype;
  dart.addTypeTests(scatter_chart._ScatterChartState);
  dart.addTypeCaches(scatter_chart._ScatterChartState);
  dart.setMethodSignature(scatter_chart._ScatterChartState, () => ({
    __proto__: dart.getMethods(scatter_chart._ScatterChartState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_canHandleTouch]: dart.fnType(dart.legacy(core.bool), [dart.legacy(scatter_chart_data.ScatterTouchResponse), dart.legacy(scatter_chart_data.ScatterTouchData)]),
    [_withTouchedIndicators]: dart.fnType(dart.legacy(scatter_chart_data.ScatterChartData), [dart.legacy(scatter_chart_data.ScatterChartData)]),
    [_getChartSize]: dart.fnType(dart.legacy(ui.Size), []),
    [_getData]: dart.fnType(dart.legacy(scatter_chart_data.ScatterChartData), []),
    [_handleBuiltInTouch]: dart.fnType(dart.void, [dart.legacy(scatter_chart_data.ScatterTouchResponse)]),
    forEachTween: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(tween.Tween), [dart.legacy(tween.Tween), dart.dynamic, dart.legacy(dart.fnType(dart.legacy(tween.Tween), [dart.dynamic]))]))])
  }));
  dart.setLibraryUri(scatter_chart._ScatterChartState, I[6]);
  dart.setFieldSignature(scatter_chart._ScatterChartState, () => ({
    __proto__: dart.getFields(scatter_chart._ScatterChartState.__proto__),
    [_scatterChartDataTween]: dart.fieldType(dart.legacy(scatter_chart_data.ScatterChartDataTween)),
    [_touchHandler]: dart.fieldType(dart.legacy(base_chart_painter.TouchHandler$(dart.legacy(scatter_chart_data.ScatterTouchResponse)))),
    [_chartKey]: dart.finalFieldType(dart.legacy(framework.GlobalKey$(framework.State$(framework.StatefulWidget)))),
    touchedSpots: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  var sections$ = dart.privateName(pie_chart_data, "PieChartData.sections");
  var centerSpaceRadius$ = dart.privateName(pie_chart_data, "PieChartData.centerSpaceRadius");
  var centerSpaceColor$ = dart.privateName(pie_chart_data, "PieChartData.centerSpaceColor");
  var sectionsSpace$ = dart.privateName(pie_chart_data, "PieChartData.sectionsSpace");
  var startDegreeOffset$ = dart.privateName(pie_chart_data, "PieChartData.startDegreeOffset");
  var pieTouchData$ = dart.privateName(pie_chart_data, "PieChartData.pieTouchData");
  const BaseChartData_EquatableMixin$36$ = class BaseChartData_EquatableMixin extends base_chart_data.BaseChartData {};
  (BaseChartData_EquatableMixin$36$.new = function(opts) {
    BaseChartData_EquatableMixin$36$.__proto__.new.call(this, opts);
  }).prototype = BaseChartData_EquatableMixin$36$.prototype;
  dart.applyMixin(BaseChartData_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  pie_chart_data.PieChartData = class PieChartData extends BaseChartData_EquatableMixin$36$ {
    get sections() {
      return this[sections$];
    }
    set sections(value) {
      super.sections = value;
    }
    get centerSpaceRadius() {
      return this[centerSpaceRadius$];
    }
    set centerSpaceRadius(value) {
      super.centerSpaceRadius = value;
    }
    get centerSpaceColor() {
      return this[centerSpaceColor$];
    }
    set centerSpaceColor(value) {
      super.centerSpaceColor = value;
    }
    get sectionsSpace() {
      return this[sectionsSpace$];
    }
    set sectionsSpace(value) {
      super.sectionsSpace = value;
    }
    get startDegreeOffset() {
      return this[startDegreeOffset$];
    }
    set startDegreeOffset(value) {
      super.startDegreeOffset = value;
    }
    get pieTouchData() {
      return this[pieTouchData$];
    }
    set pieTouchData(value) {
      super.pieTouchData = value;
    }
    get sumValue() {
      return this.sections[$map](T$.doubleL(), dart.fn(data => data.value, T$.PieChartSectionDataLTodoubleL()))[$reduce](dart.fn((first, second) => dart.notNull(first) + dart.notNull(second), T$.doubleLAnddoubleLTodoubleL()));
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
      let sections = opts && 'sections' in opts ? opts.sections : null;
      let centerSpaceRadius = opts && 'centerSpaceRadius' in opts ? opts.centerSpaceRadius : null;
      let centerSpaceColor = opts && 'centerSpaceColor' in opts ? opts.centerSpaceColor : null;
      let sectionsSpace = opts && 'sectionsSpace' in opts ? opts.sectionsSpace : null;
      let startDegreeOffset = opts && 'startDegreeOffset' in opts ? opts.startDegreeOffset : null;
      let pieTouchData = opts && 'pieTouchData' in opts ? opts.pieTouchData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      return new pie_chart_data.PieChartData.new({sections: (t0 = sections, t0 == null ? this.sections : t0), centerSpaceRadius: (t0$ = centerSpaceRadius, t0$ == null ? this.centerSpaceRadius : t0$), centerSpaceColor: (t0$0 = centerSpaceColor, t0$0 == null ? this.centerSpaceColor : t0$0), sectionsSpace: (t0$1 = sectionsSpace, t0$1 == null ? this.sectionsSpace : t0$1), startDegreeOffset: (t0$2 = startDegreeOffset, t0$2 == null ? this.startDegreeOffset : t0$2), pieTouchData: (t0$3 = pieTouchData, t0$3 == null ? this.pieTouchData : t0$3), borderData: (t0$4 = borderData, t0$4 == null ? this.borderData : t0$4)});
    }
    lerp(a, b, t) {
      if (T$.PieChartDataL().is(a) && T$.PieChartDataL().is(b) && t != null) {
        return new pie_chart_data.PieChartData.new({borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), centerSpaceColor: ui.Color.lerp(a.centerSpaceColor, b.centerSpaceColor, t), centerSpaceRadius: ui.lerpDouble(a.centerSpaceRadius, b.centerSpaceRadius, t), pieTouchData: b.pieTouchData, sectionsSpace: ui.lerpDouble(a.sectionsSpace, b.sectionsSpace, t), startDegreeOffset: ui.lerpDouble(a.startDegreeOffset, b.startDegreeOffset, t), sections: lerp.lerpPieChartSectionDataList(a.sections, b.sections, t)});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.sections, this.centerSpaceRadius, this.centerSpaceColor, this.pieTouchData, this.sectionsSpace, this.startDegreeOffset, this.borderData]);
    }
  };
  (pie_chart_data.PieChartData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
    let sections = opts && 'sections' in opts ? opts.sections : null;
    let centerSpaceRadius = opts && 'centerSpaceRadius' in opts ? opts.centerSpaceRadius : null;
    let centerSpaceColor = opts && 'centerSpaceColor' in opts ? opts.centerSpaceColor : null;
    let sectionsSpace = opts && 'sectionsSpace' in opts ? opts.sectionsSpace : null;
    let startDegreeOffset = opts && 'startDegreeOffset' in opts ? opts.startDegreeOffset : null;
    let pieTouchData = opts && 'pieTouchData' in opts ? opts.pieTouchData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    this[sections$] = (t0 = sections, t0 == null ? C[20] || CT.C20 : t0);
    this[centerSpaceRadius$] = (t0$ = centerSpaceRadius, t0$ == null ? 1 / 0 : t0$);
    this[centerSpaceColor$] = (t0$0 = centerSpaceColor, t0$0 == null ? colors$.Colors.transparent : t0$0);
    this[sectionsSpace$] = true ? 0.0 : (t0$1 = sectionsSpace, t0$1 == null ? 2.0 : t0$1);
    this[startDegreeOffset$] = (t0$2 = startDegreeOffset, t0$2 == null ? 0.0 : t0$2);
    this[pieTouchData$] = (t0$3 = pieTouchData, t0$3 == null ? new pie_chart_data.PieTouchData.new() : t0$3);
    pie_chart_data.PieChartData.__proto__.new.call(this, {borderData: borderData, touchData: (t0$4 = pieTouchData, t0$4 == null ? new pie_chart_data.PieTouchData.new() : t0$4)});
    ;
  }).prototype = pie_chart_data.PieChartData.prototype;
  dart.addTypeTests(pie_chart_data.PieChartData);
  dart.addTypeCaches(pie_chart_data.PieChartData);
  dart.setMethodSignature(pie_chart_data.PieChartData, () => ({
    __proto__: dart.getMethods(pie_chart_data.PieChartData.__proto__),
    copyWith: dart.fnType(dart.legacy(pie_chart_data.PieChartData), [], {borderData: dart.legacy(base_chart_data.FlBorderData), centerSpaceColor: dart.legacy(ui.Color), centerSpaceRadius: dart.legacy(core.double), pieTouchData: dart.legacy(pie_chart_data.PieTouchData), sections: dart.legacy(core.List$(dart.legacy(pie_chart_data.PieChartSectionData))), sectionsSpace: dart.legacy(core.double), startDegreeOffset: dart.legacy(core.double)}, {}),
    lerp: dart.fnType(dart.legacy(base_chart_data.BaseChartData), [dart.legacy(base_chart_data.BaseChartData), dart.legacy(base_chart_data.BaseChartData), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(pie_chart_data.PieChartData, () => ({
    __proto__: dart.getGetters(pie_chart_data.PieChartData.__proto__),
    sumValue: dart.legacy(core.double)
  }));
  dart.setLibraryUri(pie_chart_data.PieChartData, I[7]);
  dart.setFieldSignature(pie_chart_data.PieChartData, () => ({
    __proto__: dart.getFields(pie_chart_data.PieChartData.__proto__),
    sections: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(pie_chart_data.PieChartSectionData)))),
    centerSpaceRadius: dart.finalFieldType(dart.legacy(core.double)),
    centerSpaceColor: dart.finalFieldType(dart.legacy(ui.Color)),
    sectionsSpace: dart.finalFieldType(dart.legacy(core.double)),
    startDegreeOffset: dart.finalFieldType(dart.legacy(core.double)),
    pieTouchData: dart.finalFieldType(dart.legacy(pie_chart_data.PieTouchData))
  }));
  var value$ = dart.privateName(pie_chart_data, "PieChartSectionData.value");
  var color$ = dart.privateName(pie_chart_data, "PieChartSectionData.color");
  var radius$ = dart.privateName(pie_chart_data, "PieChartSectionData.radius");
  var showTitle$ = dart.privateName(pie_chart_data, "PieChartSectionData.showTitle");
  var titleStyle$ = dart.privateName(pie_chart_data, "PieChartSectionData.titleStyle");
  var title$ = dart.privateName(pie_chart_data, "PieChartSectionData.title");
  var badgeWidget$ = dart.privateName(pie_chart_data, "PieChartSectionData.badgeWidget");
  var titlePositionPercentageOffset$ = dart.privateName(pie_chart_data, "PieChartSectionData.titlePositionPercentageOffset");
  var badgePositionPercentageOffset$ = dart.privateName(pie_chart_data, "PieChartSectionData.badgePositionPercentageOffset");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var FontWeight_index = dart.privateName(ui, "FontWeight.index");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var Color_value = dart.privateName(ui, "Color.value");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  const Object_EquatableMixin$36$0 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$0.new = function() {
  }).prototype = Object_EquatableMixin$36$0.prototype;
  dart.applyMixin(Object_EquatableMixin$36$0, equatable_mixin.EquatableMixin);
  pie_chart_data.PieChartSectionData = class PieChartSectionData extends Object_EquatableMixin$36$0 {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get showTitle() {
      return this[showTitle$];
    }
    set showTitle(value) {
      super.showTitle = value;
    }
    get titleStyle() {
      return this[titleStyle$];
    }
    set titleStyle(value) {
      super.titleStyle = value;
    }
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get badgeWidget() {
      return this[badgeWidget$];
    }
    set badgeWidget(value) {
      super.badgeWidget = value;
    }
    get titlePositionPercentageOffset() {
      return this[titlePositionPercentageOffset$];
    }
    set titlePositionPercentageOffset(value) {
      super.titlePositionPercentageOffset = value;
    }
    get badgePositionPercentageOffset() {
      return this[badgePositionPercentageOffset$];
    }
    set badgePositionPercentageOffset(value) {
      super.badgePositionPercentageOffset = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
      let value = opts && 'value' in opts ? opts.value : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let showTitle = opts && 'showTitle' in opts ? opts.showTitle : null;
      let titleStyle = opts && 'titleStyle' in opts ? opts.titleStyle : null;
      let title = opts && 'title' in opts ? opts.title : null;
      let badgeWidget = opts && 'badgeWidget' in opts ? opts.badgeWidget : null;
      let titlePositionPercentageOffset = opts && 'titlePositionPercentageOffset' in opts ? opts.titlePositionPercentageOffset : null;
      let badgePositionPercentageOffset = opts && 'badgePositionPercentageOffset' in opts ? opts.badgePositionPercentageOffset : null;
      return new pie_chart_data.PieChartSectionData.new({value: (t0 = value, t0 == null ? this.value : t0), color: (t0$ = color, t0$ == null ? this.color : t0$), radius: (t0$0 = radius, t0$0 == null ? this.radius : t0$0), showTitle: (t0$1 = showTitle, t0$1 == null ? this.showTitle : t0$1), titleStyle: (t0$2 = titleStyle, t0$2 == null ? this.titleStyle : t0$2), title: (t0$3 = title, t0$3 == null ? this.title : t0$3), badgeWidget: (t0$4 = badgeWidget, t0$4 == null ? this.badgeWidget : t0$4), titlePositionPercentageOffset: (t0$5 = titlePositionPercentageOffset, t0$5 == null ? this.titlePositionPercentageOffset : t0$5), badgePositionPercentageOffset: (t0$6 = badgePositionPercentageOffset, t0$6 == null ? this.badgePositionPercentageOffset : t0$6)});
    }
    static lerp(a, b, t) {
      return new pie_chart_data.PieChartSectionData.new({value: ui.lerpDouble(a.value, b.value, t), color: ui.Color.lerp(a.color, b.color, t), radius: ui.lerpDouble(a.radius, b.radius, t), showTitle: b.showTitle, titleStyle: text_style.TextStyle.lerp(a.titleStyle, b.titleStyle, t), title: b.title, badgeWidget: b.badgeWidget, titlePositionPercentageOffset: ui.lerpDouble(a.titlePositionPercentageOffset, b.titlePositionPercentageOffset, t), badgePositionPercentageOffset: ui.lerpDouble(a.badgePositionPercentageOffset, b.badgePositionPercentageOffset, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.value, this.color, this.radius, this.showTitle, this.titleStyle, this.title, this.badgeWidget, this.titlePositionPercentageOffset, this.badgePositionPercentageOffset]);
    }
  };
  (pie_chart_data.PieChartSectionData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
    let value = opts && 'value' in opts ? opts.value : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let showTitle = opts && 'showTitle' in opts ? opts.showTitle : null;
    let titleStyle = opts && 'titleStyle' in opts ? opts.titleStyle : null;
    let title = opts && 'title' in opts ? opts.title : null;
    let badgeWidget = opts && 'badgeWidget' in opts ? opts.badgeWidget : null;
    let titlePositionPercentageOffset = opts && 'titlePositionPercentageOffset' in opts ? opts.titlePositionPercentageOffset : null;
    let badgePositionPercentageOffset = opts && 'badgePositionPercentageOffset' in opts ? opts.badgePositionPercentageOffset : null;
    this[value$] = (t0 = value, t0 == null ? 10.0 : t0);
    this[color$] = (t0$ = color, t0$ == null ? colors$.Colors.red : t0$);
    this[radius$] = (t0$0 = radius, t0$0 == null ? 40.0 : t0$0);
    this[showTitle$] = (t0$1 = showTitle, t0$1 == null ? true : t0$1);
    this[titleStyle$] = (t0$2 = titleStyle, t0$2 == null ? C[21] || CT.C21 : t0$2);
    this[title$] = (t0$3 = title, t0$3 == null ? dart.toString(value) : t0$3);
    this[badgeWidget$] = badgeWidget;
    this[titlePositionPercentageOffset$] = (t0$4 = titlePositionPercentageOffset, t0$4 == null ? 0.5 : t0$4);
    this[badgePositionPercentageOffset$] = (t0$5 = badgePositionPercentageOffset, t0$5 == null ? 0.5 : t0$5);
    ;
  }).prototype = pie_chart_data.PieChartSectionData.prototype;
  dart.addTypeTests(pie_chart_data.PieChartSectionData);
  dart.addTypeCaches(pie_chart_data.PieChartSectionData);
  dart.setMethodSignature(pie_chart_data.PieChartSectionData, () => ({
    __proto__: dart.getMethods(pie_chart_data.PieChartSectionData.__proto__),
    copyWith: dart.fnType(dart.legacy(pie_chart_data.PieChartSectionData), [], {badgePositionPercentageOffset: dart.legacy(core.double), badgeWidget: dart.legacy(framework.Widget), color: dart.legacy(ui.Color), radius: dart.legacy(core.double), showTitle: dart.legacy(core.bool), title: dart.legacy(core.String), titlePositionPercentageOffset: dart.legacy(core.double), titleStyle: dart.legacy(text_style.TextStyle), value: dart.legacy(core.double)}, {})
  }));
  dart.setGetterSignature(pie_chart_data.PieChartSectionData, () => ({
    __proto__: dart.getGetters(pie_chart_data.PieChartSectionData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(pie_chart_data.PieChartSectionData, I[7]);
  dart.setFieldSignature(pie_chart_data.PieChartSectionData, () => ({
    __proto__: dart.getFields(pie_chart_data.PieChartSectionData.__proto__),
    value: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(ui.Color)),
    radius: dart.finalFieldType(dart.legacy(core.double)),
    showTitle: dart.finalFieldType(dart.legacy(core.bool)),
    titleStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    title: dart.finalFieldType(dart.legacy(core.String)),
    badgeWidget: dart.finalFieldType(dart.legacy(framework.Widget)),
    titlePositionPercentageOffset: dart.finalFieldType(dart.legacy(core.double)),
    badgePositionPercentageOffset: dart.finalFieldType(dart.legacy(core.double))
  }));
  var touchCallback$ = dart.privateName(pie_chart_data, "PieTouchData.touchCallback");
  var enabled$ = dart.privateName(base_chart_data, "FlTouchData.enabled");
  const Object_EquatableMixin$36$1 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$1.new = function() {
  }).prototype = Object_EquatableMixin$36$1.prototype;
  dart.applyMixin(Object_EquatableMixin$36$1, equatable_mixin.EquatableMixin);
  base_chart_data.FlTouchData = class FlTouchData extends Object_EquatableMixin$36$1 {
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      super.enabled = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.enabled]);
    }
  };
  (base_chart_data.FlTouchData.new = function(enabled) {
    this[enabled$] = enabled;
    ;
  }).prototype = base_chart_data.FlTouchData.prototype;
  dart.addTypeTests(base_chart_data.FlTouchData);
  dart.addTypeCaches(base_chart_data.FlTouchData);
  dart.setGetterSignature(base_chart_data.FlTouchData, () => ({
    __proto__: dart.getGetters(base_chart_data.FlTouchData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(base_chart_data.FlTouchData, I[2]);
  dart.setFieldSignature(base_chart_data.FlTouchData, () => ({
    __proto__: dart.getFields(base_chart_data.FlTouchData.__proto__),
    enabled: dart.finalFieldType(dart.legacy(core.bool))
  }));
  const FlTouchData_EquatableMixin$36 = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36.new = function(enabled) {
    FlTouchData_EquatableMixin$36.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36, equatable_mixin.EquatableMixin);
  pie_chart_data.PieTouchData = class PieTouchData extends FlTouchData_EquatableMixin$36 {
    get touchCallback() {
      return this[touchCallback$];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.enabled]);
    }
  };
  (pie_chart_data.PieTouchData.new = function(opts) {
    let t0;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    this[touchCallback$] = touchCallback;
    pie_chart_data.PieTouchData.__proto__.new.call(this, (t0 = enabled, t0 == null ? true : t0));
    ;
  }).prototype = pie_chart_data.PieTouchData.prototype;
  dart.addTypeTests(pie_chart_data.PieTouchData);
  dart.addTypeCaches(pie_chart_data.PieTouchData);
  dart.setLibraryUri(pie_chart_data.PieTouchData, I[7]);
  dart.setFieldSignature(pie_chart_data.PieTouchData, () => ({
    __proto__: dart.getFields(pie_chart_data.PieTouchData.__proto__),
    touchCallback: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(pie_chart_data.PieTouchResponse)])))
  }));
  var touchedSection$ = dart.privateName(pie_chart_data, "PieTouchResponse.touchedSection");
  var touchedSectionIndex$ = dart.privateName(pie_chart_data, "PieTouchResponse.touchedSectionIndex");
  var touchAngle$ = dart.privateName(pie_chart_data, "PieTouchResponse.touchAngle");
  var touchRadius$ = dart.privateName(pie_chart_data, "PieTouchResponse.touchRadius");
  const BaseTouchResponse_EquatableMixin$36$ = class BaseTouchResponse_EquatableMixin extends base_chart_data.BaseTouchResponse {};
  (BaseTouchResponse_EquatableMixin$36$.new = function(touchInput) {
    BaseTouchResponse_EquatableMixin$36$.__proto__.new.call(this, touchInput);
  }).prototype = BaseTouchResponse_EquatableMixin$36$.prototype;
  dart.applyMixin(BaseTouchResponse_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  pie_chart_data.PieTouchResponse = class PieTouchResponse extends BaseTouchResponse_EquatableMixin$36$ {
    get touchedSection() {
      return this[touchedSection$];
    }
    set touchedSection(value) {
      super.touchedSection = value;
    }
    get touchedSectionIndex() {
      return this[touchedSectionIndex$];
    }
    set touchedSectionIndex(value) {
      super.touchedSectionIndex = value;
    }
    get touchAngle() {
      return this[touchAngle$];
    }
    set touchAngle(value) {
      super.touchAngle = value;
    }
    get touchRadius() {
      return this[touchRadius$];
    }
    set touchRadius(value) {
      super.touchRadius = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.touchedSection, this.touchedSectionIndex, this.touchAngle, this.touchRadius, this.touchInput]);
    }
  };
  (pie_chart_data.PieTouchResponse.new = function(touchedSection, touchedSectionIndex, touchAngle, touchRadius, touchInput) {
    this[touchedSection$] = touchedSection;
    this[touchedSectionIndex$] = touchedSectionIndex;
    this[touchAngle$] = touchAngle;
    this[touchRadius$] = touchRadius;
    pie_chart_data.PieTouchResponse.__proto__.new.call(this, touchInput);
    ;
  }).prototype = pie_chart_data.PieTouchResponse.prototype;
  dart.addTypeTests(pie_chart_data.PieTouchResponse);
  dart.addTypeCaches(pie_chart_data.PieTouchResponse);
  dart.setLibraryUri(pie_chart_data.PieTouchResponse, I[7]);
  dart.setFieldSignature(pie_chart_data.PieTouchResponse, () => ({
    __proto__: dart.getFields(pie_chart_data.PieTouchResponse.__proto__),
    touchedSection: dart.finalFieldType(dart.legacy(pie_chart_data.PieChartSectionData)),
    touchedSectionIndex: dart.finalFieldType(dart.legacy(core.int)),
    touchAngle: dart.finalFieldType(dart.legacy(core.double)),
    touchRadius: dart.finalFieldType(dart.legacy(core.double))
  }));
  pie_chart_data.PieChartDataTween = class PieChartDataTween extends tween.Tween$(dart.legacy(pie_chart_data.PieChartData)) {
    lerp(t) {
      return T$.PieChartDataL().as(this.begin.lerp(this.begin, this.end, t));
    }
  };
  (pie_chart_data.PieChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    pie_chart_data.PieChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = pie_chart_data.PieChartDataTween.prototype;
  dart.addTypeTests(pie_chart_data.PieChartDataTween);
  dart.addTypeCaches(pie_chart_data.PieChartDataTween);
  dart.setMethodSignature(pie_chart_data.PieChartDataTween, () => ({
    __proto__: dart.getMethods(pie_chart_data.PieChartDataTween.__proto__),
    lerp: dart.fnType(dart.legacy(pie_chart_data.PieChartData), [dart.legacy(core.double)])
  }));
  dart.setLibraryUri(pie_chart_data.PieChartDataTween, I[7]);
  var _sectionPaint = dart.privateName(pie_chart_painter, "_sectionPaint");
  var _sectionsSpaceClearPaint = dart.privateName(pie_chart_painter, "_sectionsSpaceClearPaint");
  var _centerSpacePaint = dart.privateName(pie_chart_painter, "_centerSpacePaint");
  var _calculateSectionsAngle = dart.privateName(pie_chart_painter, "_calculateSectionsAngle");
  var _drawCenterSpace = dart.privateName(pie_chart_painter, "_drawCenterSpace");
  var _drawSections = dart.privateName(pie_chart_painter, "_drawSections");
  var _drawTexts = dart.privateName(pie_chart_painter, "_drawTexts");
  var _calculateCenterRadius = dart.privateName(pie_chart_painter, "_calculateCenterRadius");
  var _removeSectionsSpace = dart.privateName(pie_chart_painter, "_removeSectionsSpace");
  var _getTouchedDetails = dart.privateName(pie_chart_painter, "_getTouchedDetails");
  pie_chart_painter.PieChartWidgetsPositionHandler = class PieChartWidgetsPositionHandler extends core.Object {};
  pie_chart_painter.PieChartWidgetsPositionHandler[dart.mixinOn] = Object => class PieChartWidgetsPositionHandler extends Object {
    getBadgeOffsets(size) {
      return dart.throw(new core.UnsupportedError.new("not implemented"));
    }
  };
  (pie_chart_painter.PieChartWidgetsPositionHandler[dart.mixinNew] = function() {
  }).prototype = pie_chart_painter.PieChartWidgetsPositionHandler.prototype;
  dart.addTypeTests(pie_chart_painter.PieChartWidgetsPositionHandler);
  dart.addTypeCaches(pie_chart_painter.PieChartWidgetsPositionHandler);
  pie_chart_painter.PieChartWidgetsPositionHandler[dart.implements] = () => [core.Object];
  dart.setMethodSignature(pie_chart_painter.PieChartWidgetsPositionHandler, () => ({
    __proto__: dart.getMethods(pie_chart_painter.PieChartWidgetsPositionHandler.__proto__),
    getBadgeOffsets: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(ui.Offset))), [dart.legacy(ui.Size)])
  }));
  dart.setLibraryUri(pie_chart_painter.PieChartWidgetsPositionHandler, I[8]);
  const BaseChartPainter_TouchHandler$36 = class BaseChartPainter_TouchHandler extends base_chart_painter.BaseChartPainter$(dart.legacy(pie_chart_data.PieChartData)) {};
  (BaseChartPainter_TouchHandler$36.new = function(data, targetData, opts) {
    BaseChartPainter_TouchHandler$36.__proto__.new.call(this, data, targetData, opts);
  }).prototype = BaseChartPainter_TouchHandler$36.prototype;
  dart.applyMixin(BaseChartPainter_TouchHandler$36, base_chart_painter.TouchHandler$(dart.legacy(pie_chart_data.PieTouchResponse)));
  const BaseChartPainter_PieChartWidgetsPositionHandler$36 = class BaseChartPainter_PieChartWidgetsPositionHandler extends BaseChartPainter_TouchHandler$36 {};
  (BaseChartPainter_PieChartWidgetsPositionHandler$36.new = function(data, targetData, opts) {
    BaseChartPainter_PieChartWidgetsPositionHandler$36.__proto__.new.call(this, data, targetData, opts);
  }).prototype = BaseChartPainter_PieChartWidgetsPositionHandler$36.prototype;
  dart.applyMixin(BaseChartPainter_PieChartWidgetsPositionHandler$36, pie_chart_painter.PieChartWidgetsPositionHandler);
  pie_chart_painter.PieChartPainter = class PieChartPainter extends BaseChartPainter_PieChartWidgetsPositionHandler$36 {
    paint(canvas, size) {
      super.paint(canvas, size);
      if (dart.test(this.data.sections[$isEmpty])) {
        return;
      }
      let canvasWrapper = new canvas_wrapper.CanvasWrapper.new(canvas, size);
      let sectionsAngle = this[_calculateSectionsAngle](this.data.sections, this.data.sumValue);
      this[_drawCenterSpace](canvasWrapper);
      this[_drawSections](canvasWrapper, sectionsAngle);
      this[_drawTexts](canvasWrapper);
    }
    [_calculateSectionsAngle](sections, sumValue) {
      return sections[$map](T$.doubleL(), dart.fn(section => 360 * (dart.notNull(section.value) / dart.notNull(sumValue)), T$.PieChartSectionDataLTodoubleL()))[$toList]();
    }
    [_drawCenterSpace](canvasWrapper) {
      let viewSize = canvasWrapper.size;
      let centerX = dart.notNull(viewSize.width) / 2;
      let centerY = dart.notNull(viewSize.height) / 2;
      canvasWrapper.drawCircle(new ui.Offset.new(centerX, centerY), this.data.centerSpaceRadius, this[_centerSpacePaint]);
    }
    [_drawSections](canvasWrapper, sectionsAngle) {
      let shouldDrawSeparators = this.data.sectionsSpace !== 0 && this.data.sections[$length] !== 1;
      let viewSize = canvasWrapper.size;
      if (shouldDrawSeparators) {
        canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, 0.0, viewSize.width, viewSize.height), ui.Paint.new());
      }
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      let tempAngle = this.data.startDegreeOffset;
      for (let i = 0; i < dart.notNull(this.data.sections[$length]); i = i + 1) {
        let section = this.data.sections[$_get](i);
        let sectionDegree = sectionsAngle[$_get](i);
        let rect = new ui.Rect.fromCircle({center: center, radius: dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) + dart.notNull(section.radius) / 2});
        this[_sectionPaint].color = section.color;
        this[_sectionPaint].strokeWidth = section.radius;
        let startAngle = tempAngle;
        let sweepAngle = sectionDegree;
        canvasWrapper.drawArc(rect, utils.radians(startAngle), utils.radians(sweepAngle), false, this[_sectionPaint]);
        tempAngle = dart.notNull(tempAngle) + dart.notNull(sweepAngle);
      }
      if (shouldDrawSeparators) {
        this[_removeSectionsSpace](canvasWrapper);
      }
    }
    [_removeSectionsSpace](canvasWrapper) {
      let viewSize = canvasWrapper.size;
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      let tempAngle = this.data.startDegreeOffset;
      this.data.sections[$asMap]()[$forEach](dart.fn((index, section) => {
        let previousIndex = index === 0 ? dart.notNull(this.data.sections[$length]) - 1 : dart.notNull(index) - 1;
        let previousSection = this.data.sections[$_get](previousIndex);
        let maxSectionRadius = math.max(T$.doubleL(), section.radius, previousSection.radius);
        let startAngle = tempAngle;
        let sweepAngle = 360 * (dart.notNull(section.value) / dart.notNull(this.data.sumValue));
        let sectionsStartFrom = center['+'](new ui.Offset.new(math.cos(utils.radians(startAngle)) * (dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) - 1), math.sin(utils.radians(startAngle)) * (dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) - 1)));
        let sectionsStartTo = center['+'](new ui.Offset.new(math.cos(utils.radians(startAngle)) * (dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) + maxSectionRadius + 1), math.sin(utils.radians(startAngle)) * (dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) + maxSectionRadius + 1)));
        this[_sectionsSpaceClearPaint].strokeWidth = this.data.sectionsSpace;
        canvasWrapper.drawLine(sectionsStartFrom, sectionsStartTo, this[_sectionsSpaceClearPaint]);
        tempAngle = dart.notNull(tempAngle) + sweepAngle;
      }, T$.intLAndPieChartSectionDataLToNull()));
      canvasWrapper.restore();
    }
    [_drawTexts](canvasWrapper) {
      let viewSize = canvasWrapper.size;
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      let tempAngle = this.data.startDegreeOffset;
      for (let i = 0; i < dart.notNull(this.data.sections[$length]); i = i + 1) {
        let section = this.data.sections[$_get](i);
        let startAngle = tempAngle;
        let sweepAngle = 360 * (dart.notNull(section.value) / dart.notNull(this.data.sumValue));
        let sectionCenterAngle = dart.notNull(startAngle) + sweepAngle / 2;
        const sectionCenter = percentageOffset => {
          return center['+'](new ui.Offset.new(math.cos(utils.radians(sectionCenterAngle)) * (dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) + dart.notNull(section.radius) * dart.notNull(percentageOffset)), math.sin(utils.radians(sectionCenterAngle)) * (dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) + dart.notNull(section.radius) * dart.notNull(percentageOffset))));
        };
        dart.fn(sectionCenter, T$.doubleLToOffsetL());
        let sectionCenterOffsetTitle = sectionCenter(section.titlePositionPercentageOffset);
        if (dart.test(section.showTitle)) {
          let span = new text_span.TextSpan.new({style: section.titleStyle, text: section.title});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
          tp.layout();
          canvasWrapper.drawText(tp, sectionCenterOffsetTitle['-'](new ui.Offset.new(dart.notNull(tp.width) / 2, dart.notNull(tp.height) / 2)));
        }
        tempAngle = dart.notNull(tempAngle) + sweepAngle;
      }
    }
    [_calculateCenterRadius](viewSize, givenCenterRadius) {
      if (!givenCenterRadius[$isInfinite]) {
        return givenCenterRadius;
      }
      let maxRadius = 0.0;
      for (let i = 0; i < dart.notNull(this.data.sections[$length]); i = i + 1) {
        let section = this.data.sections[$_get](i);
        if (dart.notNull(section.radius) > dart.notNull(maxRadius)) {
          maxRadius = section.radius;
        }
      }
      let minWidthHeight = math.min(T$.doubleL(), viewSize.width, viewSize.height);
      let centerRadius = (minWidthHeight - dart.notNull(maxRadius) * 2) / 2;
      return centerRadius;
    }
    handleTouch(touchInput, size) {
      let sectionsAngle = this[_calculateSectionsAngle](this.data.sections, this.data.sumValue);
      return this[_getTouchedDetails](size, touchInput, sectionsAngle);
    }
    [_getTouchedDetails](viewSize, touchInput, sectionsAngle) {
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      if (touchInput.getOffset() == null) {
        return null;
      }
      let touchedPoint2 = touchInput.getOffset()['-'](center);
      let touchX = touchedPoint2.dx;
      let touchY = touchedPoint2.dy;
      let touchR = math.sqrt(math.pow(touchX, 2) + math.pow(touchY, 2));
      let touchAngle = utils.degrees(math.atan2(touchY, touchX));
      touchAngle = dart.notNull(touchAngle) < 0 ? 180 - touchAngle[$abs]() + 180 : touchAngle;
      let foundSectionData = null;
      let foundSectionDataPosition = null;
      let relativeTouchAngle = (dart.notNull(touchAngle) - dart.notNull(this.data.startDegreeOffset))[$modulo](360);
      let tempAngle = 0.0;
      for (let i = 0; i < dart.notNull(this.data.sections[$length]); i = i + 1) {
        let section = this.data.sections[$_get](i);
        let sectionAngle = sectionsAngle[$_get](i);
        tempAngle = tempAngle[$modulo](360);
        if (this.data.sections[$length] === 1) {
          sectionAngle = 360.0;
        } else {
          sectionAngle = sectionAngle[$modulo](360);
        }
        let space = dart.notNull(this.data.sectionsSpace) / 2;
        let fromDegree = tempAngle + space;
        let toDegree = dart.notNull(sectionAngle) + tempAngle - space;
        let isInDegree = relativeTouchAngle >= fromDegree && relativeTouchAngle <= toDegree;
        let centerRadius = this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius);
        let sectionRadius = dart.notNull(centerRadius) + dart.notNull(section.radius);
        let isInRadius = touchR > dart.notNull(centerRadius) && touchR <= sectionRadius;
        if (isInDegree && isInRadius) {
          foundSectionData = section;
          foundSectionDataPosition = i;
          break;
        }
        tempAngle = tempAngle + dart.notNull(sectionAngle);
      }
      return new pie_chart_data.PieTouchResponse.new(foundSectionData, foundSectionDataPosition, touchAngle, touchR, touchInput);
    }
    getBadgeOffsets(viewSize) {
      let center = new ui.Offset.new(dart.notNull(viewSize.width) / 2, dart.notNull(viewSize.height) / 2);
      let badgeWidgetsOffsets = new (T$.IdentityMapOfintL$OffsetL()).new();
      let tempAngle = this.data.startDegreeOffset;
      for (let i = 0; i < dart.notNull(this.data.sections[$length]); i = i + 1) {
        let section = this.data.sections[$_get](i);
        let startAngle = tempAngle;
        let sweepAngle = 360 * (dart.notNull(section.value) / dart.notNull(this.data.sumValue));
        let sectionCenterAngle = dart.notNull(startAngle) + sweepAngle / 2;
        const sectionCenter = percentageOffset => {
          return center['+'](new ui.Offset.new(math.cos(utils.radians(sectionCenterAngle)) * (dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) + dart.notNull(section.radius) * dart.notNull(percentageOffset)), math.sin(utils.radians(sectionCenterAngle)) * (dart.notNull(this[_calculateCenterRadius](viewSize, this.data.centerSpaceRadius)) + dart.notNull(section.radius) * dart.notNull(percentageOffset))));
        };
        dart.fn(sectionCenter, T$.doubleLToOffsetL());
        let sectionCenterOffsetBadgeWidget = sectionCenter(section.badgePositionPercentageOffset);
        if (section.badgeWidget != null) {
          badgeWidgetsOffsets[$_set](i, sectionCenterOffsetBadgeWidget);
        }
        tempAngle = dart.notNull(tempAngle) + sweepAngle;
      }
      return badgeWidgetsOffsets;
    }
    shouldRepaint(oldDelegate) {
      T$.PieChartPainterL().as(oldDelegate);
      return !dart.equals(oldDelegate.data, this.data);
    }
  };
  (pie_chart_painter.PieChartPainter.new = function(data, targetData, touchHandler, opts) {
    let t0, t0$, t0$0;
    let widgetsPositionHandler = opts && 'widgetsPositionHandler' in opts ? opts.widgetsPositionHandler : null;
    let textScale = opts && 'textScale' in opts ? opts.textScale : null;
    this[_sectionPaint] = null;
    this[_sectionsSpaceClearPaint] = null;
    this[_centerSpacePaint] = null;
    pie_chart_painter.PieChartPainter.__proto__.new.call(this, data, targetData, {textScale: textScale});
    touchHandler(this);
    if (widgetsPositionHandler != null) {
      widgetsPositionHandler(this);
    }
    this[_sectionPaint] = (t0 = ui.Paint.new(), (() => {
      t0.style = ui.PaintingStyle.stroke;
      return t0;
    })());
    this[_sectionsSpaceClearPaint] = (t0$ = ui.Paint.new(), (() => {
      t0$.style = ui.PaintingStyle.fill;
      t0$.color = C[24] || CT.C24;
      t0$.blendMode = ui.BlendMode.srcOut;
      return t0$;
    })());
    this[_centerSpacePaint] = (t0$0 = ui.Paint.new(), (() => {
      t0$0.style = ui.PaintingStyle.fill;
      t0$0.color = data.centerSpaceColor;
      return t0$0;
    })());
  }).prototype = pie_chart_painter.PieChartPainter.prototype;
  dart.addTypeTests(pie_chart_painter.PieChartPainter);
  dart.addTypeCaches(pie_chart_painter.PieChartPainter);
  dart.setMethodSignature(pie_chart_painter.PieChartPainter, () => ({
    __proto__: dart.getMethods(pie_chart_painter.PieChartPainter.__proto__),
    [_calculateSectionsAngle]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.double))), [dart.legacy(core.List$(dart.legacy(pie_chart_data.PieChartSectionData))), dart.legacy(core.double)]),
    [_drawCenterSpace]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
    [_drawSections]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(core.List$(dart.legacy(core.double)))]),
    [_removeSectionsSpace]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
    [_drawTexts]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
    [_calculateCenterRadius]: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.Size), dart.legacy(core.double)]),
    [_getTouchedDetails]: dart.fnType(dart.legacy(pie_chart_data.PieTouchResponse), [dart.legacy(ui.Size), dart.legacy(touch_input.FlTouchInput), dart.legacy(core.List$(dart.legacy(core.double)))]),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(pie_chart_painter.PieChartPainter, I[8]);
  dart.setFieldSignature(pie_chart_painter.PieChartPainter, () => ({
    __proto__: dart.getFields(pie_chart_painter.PieChartPainter.__proto__),
    [_sectionPaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_sectionsSpaceClearPaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_centerSpacePaint]: dart.fieldType(dart.legacy(ui.Paint))
  }));
  var data$1 = dart.privateName(pie_chart, "PieChart.data");
  pie_chart.PieChart = class PieChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$1];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new pie_chart._PieChartState.new();
    }
  };
  (pie_chart.PieChart.new = function(data, opts) {
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$1] = data;
    pie_chart.PieChart.__proto__.new.call(this, {duration: swapAnimationDuration, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = pie_chart.PieChart.prototype;
  dart.addTypeTests(pie_chart.PieChart);
  dart.addTypeCaches(pie_chart.PieChart);
  dart.setMethodSignature(pie_chart.PieChart, () => ({
    __proto__: dart.getMethods(pie_chart.PieChart.__proto__),
    createState: dart.fnType(dart.legacy(pie_chart._PieChartState), [])
  }));
  dart.setLibraryUri(pie_chart.PieChart, I[9]);
  dart.setFieldSignature(pie_chart.PieChart, () => ({
    __proto__: dart.getFields(pie_chart.PieChart.__proto__),
    data: dart.finalFieldType(dart.legacy(pie_chart_data.PieChartData))
  }));
  dart.defineLazy(pie_chart.PieChart, {
    /*pie_chart.PieChart.defaultDuration*/get defaultDuration() {
      return C[2] || CT.C2;
    }
  }, true);
  var _pieChartDataTween = dart.privateName(pie_chart, "_pieChartDataTween");
  var _touchHandler$ = dart.privateName(pie_chart, "_touchHandler");
  var _widgetsPositionHandler = dart.privateName(pie_chart, "_widgetsPositionHandler");
  var _chartKey$ = dart.privateName(pie_chart, "_chartKey");
  var _getData$ = dart.privateName(pie_chart, "_getData");
  var _getChartSize$ = dart.privateName(pie_chart, "_getChartSize");
  var _canHandleTouch$ = dart.privateName(pie_chart, "_canHandleTouch");
  pie_chart._PieChartState = class _PieChartState extends implicit_animations.AnimatedWidgetBaseState$(dart.legacy(pie_chart.PieChart)) {
    initState() {
      binding.WidgetsBinding.instance.addPostFrameCallback(dart.fn(_ => {
        if (dart.test(this.mounted)) {
          this.setState(dart.fn(() => {
          }, T$.VoidToNull()));
        }
      }, T$.DurationLToNull()));
      super.initState();
    }
    build(context) {
      let showingData = this[_getData$]();
      let touchData = showingData.pieTouchData;
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$]();
          if (chartSize == null) {
            return;
          }
          let response = T$.PieTouchResponseL().as((t0 = this[_touchHandler$], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressStart.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressStartDetailsLToNull()), onLongPressEnd: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$]();
          if (chartSize == null) {
            return;
          }
          let response = T$.PieTouchResponseL().as((t0 = this[_touchHandler$], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressEnd.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressEndDetailsLToNull()), onLongPressMoveUpdate: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$]();
          if (chartSize == null) {
            return;
          }
          let response = T$.PieTouchResponseL().as((t0 = this[_touchHandler$], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressMoveUpdate.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressMoveUpdateDetailsLToNull()), onPanCancel: dart.fn(() => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$]();
          if (chartSize == null) {
            return;
          }
          let response = T$.PieTouchResponseL().as((t0 = this[_touchHandler$], t0 == null ? null : t0.handleTouch(new touch_input.FlPanEnd.new(ui.Offset.zero, C[3] || CT.C3), chartSize)));
          if (dart.test(this[_canHandleTouch$](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.VoidToNull()), onPanEnd: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$]();
          if (chartSize == null) {
            return;
          }
          let response = T$.PieTouchResponseL().as((t0 = this[_touchHandler$], t0 == null ? null : t0.handleTouch(new touch_input.FlPanEnd.new(ui.Offset.zero, details.velocity), chartSize)));
          if (dart.test(this[_canHandleTouch$](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragEndDetailsLToNull()), onPanDown: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$]();
          if (chartSize == null) {
            return;
          }
          let response = T$.PieTouchResponseL().as((t0 = this[_touchHandler$], t0 == null ? null : t0.handleTouch(new touch_input.FlPanStart.new(details.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragDownDetailsLToNull()), onPanUpdate: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$]();
          if (chartSize == null) {
            return;
          }
          let response = T$.PieTouchResponseL().as((t0 = this[_touchHandler$], t0 == null ? null : t0.handleTouch(new touch_input.FlPanMoveUpdate.new(details.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragUpdateDetailsLToNull()), child: new basic.CustomPaint.new({key: this[_chartKey$], size: utils.getDefaultSize(media_query.MediaQuery.of(context).size), painter: new pie_chart_painter.PieChartPainter.new(this[_pieChartDataTween].evaluate(this.animation), showingData, dart.fn(touchHandler => {
            this.setState(dart.fn(() => {
              this[_touchHandler$] = touchHandler;
            }, T$.VoidToNull()));
          }, T$.TouchHandlerLOfBaseTouchResponseLToNull()), {textScale: media_query.MediaQuery.of(context).textScaleFactor, widgetsPositionHandler: dart.fn(widgetPositionHandler => {
              this.setState(dart.fn(() => {
                this[_widgetsPositionHandler] = widgetPositionHandler;
              }, T$.VoidToNull()));
            }, T$.PieChartWidgetsPositionHandlerLToNull())}), child: this.badgeWidgets(), $creationLocationd_0dea112b090073317d4: C[25] || CT.C25}), $creationLocationd_0dea112b090073317d4: C[31] || CT.C31});
    }
    badgeWidgets() {
      let chartSize = this[_getChartSize$]();
      if (chartSize != null && this[_widgetsPositionHandler] != null) {
        let offsetsMap = this[_widgetsPositionHandler].getBadgeOffsets(chartSize);
        if (dart.test(offsetsMap[$isNotEmpty])) {
          return new basic.CustomMultiChildLayout.new({delegate: new pie_chart.BadgeWidgetsDelegate.new({badgeWidgetsCount: offsetsMap[$length], badgeWidgetsOffsets: offsetsMap}), children: T$.ListOfWidgetL().generate(offsetsMap[$length], dart.fn(index => {
              let _key = offsetsMap[$keys][$elementAt](index);
              if (offsetsMap[$length] != this[_getData$]().sections[$length]) {
                return new basic.LayoutId.new({id: _key, child: new container.Container.new({$creationLocationd_0dea112b090073317d4: C[41] || CT.C41}), $creationLocationd_0dea112b090073317d4: C[43] || CT.C43});
              }
              let _badgeWidget = this[_getData$]().sections[$_get](_key).badgeWidget;
              if (_badgeWidget == null) {
                return new basic.LayoutId.new({id: _key, child: new container.Container.new({$creationLocationd_0dea112b090073317d4: C[47] || CT.C47}), $creationLocationd_0dea112b090073317d4: C[48] || CT.C48});
              }
              return new basic.LayoutId.new({id: _key, child: _badgeWidget, $creationLocationd_0dea112b090073317d4: C[52] || CT.C52});
            }, T$.intLToLayoutIdL())), $creationLocationd_0dea112b090073317d4: C[56] || CT.C56});
        }
      }
      return null;
    }
    [_canHandleTouch$](response, touchData) {
      return response != null && touchData != null && touchData.touchCallback != null;
    }
    [_getChartSize$]() {
      let t0;
      let containerRenderBox = T$.RenderBoxL().as((t0 = this[_chartKey$].currentContext, t0 == null ? null : t0.findRenderObject()));
      if (containerRenderBox != null && dart.test(containerRenderBox.hasSize)) {
        return containerRenderBox.size;
      }
      return null;
    }
    [_getData$]() {
      return this.widget.data;
    }
    forEachTween(visitor) {
      this[_pieChartDataTween] = T$.PieChartDataTweenL().as(visitor(this[_pieChartDataTween], this.widget.data, dart.fn(value => new pie_chart_data.PieChartDataTween.new({begin: T$.PieChartDataL().as(value)}), T$.dynamicToPieChartDataTweenL())));
    }
  };
  (pie_chart._PieChartState.new = function() {
    this[_pieChartDataTween] = null;
    this[_touchHandler$] = null;
    this[_widgetsPositionHandler] = null;
    this[_chartKey$] = T$.GlobalKeyOfStateLOfStatefulWidgetL().new();
    pie_chart._PieChartState.__proto__.new.call(this);
    ;
  }).prototype = pie_chart._PieChartState.prototype;
  dart.addTypeTests(pie_chart._PieChartState);
  dart.addTypeCaches(pie_chart._PieChartState);
  dart.setMethodSignature(pie_chart._PieChartState, () => ({
    __proto__: dart.getMethods(pie_chart._PieChartState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    badgeWidgets: dart.fnType(dart.legacy(framework.Widget), []),
    [_canHandleTouch$]: dart.fnType(dart.legacy(core.bool), [dart.legacy(pie_chart_data.PieTouchResponse), dart.legacy(pie_chart_data.PieTouchData)]),
    [_getChartSize$]: dart.fnType(dart.legacy(ui.Size), []),
    [_getData$]: dart.fnType(dart.legacy(pie_chart_data.PieChartData), []),
    forEachTween: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(tween.Tween), [dart.legacy(tween.Tween), dart.dynamic, dart.legacy(dart.fnType(dart.legacy(tween.Tween), [dart.dynamic]))]))])
  }));
  dart.setLibraryUri(pie_chart._PieChartState, I[9]);
  dart.setFieldSignature(pie_chart._PieChartState, () => ({
    __proto__: dart.getFields(pie_chart._PieChartState.__proto__),
    [_pieChartDataTween]: dart.fieldType(dart.legacy(pie_chart_data.PieChartDataTween)),
    [_touchHandler$]: dart.fieldType(dart.legacy(base_chart_painter.TouchHandler$(dart.legacy(base_chart_data.BaseTouchResponse)))),
    [_widgetsPositionHandler]: dart.fieldType(dart.legacy(pie_chart_painter.PieChartWidgetsPositionHandler)),
    [_chartKey$]: dart.finalFieldType(dart.legacy(framework.GlobalKey$(framework.State$(framework.StatefulWidget))))
  }));
  var badgeWidgetsCount$ = dart.privateName(pie_chart, "BadgeWidgetsDelegate.badgeWidgetsCount");
  var badgeWidgetsOffsets$ = dart.privateName(pie_chart, "BadgeWidgetsDelegate.badgeWidgetsOffsets");
  pie_chart.BadgeWidgetsDelegate = class BadgeWidgetsDelegate extends custom_layout.MultiChildLayoutDelegate {
    get badgeWidgetsCount() {
      return this[badgeWidgetsCount$];
    }
    set badgeWidgetsCount(value) {
      super.badgeWidgetsCount = value;
    }
    get badgeWidgetsOffsets() {
      return this[badgeWidgetsOffsets$];
    }
    set badgeWidgetsOffsets(value) {
      super.badgeWidgetsOffsets = value;
    }
    performLayout(size) {
      for (let index = 0; index < dart.notNull(this.badgeWidgetsCount); index = index + 1) {
        let _key = this.badgeWidgetsOffsets[$keys][$elementAt](index);
        let _size = this.layoutChild(_key, new box.BoxConstraints.new({maxWidth: size.width, maxHeight: size.height}));
        this.positionChild(_key, new ui.Offset.new(dart.notNull(this.badgeWidgetsOffsets[$_get](_key).dx) - dart.notNull(_size.width) / 2, dart.notNull(this.badgeWidgetsOffsets[$_get](_key).dy) - dart.notNull(_size.height) / 2));
      }
    }
    shouldRelayout(oldDelegate) {
      T$.BadgeWidgetsDelegateL().as(oldDelegate);
      return !dart.equals(oldDelegate.badgeWidgetsOffsets, this.badgeWidgetsOffsets);
    }
  };
  (pie_chart.BadgeWidgetsDelegate.new = function(opts) {
    let badgeWidgetsCount = opts && 'badgeWidgetsCount' in opts ? opts.badgeWidgetsCount : null;
    let badgeWidgetsOffsets = opts && 'badgeWidgetsOffsets' in opts ? opts.badgeWidgetsOffsets : null;
    this[badgeWidgetsCount$] = badgeWidgetsCount;
    this[badgeWidgetsOffsets$] = badgeWidgetsOffsets;
    pie_chart.BadgeWidgetsDelegate.__proto__.new.call(this);
    ;
  }).prototype = pie_chart.BadgeWidgetsDelegate.prototype;
  dart.addTypeTests(pie_chart.BadgeWidgetsDelegate);
  dart.addTypeCaches(pie_chart.BadgeWidgetsDelegate);
  dart.setMethodSignature(pie_chart.BadgeWidgetsDelegate, () => ({
    __proto__: dart.getMethods(pie_chart.BadgeWidgetsDelegate.__proto__),
    performLayout: dart.fnType(dart.void, [dart.legacy(ui.Size)]),
    shouldRelayout: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(pie_chart.BadgeWidgetsDelegate, I[9]);
  dart.setFieldSignature(pie_chart.BadgeWidgetsDelegate, () => ({
    __proto__: dart.getFields(pie_chart.BadgeWidgetsDelegate.__proto__),
    badgeWidgetsCount: dart.finalFieldType(dart.legacy(core.int)),
    badgeWidgetsOffsets: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(ui.Offset))))
  }));
  var show$ = dart.privateName(scatter_chart_data, "ScatterSpot.show");
  var radius$0 = dart.privateName(scatter_chart_data, "ScatterSpot.radius");
  var color$0 = dart.privateName(scatter_chart_data, "ScatterSpot.color");
  var x$ = dart.privateName(axis_chart_data, "FlSpot.x");
  var y$ = dart.privateName(axis_chart_data, "FlSpot.y");
  const Object_EquatableMixin$36$2 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$2.new = function() {
  }).prototype = Object_EquatableMixin$36$2.prototype;
  dart.applyMixin(Object_EquatableMixin$36$2, equatable_mixin.EquatableMixin);
  axis_chart_data.FlSpot = class FlSpot extends Object_EquatableMixin$36$2 {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    copyWith(opts) {
      let t0, t0$;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      return new axis_chart_data.FlSpot.new((t0 = x, t0 == null ? this.x : t0), (t0$ = y, t0$ == null ? this.y : t0$));
    }
    toString() {
      return "(" + dart.toString(this.x) + ", " + dart.toString(this.y) + ")";
    }
    isNull() {
      return this.x == null || this.y == null;
    }
    isNotNull() {
      return !dart.test(this.isNull());
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.x, this.y]);
    }
    static lerp(a, b, t) {
      return new axis_chart_data.FlSpot.new(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));
    }
  };
  (axis_chart_data.FlSpot.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    ;
  }).prototype = axis_chart_data.FlSpot.prototype;
  dart.addTypeTests(axis_chart_data.FlSpot);
  dart.addTypeCaches(axis_chart_data.FlSpot);
  dart.setMethodSignature(axis_chart_data.FlSpot, () => ({
    __proto__: dart.getMethods(axis_chart_data.FlSpot.__proto__),
    copyWith: dart.fnType(dart.legacy(axis_chart_data.FlSpot), [], {x: dart.legacy(core.double), y: dart.legacy(core.double)}, {}),
    isNull: dart.fnType(dart.legacy(core.bool), []),
    isNotNull: dart.fnType(dart.legacy(core.bool), [])
  }));
  dart.setGetterSignature(axis_chart_data.FlSpot, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlSpot.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.FlSpot, I[3]);
  dart.setFieldSignature(axis_chart_data.FlSpot, () => ({
    __proto__: dart.getFields(axis_chart_data.FlSpot.__proto__),
    x: dart.finalFieldType(dart.legacy(core.double)),
    y: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(axis_chart_data.FlSpot, ['toString']);
  dart.defineLazy(axis_chart_data.FlSpot, {
    /*axis_chart_data.FlSpot.nullSpot*/get nullSpot() {
      return new axis_chart_data.FlSpot.new(null, null);
    },
    set nullSpot(_) {}
  }, true);
  const FlSpot_EquatableMixin$36 = class FlSpot_EquatableMixin extends axis_chart_data.FlSpot {};
  (FlSpot_EquatableMixin$36.new = function(x, y) {
    FlSpot_EquatableMixin$36.__proto__.new.call(this, x, y);
  }).prototype = FlSpot_EquatableMixin$36.prototype;
  dart.applyMixin(FlSpot_EquatableMixin$36, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterSpot = class ScatterSpot extends FlSpot_EquatableMixin$36 {
    get show() {
      return this[show$];
    }
    set show(value) {
      super.show = value;
    }
    get radius() {
      return this[radius$0];
    }
    set radius(value) {
      super.radius = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      this[color$0] = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      let show = opts && 'show' in opts ? opts.show : null;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let color = opts && 'color' in opts ? opts.color : null;
      return new scatter_chart_data.ScatterSpot.new((t0 = x, t0 == null ? this.x : t0), (t0$ = y, t0$ == null ? this.y : t0$), {show: (t0$0 = show, t0$0 == null ? this.show : t0$0), radius: (t0$1 = radius, t0$1 == null ? this.radius : t0$1), color: (t0$2 = color, t0$2 == null ? this.color : t0$2)});
    }
    static lerp(a, b, t) {
      return new scatter_chart_data.ScatterSpot.new(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t), {show: b.show, radius: ui.lerpDouble(a.radius, b.radius, t), color: ui.Color.lerp(a.color, b.color, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.x, this.y, this.show, this.radius, this.color]);
    }
  };
  (scatter_chart_data.ScatterSpot.new = function(x, y, opts) {
    let t0, t0$, t0$0;
    let show = opts && 'show' in opts ? opts.show : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[show$] = (t0 = show, t0 == null ? true : t0);
    this[radius$0] = (t0$ = radius, t0$ == null ? 6.0 : t0$);
    this[color$0] = (t0$0 = color, t0$0 == null ? colors$.Colors.primaries[$_get]((dart.notNull(x) * dart.notNull(y))[$modulo](colors$.Colors.primaries[$length])[$toInt]()) : t0$0);
    scatter_chart_data.ScatterSpot.__proto__.new.call(this, x, y);
    ;
  }).prototype = scatter_chart_data.ScatterSpot.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterSpot);
  dart.addTypeCaches(scatter_chart_data.ScatterSpot);
  dart.setMethodSignature(scatter_chart_data.ScatterSpot, () => ({
    __proto__: dart.getMethods(scatter_chart_data.ScatterSpot.__proto__),
    copyWith: dart.fnType(dart.legacy(scatter_chart_data.ScatterSpot), [], {color: dart.legacy(ui.Color), radius: dart.legacy(core.double), show: dart.legacy(core.bool), x: dart.legacy(core.double), y: dart.legacy(core.double)}, {})
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterSpot, I[4]);
  dart.setFieldSignature(scatter_chart_data.ScatterSpot, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterSpot.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    radius: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.fieldType(dart.legacy(ui.Color))
  }));
  var touchTooltipData$ = dart.privateName(scatter_chart_data, "ScatterTouchData.touchTooltipData");
  var touchSpotThreshold$ = dart.privateName(scatter_chart_data, "ScatterTouchData.touchSpotThreshold");
  var handleBuiltInTouches$ = dart.privateName(scatter_chart_data, "ScatterTouchData.handleBuiltInTouches");
  var touchCallback$0 = dart.privateName(scatter_chart_data, "ScatterTouchData.touchCallback");
  const FlTouchData_EquatableMixin$36$ = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36$.new = function(enabled) {
    FlTouchData_EquatableMixin$36$.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36$.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterTouchData = class ScatterTouchData extends FlTouchData_EquatableMixin$36$ {
    get touchTooltipData() {
      return this[touchTooltipData$];
    }
    set touchTooltipData(value) {
      super.touchTooltipData = value;
    }
    get touchSpotThreshold() {
      return this[touchSpotThreshold$];
    }
    set touchSpotThreshold(value) {
      super.touchSpotThreshold = value;
    }
    get handleBuiltInTouches() {
      return this[handleBuiltInTouches$];
    }
    set handleBuiltInTouches(value) {
      super.handleBuiltInTouches = value;
    }
    get touchCallback() {
      return this[touchCallback$0];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
      let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
      let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
      let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
      return new scatter_chart_data.ScatterTouchData.new({enabled: (t0 = enabled, t0 == null ? this.enabled : t0), touchTooltipData: T$.ScatterTouchTooltipDataL().as((t0$ = touchTooltipData, t0$ == null ? this.touchTooltipData : t0$)), handleBuiltInTouches: (t0$0 = handleBuiltInTouches, t0$0 == null ? this.handleBuiltInTouches : t0$0), touchSpotThreshold: (t0$1 = touchSpotThreshold, t0$1 == null ? this.touchSpotThreshold : t0$1), touchCallback: (t0$2 = touchCallback, t0$2 == null ? this.touchCallback : t0$2)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.enabled, this.touchTooltipData, this.touchSpotThreshold, this.handleBuiltInTouches]);
    }
  };
  (scatter_chart_data.ScatterTouchData.new = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
    let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
    let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    this[touchTooltipData$] = (t0 = touchTooltipData, t0 == null ? new scatter_chart_data.ScatterTouchTooltipData.new() : t0);
    this[touchSpotThreshold$] = (t0$ = touchSpotThreshold, t0$ == null ? 10.0 : t0$);
    this[handleBuiltInTouches$] = (t0$0 = handleBuiltInTouches, t0$0 == null ? true : t0$0);
    this[touchCallback$0] = touchCallback;
    scatter_chart_data.ScatterTouchData.__proto__.new.call(this, (t0$1 = enabled, t0$1 == null ? true : t0$1));
    ;
  }).prototype = scatter_chart_data.ScatterTouchData.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTouchData);
  dart.addTypeCaches(scatter_chart_data.ScatterTouchData);
  dart.setMethodSignature(scatter_chart_data.ScatterTouchData, () => ({
    __proto__: dart.getMethods(scatter_chart_data.ScatterTouchData.__proto__),
    copyWith: dart.fnType(dart.legacy(scatter_chart_data.ScatterTouchData), [], {enabled: dart.legacy(core.bool), handleBuiltInTouches: dart.legacy(core.bool), touchCallback: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(scatter_chart_data.ScatterTouchResponse)])), touchSpotThreshold: dart.legacy(core.double), touchTooltipData: dart.legacy(line_chart_data.LineTouchTooltipData)}, {})
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterTouchData, I[4]);
  dart.setFieldSignature(scatter_chart_data.ScatterTouchData, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTouchData.__proto__),
    touchTooltipData: dart.finalFieldType(dart.legacy(scatter_chart_data.ScatterTouchTooltipData)),
    touchSpotThreshold: dart.finalFieldType(dart.legacy(core.double)),
    handleBuiltInTouches: dart.finalFieldType(dart.legacy(core.bool)),
    touchCallback: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(scatter_chart_data.ScatterTouchResponse)])))
  }));
  var tooltipBgColor$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.tooltipBgColor");
  var tooltipRoundedRadius$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.tooltipRoundedRadius");
  var tooltipPadding$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.tooltipPadding");
  var maxContentWidth$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.maxContentWidth");
  var getTooltipItems$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.getTooltipItems");
  var fitInsideHorizontally$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.fitInsideHorizontally");
  var fitInsideVertically$ = dart.privateName(scatter_chart_data, "ScatterTouchTooltipData.fitInsideVertically");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  const Object_EquatableMixin$36$3 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$3.new = function() {
  }).prototype = Object_EquatableMixin$36$3.prototype;
  dart.applyMixin(Object_EquatableMixin$36$3, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterTouchTooltipData = class ScatterTouchTooltipData extends Object_EquatableMixin$36$3 {
    get tooltipBgColor() {
      return this[tooltipBgColor$];
    }
    set tooltipBgColor(value) {
      super.tooltipBgColor = value;
    }
    get tooltipRoundedRadius() {
      return this[tooltipRoundedRadius$];
    }
    set tooltipRoundedRadius(value) {
      super.tooltipRoundedRadius = value;
    }
    get tooltipPadding() {
      return this[tooltipPadding$];
    }
    set tooltipPadding(value) {
      super.tooltipPadding = value;
    }
    get maxContentWidth() {
      return this[maxContentWidth$];
    }
    set maxContentWidth(value) {
      super.maxContentWidth = value;
    }
    get getTooltipItems() {
      return this[getTooltipItems$];
    }
    set getTooltipItems(value) {
      super.getTooltipItems = value;
    }
    get fitInsideHorizontally() {
      return this[fitInsideHorizontally$];
    }
    set fitInsideHorizontally(value) {
      super.fitInsideHorizontally = value;
    }
    get fitInsideVertically() {
      return this[fitInsideVertically$];
    }
    set fitInsideVertically(value) {
      super.fitInsideVertically = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.tooltipBgColor, this.tooltipRoundedRadius, this.tooltipPadding, this.maxContentWidth, this.getTooltipItems, this.fitInsideHorizontally, this.fitInsideVertically]);
    }
  };
  (scatter_chart_data.ScatterTouchTooltipData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
    let tooltipBgColor = opts && 'tooltipBgColor' in opts ? opts.tooltipBgColor : null;
    let tooltipRoundedRadius = opts && 'tooltipRoundedRadius' in opts ? opts.tooltipRoundedRadius : null;
    let tooltipPadding = opts && 'tooltipPadding' in opts ? opts.tooltipPadding : null;
    let maxContentWidth = opts && 'maxContentWidth' in opts ? opts.maxContentWidth : null;
    let getTooltipItems = opts && 'getTooltipItems' in opts ? opts.getTooltipItems : null;
    let fitInsideHorizontally = opts && 'fitInsideHorizontally' in opts ? opts.fitInsideHorizontally : null;
    let fitInsideVertically = opts && 'fitInsideVertically' in opts ? opts.fitInsideVertically : null;
    this[tooltipBgColor$] = (t0 = tooltipBgColor, t0 == null ? colors$.Colors.white : t0);
    this[tooltipRoundedRadius$] = (t0$ = tooltipRoundedRadius, t0$ == null ? 4.0 : t0$);
    this[tooltipPadding$] = (t0$0 = tooltipPadding, t0$0 == null ? C[60] || CT.C60 : t0$0);
    this[maxContentWidth$] = (t0$1 = maxContentWidth, t0$1 == null ? 120.0 : t0$1);
    this[getTooltipItems$] = (t0$2 = getTooltipItems, t0$2 == null ? C[61] || CT.C61 : t0$2);
    this[fitInsideHorizontally$] = (t0$3 = fitInsideHorizontally, t0$3 == null ? false : t0$3);
    this[fitInsideVertically$] = (t0$4 = fitInsideVertically, t0$4 == null ? false : t0$4);
    ;
  }).prototype = scatter_chart_data.ScatterTouchTooltipData.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTouchTooltipData);
  dart.addTypeCaches(scatter_chart_data.ScatterTouchTooltipData);
  dart.setGetterSignature(scatter_chart_data.ScatterTouchTooltipData, () => ({
    __proto__: dart.getGetters(scatter_chart_data.ScatterTouchTooltipData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterTouchTooltipData, I[4]);
  dart.setFieldSignature(scatter_chart_data.ScatterTouchTooltipData, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTouchTooltipData.__proto__),
    tooltipBgColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipRoundedRadius: dart.finalFieldType(dart.legacy(core.double)),
    tooltipPadding: dart.finalFieldType(dart.legacy(edge_insets.EdgeInsets)),
    maxContentWidth: dart.finalFieldType(dart.legacy(core.double)),
    getTooltipItems: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(scatter_chart_data.ScatterTooltipItem), [dart.legacy(scatter_chart_data.ScatterSpot)]))),
    fitInsideHorizontally: dart.finalFieldType(dart.legacy(core.bool)),
    fitInsideVertically: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var text$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.text");
  var textStyle$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.textStyle");
  var bottomMargin$ = dart.privateName(scatter_chart_data, "ScatterTooltipItem.bottomMargin");
  const Object_EquatableMixin$36$4 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$4.new = function() {
  }).prototype = Object_EquatableMixin$36$4.prototype;
  dart.applyMixin(Object_EquatableMixin$36$4, equatable_mixin.EquatableMixin);
  scatter_chart_data.ScatterTooltipItem = class ScatterTooltipItem extends Object_EquatableMixin$36$4 {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get bottomMargin() {
      return this[bottomMargin$];
    }
    set bottomMargin(value) {
      super.bottomMargin = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.text, this.textStyle, this.bottomMargin]);
    }
  };
  (scatter_chart_data.ScatterTooltipItem.new = function(text, textStyle, bottomMargin) {
    this[text$] = text;
    this[textStyle$] = textStyle;
    this[bottomMargin$] = bottomMargin;
    ;
  }).prototype = scatter_chart_data.ScatterTooltipItem.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterTooltipItem);
  dart.addTypeCaches(scatter_chart_data.ScatterTooltipItem);
  dart.setGetterSignature(scatter_chart_data.ScatterTooltipItem, () => ({
    __proto__: dart.getGetters(scatter_chart_data.ScatterTooltipItem.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterTooltipItem, I[4]);
  dart.setFieldSignature(scatter_chart_data.ScatterTooltipItem, () => ({
    __proto__: dart.getFields(scatter_chart_data.ScatterTooltipItem.__proto__),
    text: dart.finalFieldType(dart.legacy(core.String)),
    textStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    bottomMargin: dart.finalFieldType(dart.legacy(core.double))
  }));
  scatter_chart_data.ScatterChartDataTween = class ScatterChartDataTween extends tween.Tween$(dart.legacy(scatter_chart_data.ScatterChartData)) {
    lerp(t) {
      return this.begin.lerp(this.begin, this.end, t);
    }
  };
  (scatter_chart_data.ScatterChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    scatter_chart_data.ScatterChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = scatter_chart_data.ScatterChartDataTween.prototype;
  dart.addTypeTests(scatter_chart_data.ScatterChartDataTween);
  dart.addTypeCaches(scatter_chart_data.ScatterChartDataTween);
  dart.setMethodSignature(scatter_chart_data.ScatterChartDataTween, () => ({
    __proto__: dart.getMethods(scatter_chart_data.ScatterChartDataTween.__proto__),
    lerp: dart.fnType(dart.legacy(scatter_chart_data.ScatterChartData), [dart.legacy(core.double)])
  }));
  dart.setLibraryUri(scatter_chart_data.ScatterChartDataTween, I[4]);
  scatter_chart_data.defaultScatterTooltipItem = function defaultScatterTooltipItem(touchedSpot) {
    if (touchedSpot == null) {
      return null;
    }
    let textStyle = new text_style.TextStyle.new({color: touchedSpot.color, fontWeight: ui.FontWeight.bold, fontSize: 14.0});
    return new scatter_chart_data.ScatterTooltipItem.new(dart.str(touchedSpot.radius[$toInt]()), textStyle, dart.notNull(touchedSpot.radius) + dart.notNull(touchedSpot.radius) * 0.2);
  };
  lerp._lerpList = function _lerpList(T, a, b, t, opts) {
    let lerp = opts && 'lerp' in opts ? opts.lerp : null;
    if (a != null && b != null && a[$length] == b[$length]) {
      return core.List$(dart.legacy(T)).generate(a[$length], dart.fn(i => lerp(a[$_get](i), b[$_get](i), t), dart.fnType(dart.legacy(T), [T$.intL()])));
    } else if (a != null && b != null) {
      return core.List$(dart.legacy(T)).generate(b[$length], dart.fn(i => lerp(dart.notNull(i) >= dart.notNull(a[$length]) ? b[$_get](i) : a[$_get](i), b[$_get](i), t), dart.fnType(dart.legacy(T), [T$.intL()])));
    } else {
      return b;
    }
  };
  lerp.lerpColorList = function lerpColorList(a, b, t) {
    return lerp._lerpList(T$.ColorL(), a, b, t, {lerp: C[62] || CT.C62});
  };
  lerp.lerpDoubleList = function lerpDoubleList(a, b, t) {
    return lerp._lerpList(T$.doubleL(), a, b, t, {lerp: C[63] || CT.C63});
  };
  lerp.lerpIntList = function lerpIntList(a, b, t) {
    return lerp._lerpList(T$.intL(), a, b, t, {lerp: C[64] || CT.C64});
  };
  lerp.lerpInt = function lerpInt(a, b, t) {
    return (dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t))[$round]();
  };
  lerp.lerpFlSpotList = function lerpFlSpotList(a, b, t) {
    return lerp._lerpList(T$.FlSpotL(), a, b, t, {lerp: C[65] || CT.C65});
  };
  lerp.lerpHorizontalLineList = function lerpHorizontalLineList(a, b, t) {
    return lerp._lerpList(T$.HorizontalLineL(), a, b, t, {lerp: C[66] || CT.C66});
  };
  lerp.lerpVerticalLineList = function lerpVerticalLineList(a, b, t) {
    return lerp._lerpList(T$.VerticalLineL(), a, b, t, {lerp: C[67] || CT.C67});
  };
  lerp.lerpHorizontalRangeAnnotationList = function lerpHorizontalRangeAnnotationList(a, b, t) {
    return lerp._lerpList(T$.HorizontalRangeAnnotationL(), a, b, t, {lerp: C[68] || CT.C68});
  };
  lerp.lerpVerticalRangeAnnotationList = function lerpVerticalRangeAnnotationList(a, b, t) {
    return lerp._lerpList(T$.VerticalRangeAnnotationL(), a, b, t, {lerp: C[69] || CT.C69});
  };
  lerp.lerpLineChartBarDataList = function lerpLineChartBarDataList(a, b, t) {
    return lerp._lerpList(T$.LineChartBarDataL(), a, b, t, {lerp: C[70] || CT.C70});
  };
  lerp.lerpBetweenBarsDataList = function lerpBetweenBarsDataList(a, b, t) {
    return lerp._lerpList(T$.BetweenBarsDataL(), a, b, t, {lerp: C[71] || CT.C71});
  };
  lerp.lerpBarChartGroupDataList = function lerpBarChartGroupDataList(a, b, t) {
    return lerp._lerpList(T$.BarChartGroupDataL(), a, b, t, {lerp: C[72] || CT.C72});
  };
  lerp.lerpBarChartRodDataList = function lerpBarChartRodDataList(a, b, t) {
    return lerp._lerpList(T$.BarChartRodDataL(), a, b, t, {lerp: C[73] || CT.C73});
  };
  lerp.lerpPieChartSectionDataList = function lerpPieChartSectionDataList(a, b, t) {
    return lerp._lerpList(T$.PieChartSectionDataL(), a, b, t, {lerp: C[74] || CT.C74});
  };
  lerp.lerpScatterSpotList = function lerpScatterSpotList(a, b, t) {
    return lerp._lerpList(T$.ScatterSpotL(), a, b, t, {lerp: C[75] || CT.C75});
  };
  lerp.lerpBarChartRodStackList = function lerpBarChartRodStackList(a, b, t) {
    return lerp._lerpList(T$.BarChartRodStackItemL(), a, b, t, {lerp: C[76] || CT.C76});
  };
  var data$2 = dart.privateName(line_chart, "LineChart.data");
  line_chart.LineChart = class LineChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$2];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new line_chart._LineChartState.new();
    }
  };
  (line_chart.LineChart.new = function(data, opts) {
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$2] = data;
    line_chart.LineChart.__proto__.new.call(this, {duration: swapAnimationDuration, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = line_chart.LineChart.prototype;
  dart.addTypeTests(line_chart.LineChart);
  dart.addTypeCaches(line_chart.LineChart);
  dart.setMethodSignature(line_chart.LineChart, () => ({
    __proto__: dart.getMethods(line_chart.LineChart.__proto__),
    createState: dart.fnType(dart.legacy(line_chart._LineChartState), [])
  }));
  dart.setLibraryUri(line_chart.LineChart, I[10]);
  dart.setFieldSignature(line_chart.LineChart, () => ({
    __proto__: dart.getFields(line_chart.LineChart.__proto__),
    data: dart.finalFieldType(dart.legacy(line_chart_data.LineChartData))
  }));
  var _lineChartDataTween = dart.privateName(line_chart, "_lineChartDataTween");
  var _touchHandler$0 = dart.privateName(line_chart, "_touchHandler");
  var _chartKey$0 = dart.privateName(line_chart, "_chartKey");
  var _showingTouchedTooltips = dart.privateName(line_chart, "_showingTouchedTooltips");
  var _showingTouchedIndicators = dart.privateName(line_chart, "_showingTouchedIndicators");
  var _getData$0 = dart.privateName(line_chart, "_getData");
  var _getChartSize$0 = dart.privateName(line_chart, "_getChartSize");
  var _canHandleTouch$0 = dart.privateName(line_chart, "_canHandleTouch");
  var _withTouchedIndicators$ = dart.privateName(line_chart, "_withTouchedIndicators");
  var _handleBuiltInTouch$ = dart.privateName(line_chart, "_handleBuiltInTouch");
  line_chart._LineChartState = class _LineChartState extends implicit_animations.AnimatedWidgetBaseState$(dart.legacy(line_chart.LineChart)) {
    build(context) {
      let showingData = this[_getData$0]();
      let touchData = showingData.lineTouchData;
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$0]();
          if (chartSize == null) {
            return;
          }
          let response = T$.LineTouchResponseL().as((t0 = this[_touchHandler$0], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressStart.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$0](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressStartDetailsLToNull()), onLongPressEnd: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$0]();
          if (chartSize == null) {
            return;
          }
          let response = T$.LineTouchResponseL().as((t0 = this[_touchHandler$0], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressEnd.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$0](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressEndDetailsLToNull()), onLongPressMoveUpdate: dart.fn(d => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$0]();
          if (chartSize == null) {
            return;
          }
          let response = T$.LineTouchResponseL().as((t0 = this[_touchHandler$0], t0 == null ? null : t0.handleTouch(new touch_input.FlLongPressMoveUpdate.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$0](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.LongPressMoveUpdateDetailsLToNull()), onPanCancel: dart.fn(() => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$0]();
          if (chartSize == null) {
            return;
          }
          let response = T$.LineTouchResponseL().as((t0 = this[_touchHandler$0], t0 == null ? null : t0.handleTouch(new touch_input.FlPanEnd.new(ui.Offset.zero, C[3] || CT.C3), chartSize)));
          if (dart.test(this[_canHandleTouch$0](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.VoidToNull()), onPanEnd: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$0]();
          if (chartSize == null) {
            return;
          }
          let response = T$.LineTouchResponseL().as((t0 = this[_touchHandler$0], t0 == null ? null : t0.handleTouch(new touch_input.FlPanEnd.new(ui.Offset.zero, details.velocity), chartSize)));
          if (dart.test(this[_canHandleTouch$0](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragEndDetailsLToNull()), onPanDown: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$0]();
          if (chartSize == null) {
            return;
          }
          let response = T$.LineTouchResponseL().as((t0 = this[_touchHandler$0], t0 == null ? null : t0.handleTouch(new touch_input.FlPanStart.new(details.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$0](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragDownDetailsLToNull()), onPanUpdate: dart.fn(details => {
          let t0, t1, t0$;
          let chartSize = this[_getChartSize$0]();
          if (chartSize == null) {
            return;
          }
          let response = T$.LineTouchResponseL().as((t0 = this[_touchHandler$0], t0 == null ? null : t0.handleTouch(new touch_input.FlPanMoveUpdate.new(details.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$0](response, touchData))) {
            t0$ = touchData;
            t1 = response;
            t0$.touchCallback(t1);
          }
        }, T$.DragUpdateDetailsLToNull()), child: new basic.CustomPaint.new({key: this[_chartKey$0], size: utils.getDefaultSize(media_query.MediaQuery.of(context).size), painter: new line_chart_painter.LineChartPainter.new(this[_withTouchedIndicators$](this[_lineChartDataTween].evaluate(this.animation)), this[_withTouchedIndicators$](showingData), dart.fn(touchHandler => {
            this.setState(dart.fn(() => {
              this[_touchHandler$0] = touchHandler;
            }, T$.VoidToNull()));
          }, T$.TouchHandlerLOfBaseTouchResponseLToNull()), {textScale: media_query.MediaQuery.of(context).textScaleFactor}), $creationLocationd_0dea112b090073317d4: C[77] || CT.C77}), $creationLocationd_0dea112b090073317d4: C[82] || CT.C82});
    }
    [_canHandleTouch$0](response, touchData) {
      return response != null && touchData != null && touchData.touchCallback != null;
    }
    [_withTouchedIndicators$](lineChartData) {
      if (lineChartData == null) {
        return lineChartData;
      }
      if (!dart.test(lineChartData.lineTouchData.enabled) || !dart.test(lineChartData.lineTouchData.handleBuiltInTouches)) {
        return lineChartData;
      }
      return lineChartData.copyWith({showingTooltipIndicators: this[_showingTouchedTooltips], lineBarsData: lineChartData.lineBarsData[$map](T$.LineChartBarDataL(), dart.fn(barData => {
          let t0;
          let index = lineChartData.lineBarsData[$indexOf](barData);
          return barData.copyWith({showingIndicators: (t0 = this[_showingTouchedIndicators][$_get](index), t0 == null ? T$.JSArrayOfintL().of([]) : t0)});
        }, T$.LineChartBarDataLToLineChartBarDataL()))[$toList]()});
    }
    [_getChartSize$0]() {
      let t0;
      let containerRenderBox = T$.RenderBoxL().as((t0 = this[_chartKey$0].currentContext, t0 == null ? null : t0.findRenderObject()));
      if (containerRenderBox != null && dart.test(containerRenderBox.hasSize)) {
        return containerRenderBox.size;
      }
      return null;
    }
    [_getData$0]() {
      let lineTouchData = this.widget.data.lineTouchData;
      if (dart.test(lineTouchData.enabled) && dart.test(lineTouchData.handleBuiltInTouches)) {
        return this.widget.data.copyWith({lineTouchData: this.widget.data.lineTouchData.copyWith({touchCallback: dart.bind(this, _handleBuiltInTouch$)})});
      }
      return this.widget.data;
    }
    [_handleBuiltInTouch$](touchResponse) {
      let t1, t0;
      if (this.widget.data.lineTouchData.touchCallback != null) {
        t0 = this.widget.data.lineTouchData;
        t1 = touchResponse;
        t0.touchCallback(t1);
      }
      if (T$.FlPanStartL().is(touchResponse.touchInput) || T$.FlPanMoveUpdateL().is(touchResponse.touchInput) || T$.FlLongPressStartL().is(touchResponse.touchInput) || T$.FlLongPressMoveUpdateL().is(touchResponse.touchInput)) {
        this.setState(dart.fn(() => {
          let sortedLineSpots = T$.ListOfLineBarSpotL().of(touchResponse.lineBarSpots);
          sortedLineSpots[$sort](dart.fn((spot1, spot2) => spot2.y[$compareTo](spot1.y), T$.LineBarSpotLAndLineBarSpotLTointL()));
          this[_showingTouchedIndicators][$clear]();
          for (let i = 0; i < dart.notNull(touchResponse.lineBarSpots[$length]); i = i + 1) {
            let touchedBarSpot = touchResponse.lineBarSpots[$_get](i);
            let barPos = touchedBarSpot.barIndex;
            this[_showingTouchedIndicators][$_set](barPos, T$.JSArrayOfintL().of([touchedBarSpot.spotIndex]));
          }
          this[_showingTouchedTooltips][$clear]();
          this[_showingTouchedTooltips][$add](new line_chart_data.ShowingTooltipIndicators.new(0, sortedLineSpots));
        }, T$.VoidToNull()));
      } else {
        this.setState(dart.fn(() => {
          this[_showingTouchedTooltips][$clear]();
          this[_showingTouchedIndicators][$clear]();
        }, T$.VoidToNull()));
      }
    }
    forEachTween(visitor) {
      this[_lineChartDataTween] = T$.LineChartDataTweenL().as(visitor(this[_lineChartDataTween], this[_getData$0](), dart.fn(value => new line_chart_data.LineChartDataTween.new({begin: T$.LineChartDataL().as(value)}), T$.dynamicToLineChartDataTweenL())));
    }
  };
  (line_chart._LineChartState.new = function() {
    this[_lineChartDataTween] = null;
    this[_touchHandler$0] = null;
    this[_chartKey$0] = T$.GlobalKeyOfStateLOfStatefulWidgetL().new();
    this[_showingTouchedTooltips] = T$.JSArrayOfShowingTooltipIndicatorsL().of([]);
    this[_showingTouchedIndicators] = new (T$.IdentityMapOfintL$ListLOfintL()).new();
    line_chart._LineChartState.__proto__.new.call(this);
    ;
  }).prototype = line_chart._LineChartState.prototype;
  dart.addTypeTests(line_chart._LineChartState);
  dart.addTypeCaches(line_chart._LineChartState);
  dart.setMethodSignature(line_chart._LineChartState, () => ({
    __proto__: dart.getMethods(line_chart._LineChartState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_canHandleTouch$0]: dart.fnType(dart.legacy(core.bool), [dart.legacy(line_chart_data.LineTouchResponse), dart.legacy(line_chart_data.LineTouchData)]),
    [_withTouchedIndicators$]: dart.fnType(dart.legacy(line_chart_data.LineChartData), [dart.legacy(line_chart_data.LineChartData)]),
    [_getChartSize$0]: dart.fnType(dart.legacy(ui.Size), []),
    [_getData$0]: dart.fnType(dart.legacy(line_chart_data.LineChartData), []),
    [_handleBuiltInTouch$]: dart.fnType(dart.void, [dart.legacy(line_chart_data.LineTouchResponse)]),
    forEachTween: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(tween.Tween), [dart.legacy(tween.Tween), dart.dynamic, dart.legacy(dart.fnType(dart.legacy(tween.Tween), [dart.dynamic]))]))])
  }));
  dart.setLibraryUri(line_chart._LineChartState, I[10]);
  dart.setFieldSignature(line_chart._LineChartState, () => ({
    __proto__: dart.getFields(line_chart._LineChartState.__proto__),
    [_lineChartDataTween]: dart.fieldType(dart.legacy(line_chart_data.LineChartDataTween)),
    [_touchHandler$0]: dart.fieldType(dart.legacy(base_chart_painter.TouchHandler$(dart.legacy(base_chart_data.BaseTouchResponse)))),
    [_chartKey$0]: dart.finalFieldType(dart.legacy(framework.GlobalKey$(framework.State$(framework.StatefulWidget)))),
    [_showingTouchedTooltips]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(line_chart_data.ShowingTooltipIndicators)))),
    [_showingTouchedIndicators]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(core.int))))))
  }));
  var lineBarsData$ = dart.privateName(line_chart_data, "LineChartData.lineBarsData");
  var betweenBarsData$ = dart.privateName(line_chart_data, "LineChartData.betweenBarsData");
  var titlesData$0 = dart.privateName(line_chart_data, "LineChartData.titlesData");
  var extraLinesData$ = dart.privateName(line_chart_data, "LineChartData.extraLinesData");
  var lineTouchData$ = dart.privateName(line_chart_data, "LineChartData.lineTouchData");
  var showingTooltipIndicators$0 = dart.privateName(line_chart_data, "LineChartData.showingTooltipIndicators");
  const AxisChartData_EquatableMixin$36$ = class AxisChartData_EquatableMixin extends axis_chart_data.AxisChartData {};
  (AxisChartData_EquatableMixin$36$.new = function(opts) {
    AxisChartData_EquatableMixin$36$.__proto__.new.call(this, opts);
  }).prototype = AxisChartData_EquatableMixin$36$.prototype;
  dart.applyMixin(AxisChartData_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  line_chart_data.LineChartData = class LineChartData extends AxisChartData_EquatableMixin$36$ {
    get lineBarsData() {
      return this[lineBarsData$];
    }
    set lineBarsData(value) {
      super.lineBarsData = value;
    }
    get betweenBarsData() {
      return this[betweenBarsData$];
    }
    set betweenBarsData(value) {
      super.betweenBarsData = value;
    }
    get titlesData() {
      return this[titlesData$0];
    }
    set titlesData(value) {
      super.titlesData = value;
    }
    get extraLinesData() {
      return this[extraLinesData$];
    }
    set extraLinesData(value) {
      super.extraLinesData = value;
    }
    get lineTouchData() {
      return this[lineTouchData$];
    }
    set lineTouchData(value) {
      super.lineTouchData = value;
    }
    get showingTooltipIndicators() {
      return this[showingTooltipIndicators$0];
    }
    set showingTooltipIndicators(value) {
      super.showingTooltipIndicators = value;
    }
    initSuperMinMaxValues(minX, maxX, minY, maxY) {
      let t0, t0$, t0$0, t0$1;
      for (let i = 0; i < dart.notNull(this.lineBarsData[$length]); i = i + 1) {
        let lineBarChart = this.lineBarsData[$_get](i);
        if (lineBarChart.spots == null || dart.test(lineBarChart.spots[$isEmpty])) {
          dart.throw(core.Exception.new("spots could not be null or empty"));
        }
      }
      if (dart.test(this.lineBarsData[$isNotEmpty])) {
        let canModifyMinX = minX == null;
        let canModifyMaxX = maxX == null;
        let canModifyMinY = minY == null;
        let canModifyMaxY = maxY == null;
        for (let i = 0; i < dart.notNull(this.lineBarsData[$length]); i = i + 1) {
          let barData = this.lineBarsData[$_get](i);
          for (let j = 0; j < dart.notNull(barData.spots[$length]); j = j + 1) {
            let spot = barData.spots[$_get](j);
            if (dart.test(spot.isNotNull())) {
              if (canModifyMaxX && (maxX == null || dart.notNull(spot.x) > dart.notNull(maxX))) {
                maxX = spot.x;
              }
              if (canModifyMinX && (minX == null || dart.notNull(spot.x) < dart.notNull(minX))) {
                minX = spot.x;
              }
              if (canModifyMaxY && (maxY == null || dart.notNull(spot.y) > dart.notNull(maxY))) {
                maxY = spot.y;
              }
              if (canModifyMinY && (minY == null || dart.notNull(spot.y) < dart.notNull(minY))) {
                minY = spot.y;
              }
            }
          }
        }
      }
      super.minX = (t0 = minX, t0 == null ? 0.0 : t0);
      super.maxX = (t0$ = maxX, t0$ == null ? 1.0 : t0$);
      super.minY = (t0$0 = minY, t0$0 == null ? 0.0 : t0$0);
      super.maxY = (t0$1 = maxY, t0$1 == null ? 1.0 : t0$1);
    }
    lerp(a, b, t) {
      if (T$.LineChartDataL().is(a) && T$.LineChartDataL().is(b) && t != null) {
        return new line_chart_data.LineChartData.new({minX: ui.lerpDouble(a.minX, b.minX, t), maxX: ui.lerpDouble(a.maxX, b.maxX, t), minY: ui.lerpDouble(a.minY, b.minY, t), maxY: ui.lerpDouble(a.maxY, b.maxY, t), backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t), borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), clipData: b.clipData, extraLinesData: line_chart_data.ExtraLinesData.lerp(a.extraLinesData, b.extraLinesData, t), gridData: axis_chart_data.FlGridData.lerp(a.gridData, b.gridData, t), titlesData: axis_chart_data.FlTitlesData.lerp(a.titlesData, b.titlesData, t), axisTitleData: axis_chart_data.FlAxisTitleData.lerp(a.axisTitleData, b.axisTitleData, t), rangeAnnotations: axis_chart_data.RangeAnnotations.lerp(a.rangeAnnotations, b.rangeAnnotations, t), lineBarsData: lerp.lerpLineChartBarDataList(a.lineBarsData, b.lineBarsData, t), betweenBarsData: lerp.lerpBetweenBarsDataList(a.betweenBarsData, b.betweenBarsData, t), lineTouchData: b.lineTouchData, showingTooltipIndicators: b.showingTooltipIndicators});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13;
      let lineBarsData = opts && 'lineBarsData' in opts ? opts.lineBarsData : null;
      let betweenBarsData = opts && 'betweenBarsData' in opts ? opts.betweenBarsData : null;
      let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
      let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
      let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
      let extraLinesData = opts && 'extraLinesData' in opts ? opts.extraLinesData : null;
      let lineTouchData = opts && 'lineTouchData' in opts ? opts.lineTouchData : null;
      let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
      let gridData = opts && 'gridData' in opts ? opts.gridData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      let minX = opts && 'minX' in opts ? opts.minX : null;
      let maxX = opts && 'maxX' in opts ? opts.maxX : null;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let clipData = opts && 'clipData' in opts ? opts.clipData : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      return new line_chart_data.LineChartData.new({lineBarsData: (t0 = lineBarsData, t0 == null ? this.lineBarsData : t0), betweenBarsData: (t0$ = betweenBarsData, t0$ == null ? this.betweenBarsData : t0$), titlesData: (t0$0 = titlesData, t0$0 == null ? this.titlesData : t0$0), axisTitleData: (t0$1 = axisTitleData, t0$1 == null ? this.axisTitleData : t0$1), rangeAnnotations: (t0$2 = rangeAnnotations, t0$2 == null ? this.rangeAnnotations : t0$2), extraLinesData: (t0$3 = extraLinesData, t0$3 == null ? this.extraLinesData : t0$3), lineTouchData: (t0$4 = lineTouchData, t0$4 == null ? this.lineTouchData : t0$4), showingTooltipIndicators: (t0$5 = showingTooltipIndicators, t0$5 == null ? this.showingTooltipIndicators : t0$5), gridData: (t0$6 = gridData, t0$6 == null ? this.gridData : t0$6), borderData: (t0$7 = borderData, t0$7 == null ? this.borderData : t0$7), minX: (t0$8 = minX, t0$8 == null ? this.minX : t0$8), maxX: (t0$9 = maxX, t0$9 == null ? this.maxX : t0$9), minY: (t0$10 = minY, t0$10 == null ? this.minY : t0$10), maxY: (t0$11 = maxY, t0$11 == null ? this.maxY : t0$11), clipData: (t0$12 = clipData, t0$12 == null ? this.clipData : t0$12), backgroundColor: (t0$13 = backgroundColor, t0$13 == null ? this.backgroundColor : t0$13)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.lineBarsData, this.betweenBarsData, this.titlesData, this.extraLinesData, this.lineTouchData, this.showingTooltipIndicators, this.gridData, this.borderData, this.axisTitleData, this.rangeAnnotations, this.minX, this.maxX, this.minY, this.maxY, this.clipData, this.backgroundColor]);
    }
  };
  (line_chart_data.LineChartData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8;
    let lineBarsData = opts && 'lineBarsData' in opts ? opts.lineBarsData : null;
    let betweenBarsData = opts && 'betweenBarsData' in opts ? opts.betweenBarsData : null;
    let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
    let extraLinesData = opts && 'extraLinesData' in opts ? opts.extraLinesData : null;
    let lineTouchData = opts && 'lineTouchData' in opts ? opts.lineTouchData : null;
    let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
    let gridData = opts && 'gridData' in opts ? opts.gridData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
    let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
    let minX = opts && 'minX' in opts ? opts.minX : null;
    let maxX = opts && 'maxX' in opts ? opts.maxX : null;
    let minY = opts && 'minY' in opts ? opts.minY : null;
    let maxY = opts && 'maxY' in opts ? opts.maxY : null;
    let clipData = opts && 'clipData' in opts ? opts.clipData : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[lineBarsData$] = (t0 = lineBarsData, t0 == null ? C[92] || CT.C92 : t0);
    this[betweenBarsData$] = (t0$ = betweenBarsData, t0$ == null ? C[93] || CT.C93 : t0$);
    this[titlesData$0] = (t0$0 = titlesData, t0$0 == null ? new axis_chart_data.FlTitlesData.new() : t0$0);
    this[extraLinesData$] = (t0$1 = extraLinesData, t0$1 == null ? new line_chart_data.ExtraLinesData.new() : t0$1);
    this[lineTouchData$] = (t0$2 = lineTouchData, t0$2 == null ? new line_chart_data.LineTouchData.new() : t0$2);
    this[showingTooltipIndicators$0] = (t0$3 = showingTooltipIndicators, t0$3 == null ? C[94] || CT.C94 : t0$3);
    line_chart_data.LineChartData.__proto__.new.call(this, {gridData: (t0$4 = gridData, t0$4 == null ? new axis_chart_data.FlGridData.new() : t0$4), touchData: (t0$5 = lineTouchData, t0$5 == null ? new line_chart_data.LineTouchData.new() : t0$5), borderData: borderData, axisTitleData: (t0$6 = axisTitleData, t0$6 == null ? new axis_chart_data.FlAxisTitleData.new() : t0$6), rangeAnnotations: (t0$7 = rangeAnnotations, t0$7 == null ? new axis_chart_data.RangeAnnotations.new() : t0$7), clipData: (t0$8 = clipData, t0$8 == null ? new base_chart_data.FlClipData.none() : t0$8), backgroundColor: backgroundColor});
    this.initSuperMinMaxValues(minX, maxX, minY, maxY);
  }).prototype = line_chart_data.LineChartData.prototype;
  dart.addTypeTests(line_chart_data.LineChartData);
  dart.addTypeCaches(line_chart_data.LineChartData);
  dart.setMethodSignature(line_chart_data.LineChartData, () => ({
    __proto__: dart.getMethods(line_chart_data.LineChartData.__proto__),
    initSuperMinMaxValues: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    lerp: dart.fnType(dart.legacy(base_chart_data.BaseChartData), [dart.legacy(base_chart_data.BaseChartData), dart.legacy(base_chart_data.BaseChartData), dart.legacy(core.double)]),
    copyWith: dart.fnType(dart.legacy(line_chart_data.LineChartData), [], {axisTitleData: dart.legacy(axis_chart_data.FlAxisTitleData), backgroundColor: dart.legacy(ui.Color), betweenBarsData: dart.legacy(core.List$(dart.legacy(line_chart_data.BetweenBarsData))), borderData: dart.legacy(base_chart_data.FlBorderData), clipData: dart.legacy(base_chart_data.FlClipData), extraLinesData: dart.legacy(line_chart_data.ExtraLinesData), gridData: dart.legacy(axis_chart_data.FlGridData), lineBarsData: dart.legacy(core.List$(dart.legacy(line_chart_data.LineChartBarData))), lineTouchData: dart.legacy(line_chart_data.LineTouchData), maxX: dart.legacy(core.double), maxY: dart.legacy(core.double), minX: dart.legacy(core.double), minY: dart.legacy(core.double), rangeAnnotations: dart.legacy(axis_chart_data.RangeAnnotations), showingTooltipIndicators: dart.legacy(core.List$(dart.legacy(line_chart_data.ShowingTooltipIndicators))), titlesData: dart.legacy(axis_chart_data.FlTitlesData)}, {})
  }));
  dart.setLibraryUri(line_chart_data.LineChartData, I[11]);
  dart.setFieldSignature(line_chart_data.LineChartData, () => ({
    __proto__: dart.getFields(line_chart_data.LineChartData.__proto__),
    lineBarsData: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(line_chart_data.LineChartBarData)))),
    betweenBarsData: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(line_chart_data.BetweenBarsData)))),
    titlesData: dart.finalFieldType(dart.legacy(axis_chart_data.FlTitlesData)),
    extraLinesData: dart.finalFieldType(dart.legacy(line_chart_data.ExtraLinesData)),
    lineTouchData: dart.finalFieldType(dart.legacy(line_chart_data.LineTouchData)),
    showingTooltipIndicators: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(line_chart_data.ShowingTooltipIndicators))))
  }));
  var spots$ = dart.privateName(line_chart_data, "LineChartBarData.spots");
  var show$0 = dart.privateName(line_chart_data, "LineChartBarData.show");
  var colors$0 = dart.privateName(line_chart_data, "LineChartBarData.colors");
  var colorStops$ = dart.privateName(line_chart_data, "LineChartBarData.colorStops");
  var gradientFrom$ = dart.privateName(line_chart_data, "LineChartBarData.gradientFrom");
  var gradientTo$ = dart.privateName(line_chart_data, "LineChartBarData.gradientTo");
  var barWidth$ = dart.privateName(line_chart_data, "LineChartBarData.barWidth");
  var isCurved$ = dart.privateName(line_chart_data, "LineChartBarData.isCurved");
  var curveSmoothness$ = dart.privateName(line_chart_data, "LineChartBarData.curveSmoothness");
  var preventCurveOverShooting$ = dart.privateName(line_chart_data, "LineChartBarData.preventCurveOverShooting");
  var preventCurveOvershootingThreshold$ = dart.privateName(line_chart_data, "LineChartBarData.preventCurveOvershootingThreshold");
  var isStrokeCapRound$ = dart.privateName(line_chart_data, "LineChartBarData.isStrokeCapRound");
  var belowBarData$ = dart.privateName(line_chart_data, "LineChartBarData.belowBarData");
  var aboveBarData$ = dart.privateName(line_chart_data, "LineChartBarData.aboveBarData");
  var dotData$ = dart.privateName(line_chart_data, "LineChartBarData.dotData");
  var showingIndicators$ = dart.privateName(line_chart_data, "LineChartBarData.showingIndicators");
  var dashArray$ = dart.privateName(line_chart_data, "LineChartBarData.dashArray");
  var shadow$ = dart.privateName(line_chart_data, "LineChartBarData.shadow");
  var isStepLineChart$ = dart.privateName(line_chart_data, "LineChartBarData.isStepLineChart");
  var lineChartStepData$ = dart.privateName(line_chart_data, "LineChartBarData.lineChartStepData");
  var ColorSwatch__swatch = dart.privateName(colors, "ColorSwatch._swatch");
  var Shadow_blurRadius = dart.privateName(ui, "Shadow.blurRadius");
  var Shadow_offset = dart.privateName(ui, "Shadow.offset");
  var Shadow_color = dart.privateName(ui, "Shadow.color");
  const Object_EquatableMixin$36$5 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$5.new = function() {
  }).prototype = Object_EquatableMixin$36$5.prototype;
  dart.applyMixin(Object_EquatableMixin$36$5, equatable_mixin.EquatableMixin);
  line_chart_data.LineChartBarData = class LineChartBarData extends Object_EquatableMixin$36$5 {
    get spots() {
      return this[spots$];
    }
    set spots(value) {
      super.spots = value;
    }
    get show() {
      return this[show$0];
    }
    set show(value) {
      super.show = value;
    }
    get colors() {
      return this[colors$0];
    }
    set colors(value) {
      super.colors = value;
    }
    get colorStops() {
      return this[colorStops$];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    get gradientFrom() {
      return this[gradientFrom$];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get barWidth() {
      return this[barWidth$];
    }
    set barWidth(value) {
      super.barWidth = value;
    }
    get isCurved() {
      return this[isCurved$];
    }
    set isCurved(value) {
      super.isCurved = value;
    }
    get curveSmoothness() {
      return this[curveSmoothness$];
    }
    set curveSmoothness(value) {
      super.curveSmoothness = value;
    }
    get preventCurveOverShooting() {
      return this[preventCurveOverShooting$];
    }
    set preventCurveOverShooting(value) {
      super.preventCurveOverShooting = value;
    }
    get preventCurveOvershootingThreshold() {
      return this[preventCurveOvershootingThreshold$];
    }
    set preventCurveOvershootingThreshold(value) {
      super.preventCurveOvershootingThreshold = value;
    }
    get isStrokeCapRound() {
      return this[isStrokeCapRound$];
    }
    set isStrokeCapRound(value) {
      super.isStrokeCapRound = value;
    }
    get belowBarData() {
      return this[belowBarData$];
    }
    set belowBarData(value) {
      super.belowBarData = value;
    }
    get aboveBarData() {
      return this[aboveBarData$];
    }
    set aboveBarData(value) {
      super.aboveBarData = value;
    }
    get dotData() {
      return this[dotData$];
    }
    set dotData(value) {
      super.dotData = value;
    }
    get showingIndicators() {
      return this[showingIndicators$];
    }
    set showingIndicators(value) {
      super.showingIndicators = value;
    }
    get dashArray() {
      return this[dashArray$];
    }
    set dashArray(value) {
      super.dashArray = value;
    }
    get shadow() {
      return this[shadow$];
    }
    set shadow(value) {
      super.shadow = value;
    }
    get isStepLineChart() {
      return this[isStepLineChart$];
    }
    set isStepLineChart(value) {
      super.isStepLineChart = value;
    }
    get lineChartStepData() {
      return this[lineChartStepData$];
    }
    set lineChartStepData(value) {
      super.lineChartStepData = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.LineChartBarData.new({show: b.show, barWidth: ui.lerpDouble(a.barWidth, b.barWidth, t), belowBarData: line_chart_data.BarAreaData.lerp(a.belowBarData, b.belowBarData, t), aboveBarData: line_chart_data.BarAreaData.lerp(a.aboveBarData, b.aboveBarData, t), curveSmoothness: b.curveSmoothness, isCurved: b.isCurved, isStrokeCapRound: b.isStrokeCapRound, preventCurveOverShooting: b.preventCurveOverShooting, preventCurveOvershootingThreshold: ui.lerpDouble(a.preventCurveOvershootingThreshold, b.preventCurveOvershootingThreshold, t), dotData: line_chart_data.FlDotData.lerp(a.dotData, b.dotData, t), dashArray: lerp.lerpIntList(a.dashArray, b.dashArray, t), colors: lerp.lerpColorList(a.colors, b.colors, t), colorStops: lerp.lerpDoubleList(a.colorStops, b.colorStops, t), gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), spots: lerp.lerpFlSpotList(a.spots, b.spots, t), showingIndicators: b.showingIndicators, shadow: ui.Shadow.lerp(a.shadow, b.shadow, t), isStepLineChart: b.isStepLineChart, lineChartStepData: line_chart_data.LineChartStepData.lerp(a.lineChartStepData, b.lineChartStepData, t)});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17;
      let spots = opts && 'spots' in opts ? opts.spots : null;
      let show = opts && 'show' in opts ? opts.show : null;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let colorStops = opts && 'colorStops' in opts ? opts.colorStops : null;
      let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
      let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
      let barWidth = opts && 'barWidth' in opts ? opts.barWidth : null;
      let isCurved = opts && 'isCurved' in opts ? opts.isCurved : null;
      let curveSmoothness = opts && 'curveSmoothness' in opts ? opts.curveSmoothness : null;
      let preventCurveOverShooting = opts && 'preventCurveOverShooting' in opts ? opts.preventCurveOverShooting : null;
      let preventCurveOvershootingThreshold = opts && 'preventCurveOvershootingThreshold' in opts ? opts.preventCurveOvershootingThreshold : null;
      let isStrokeCapRound = opts && 'isStrokeCapRound' in opts ? opts.isStrokeCapRound : null;
      let belowBarData = opts && 'belowBarData' in opts ? opts.belowBarData : null;
      let aboveBarData = opts && 'aboveBarData' in opts ? opts.aboveBarData : null;
      let dotData = opts && 'dotData' in opts ? opts.dotData : null;
      let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
      let showingIndicators = opts && 'showingIndicators' in opts ? opts.showingIndicators : null;
      let shadow = opts && 'shadow' in opts ? opts.shadow : null;
      let isStepLineChart = opts && 'isStepLineChart' in opts ? opts.isStepLineChart : null;
      let lineChartStepData = opts && 'lineChartStepData' in opts ? opts.lineChartStepData : null;
      return new line_chart_data.LineChartBarData.new({spots: (t0 = spots, t0 == null ? this.spots : t0), show: (t0$ = show, t0$ == null ? this.show : t0$), colors: (t0$0 = colors, t0$0 == null ? this.colors : t0$0), colorStops: (t0$1 = colorStops, t0$1 == null ? this.colorStops : t0$1), gradientFrom: (t0$2 = gradientFrom, t0$2 == null ? this.gradientFrom : t0$2), gradientTo: (t0$3 = gradientTo, t0$3 == null ? this.gradientTo : t0$3), barWidth: (t0$4 = barWidth, t0$4 == null ? this.barWidth : t0$4), isCurved: (t0$5 = isCurved, t0$5 == null ? this.isCurved : t0$5), curveSmoothness: (t0$6 = curveSmoothness, t0$6 == null ? this.curveSmoothness : t0$6), preventCurveOverShooting: (t0$7 = preventCurveOverShooting, t0$7 == null ? this.preventCurveOverShooting : t0$7), preventCurveOvershootingThreshold: (t0$8 = preventCurveOvershootingThreshold, t0$8 == null ? this.preventCurveOvershootingThreshold : t0$8), isStrokeCapRound: (t0$9 = isStrokeCapRound, t0$9 == null ? this.isStrokeCapRound : t0$9), belowBarData: (t0$10 = belowBarData, t0$10 == null ? this.belowBarData : t0$10), aboveBarData: (t0$11 = aboveBarData, t0$11 == null ? this.aboveBarData : t0$11), dashArray: (t0$12 = dashArray, t0$12 == null ? this.dashArray : t0$12), dotData: (t0$13 = dotData, t0$13 == null ? this.dotData : t0$13), showingIndicators: (t0$14 = showingIndicators, t0$14 == null ? this.showingIndicators : t0$14), shadow: (t0$15 = shadow, t0$15 == null ? this.shadow : t0$15), isStepLineChart: (t0$16 = isStepLineChart, t0$16 == null ? this.isStepLineChart : t0$16), lineChartStepData: (t0$17 = lineChartStepData, t0$17 == null ? this.lineChartStepData : t0$17)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.spots, this.show, this.colors, this.colorStops, this.gradientFrom, this.gradientTo, this.barWidth, this.isCurved, this.curveSmoothness, this.preventCurveOverShooting, this.preventCurveOvershootingThreshold, this.isStrokeCapRound, this.belowBarData, this.aboveBarData, this.dotData, this.showingIndicators, this.dashArray, this.shadow, this.isStepLineChart, this.lineChartStepData]);
    }
  };
  (line_chart_data.LineChartBarData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15;
    let spots = opts && 'spots' in opts ? opts.spots : null;
    let show = opts && 'show' in opts ? opts.show : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let colorStops = opts && 'colorStops' in opts ? opts.colorStops : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let barWidth = opts && 'barWidth' in opts ? opts.barWidth : null;
    let isCurved = opts && 'isCurved' in opts ? opts.isCurved : null;
    let curveSmoothness = opts && 'curveSmoothness' in opts ? opts.curveSmoothness : null;
    let preventCurveOverShooting = opts && 'preventCurveOverShooting' in opts ? opts.preventCurveOverShooting : null;
    let preventCurveOvershootingThreshold = opts && 'preventCurveOvershootingThreshold' in opts ? opts.preventCurveOvershootingThreshold : null;
    let isStrokeCapRound = opts && 'isStrokeCapRound' in opts ? opts.isStrokeCapRound : null;
    let belowBarData = opts && 'belowBarData' in opts ? opts.belowBarData : null;
    let aboveBarData = opts && 'aboveBarData' in opts ? opts.aboveBarData : null;
    let dotData = opts && 'dotData' in opts ? opts.dotData : null;
    let showingIndicators = opts && 'showingIndicators' in opts ? opts.showingIndicators : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    let shadow = opts && 'shadow' in opts ? opts.shadow : null;
    let isStepLineChart = opts && 'isStepLineChart' in opts ? opts.isStepLineChart : null;
    let lineChartStepData = opts && 'lineChartStepData' in opts ? opts.lineChartStepData : null;
    this[spots$] = (t0 = spots, t0 == null ? C[95] || CT.C95 : t0);
    this[show$0] = (t0$ = show, t0$ == null ? true : t0$);
    this[colors$0] = (t0$0 = colors, t0$0 == null ? C[96] || CT.C96 : t0$0);
    this[colorStops$] = colorStops;
    this[gradientFrom$] = (t0$1 = gradientFrom, t0$1 == null ? C[4] || CT.C4 : t0$1);
    this[gradientTo$] = (t0$2 = gradientTo, t0$2 == null ? C[103] || CT.C103 : t0$2);
    this[barWidth$] = (t0$3 = barWidth, t0$3 == null ? 2.0 : t0$3);
    this[isCurved$] = (t0$4 = isCurved, t0$4 == null ? false : t0$4);
    this[curveSmoothness$] = (t0$5 = curveSmoothness, t0$5 == null ? 0.35 : t0$5);
    this[preventCurveOverShooting$] = (t0$6 = preventCurveOverShooting, t0$6 == null ? false : t0$6);
    this[preventCurveOvershootingThreshold$] = (t0$7 = preventCurveOvershootingThreshold, t0$7 == null ? 10.0 : t0$7);
    this[isStrokeCapRound$] = (t0$8 = isStrokeCapRound, t0$8 == null ? false : t0$8);
    this[belowBarData$] = (t0$9 = belowBarData, t0$9 == null ? new line_chart_data.BarAreaData.new() : t0$9);
    this[aboveBarData$] = (t0$10 = aboveBarData, t0$10 == null ? new line_chart_data.BarAreaData.new() : t0$10);
    this[dotData$] = (t0$11 = dotData, t0$11 == null ? new line_chart_data.FlDotData.new() : t0$11);
    this[showingIndicators$] = (t0$12 = showingIndicators, t0$12 == null ? C[1] || CT.C1 : t0$12);
    this[dashArray$] = dashArray;
    this[shadow$] = (t0$13 = shadow, t0$13 == null ? C[104] || CT.C104 : t0$13);
    this[isStepLineChart$] = (t0$14 = isStepLineChart, t0$14 == null ? false : t0$14);
    this[lineChartStepData$] = (t0$15 = lineChartStepData, t0$15 == null ? new line_chart_data.LineChartStepData.new() : t0$15);
    ;
  }).prototype = line_chart_data.LineChartBarData.prototype;
  dart.addTypeTests(line_chart_data.LineChartBarData);
  dart.addTypeCaches(line_chart_data.LineChartBarData);
  dart.setMethodSignature(line_chart_data.LineChartBarData, () => ({
    __proto__: dart.getMethods(line_chart_data.LineChartBarData.__proto__),
    copyWith: dart.fnType(dart.legacy(line_chart_data.LineChartBarData), [], {aboveBarData: dart.legacy(line_chart_data.BarAreaData), barWidth: dart.legacy(core.double), belowBarData: dart.legacy(line_chart_data.BarAreaData), colorStops: dart.legacy(core.List$(dart.legacy(core.double))), colors: dart.legacy(core.List$(dart.legacy(ui.Color))), curveSmoothness: dart.legacy(core.double), dashArray: dart.legacy(core.List$(dart.legacy(core.int))), dotData: dart.legacy(line_chart_data.FlDotData), gradientFrom: dart.legacy(ui.Offset), gradientTo: dart.legacy(ui.Offset), isCurved: dart.legacy(core.bool), isStepLineChart: dart.legacy(core.bool), isStrokeCapRound: dart.legacy(core.bool), lineChartStepData: dart.legacy(line_chart_data.LineChartStepData), preventCurveOverShooting: dart.legacy(core.bool), preventCurveOvershootingThreshold: dart.legacy(core.double), shadow: dart.legacy(ui.Shadow), show: dart.legacy(core.bool), showingIndicators: dart.legacy(core.List$(dart.legacy(core.int))), spots: dart.legacy(core.List$(dart.legacy(axis_chart_data.FlSpot)))}, {})
  }));
  dart.setGetterSignature(line_chart_data.LineChartBarData, () => ({
    __proto__: dart.getGetters(line_chart_data.LineChartBarData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.LineChartBarData, I[11]);
  dart.setFieldSignature(line_chart_data.LineChartBarData, () => ({
    __proto__: dart.getFields(line_chart_data.LineChartBarData.__proto__),
    spots: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(axis_chart_data.FlSpot)))),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    colors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Color)))),
    colorStops: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    gradientFrom: dart.finalFieldType(dart.legacy(ui.Offset)),
    gradientTo: dart.finalFieldType(dart.legacy(ui.Offset)),
    barWidth: dart.finalFieldType(dart.legacy(core.double)),
    isCurved: dart.finalFieldType(dart.legacy(core.bool)),
    curveSmoothness: dart.finalFieldType(dart.legacy(core.double)),
    preventCurveOverShooting: dart.finalFieldType(dart.legacy(core.bool)),
    preventCurveOvershootingThreshold: dart.finalFieldType(dart.legacy(core.double)),
    isStrokeCapRound: dart.finalFieldType(dart.legacy(core.bool)),
    belowBarData: dart.finalFieldType(dart.legacy(line_chart_data.BarAreaData)),
    aboveBarData: dart.finalFieldType(dart.legacy(line_chart_data.BarAreaData)),
    dotData: dart.finalFieldType(dart.legacy(line_chart_data.FlDotData)),
    showingIndicators: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    dashArray: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    shadow: dart.finalFieldType(dart.legacy(ui.Shadow)),
    isStepLineChart: dart.finalFieldType(dart.legacy(core.bool)),
    lineChartStepData: dart.finalFieldType(dart.legacy(line_chart_data.LineChartStepData))
  }));
  var stepDirection$ = dart.privateName(line_chart_data, "LineChartStepData.stepDirection");
  const Object_EquatableMixin$36$6 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$6.new = function() {
  }).prototype = Object_EquatableMixin$36$6.prototype;
  dart.applyMixin(Object_EquatableMixin$36$6, equatable_mixin.EquatableMixin);
  line_chart_data.LineChartStepData = class LineChartStepData extends Object_EquatableMixin$36$6 {
    get stepDirection() {
      return this[stepDirection$];
    }
    set stepDirection(value) {
      super.stepDirection = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.LineChartStepData.new({stepDirection: ui.lerpDouble(a.stepDirection, b.stepDirection, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.stepDirection]);
    }
  };
  (line_chart_data.LineChartStepData.new = function(opts) {
    let stepDirection = opts && 'stepDirection' in opts ? opts.stepDirection : 0.5;
    this[stepDirection$] = stepDirection;
    ;
  }).prototype = line_chart_data.LineChartStepData.prototype;
  dart.addTypeTests(line_chart_data.LineChartStepData);
  dart.addTypeCaches(line_chart_data.LineChartStepData);
  dart.setGetterSignature(line_chart_data.LineChartStepData, () => ({
    __proto__: dart.getGetters(line_chart_data.LineChartStepData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.LineChartStepData, I[11]);
  dart.setFieldSignature(line_chart_data.LineChartStepData, () => ({
    __proto__: dart.getFields(line_chart_data.LineChartStepData.__proto__),
    stepDirection: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineLazy(line_chart_data.LineChartStepData, {
    /*line_chart_data.LineChartStepData.stepDirectionForward*/get stepDirectionForward() {
      return 0;
    },
    /*line_chart_data.LineChartStepData.stepDirectionMiddle*/get stepDirectionMiddle() {
      return 0.5;
    },
    /*line_chart_data.LineChartStepData.stepDirectionBackward*/get stepDirectionBackward() {
      return 1;
    }
  }, true);
  var show$1 = dart.privateName(line_chart_data, "BarAreaData.show");
  var colors$1 = dart.privateName(line_chart_data, "BarAreaData.colors");
  var gradientFrom$0 = dart.privateName(line_chart_data, "BarAreaData.gradientFrom");
  var gradientTo$0 = dart.privateName(line_chart_data, "BarAreaData.gradientTo");
  var gradientColorStops$ = dart.privateName(line_chart_data, "BarAreaData.gradientColorStops");
  var spotsLine$ = dart.privateName(line_chart_data, "BarAreaData.spotsLine");
  var cutOffY$ = dart.privateName(line_chart_data, "BarAreaData.cutOffY");
  var applyCutOffY$ = dart.privateName(line_chart_data, "BarAreaData.applyCutOffY");
  const Object_EquatableMixin$36$7 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$7.new = function() {
  }).prototype = Object_EquatableMixin$36$7.prototype;
  dart.applyMixin(Object_EquatableMixin$36$7, equatable_mixin.EquatableMixin);
  line_chart_data.BarAreaData = class BarAreaData extends Object_EquatableMixin$36$7 {
    get show() {
      return this[show$1];
    }
    set show(value) {
      super.show = value;
    }
    get colors() {
      return this[colors$1];
    }
    set colors(value) {
      super.colors = value;
    }
    get gradientFrom() {
      return this[gradientFrom$0];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$0];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get gradientColorStops() {
      return this[gradientColorStops$];
    }
    set gradientColorStops(value) {
      super.gradientColorStops = value;
    }
    get spotsLine() {
      return this[spotsLine$];
    }
    set spotsLine(value) {
      super.spotsLine = value;
    }
    get cutOffY() {
      return this[cutOffY$];
    }
    set cutOffY(value) {
      super.cutOffY = value;
    }
    get applyCutOffY() {
      return this[applyCutOffY$];
    }
    set applyCutOffY(value) {
      super.applyCutOffY = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.BarAreaData.new({show: b.show, gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), spotsLine: line_chart_data.BarAreaSpotsLine.lerp(a.spotsLine, b.spotsLine, t), colors: lerp.lerpColorList(a.colors, b.colors, t), gradientColorStops: lerp.lerpDoubleList(a.gradientColorStops, b.gradientColorStops, t), cutOffY: ui.lerpDouble(a.cutOffY, b.cutOffY, t), applyCutOffY: b.applyCutOffY});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.colors, this.gradientFrom, this.gradientTo, this.gradientColorStops, this.spotsLine, this.cutOffY, this.applyCutOffY]);
    }
  };
  (line_chart_data.BarAreaData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3;
    let show = opts && 'show' in opts ? opts.show : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let gradientColorStops = opts && 'gradientColorStops' in opts ? opts.gradientColorStops : null;
    let spotsLine = opts && 'spotsLine' in opts ? opts.spotsLine : null;
    let cutOffY = opts && 'cutOffY' in opts ? opts.cutOffY : null;
    let applyCutOffY = opts && 'applyCutOffY' in opts ? opts.applyCutOffY : null;
    this[show$1] = (t0 = show, t0 == null ? false : t0);
    this[colors$1] = (t0$ = colors, t0$ == null ? T$.JSArrayOfColorL().of([colors$.Colors.blueGrey]) : t0$);
    this[gradientFrom$0] = (t0$0 = gradientFrom, t0$0 == null ? C[4] || CT.C4 : t0$0);
    this[gradientTo$0] = (t0$1 = gradientTo, t0$1 == null ? C[103] || CT.C103 : t0$1);
    this[gradientColorStops$] = gradientColorStops;
    this[spotsLine$] = (t0$2 = spotsLine, t0$2 == null ? new line_chart_data.BarAreaSpotsLine.new() : t0$2);
    this[cutOffY$] = cutOffY;
    this[applyCutOffY$] = (t0$3 = applyCutOffY, t0$3 == null ? false : t0$3);
    if (!(dart.equals(applyCutOffY, true) ? cutOffY != null : true)) dart.assertFailed(null, I[12], 586, 16, "applyCutOffY == true ? cutOffY != null : true");
    ;
  }).prototype = line_chart_data.BarAreaData.prototype;
  dart.addTypeTests(line_chart_data.BarAreaData);
  dart.addTypeCaches(line_chart_data.BarAreaData);
  dart.setGetterSignature(line_chart_data.BarAreaData, () => ({
    __proto__: dart.getGetters(line_chart_data.BarAreaData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.BarAreaData, I[11]);
  dart.setFieldSignature(line_chart_data.BarAreaData, () => ({
    __proto__: dart.getFields(line_chart_data.BarAreaData.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    colors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Color)))),
    gradientFrom: dart.finalFieldType(dart.legacy(ui.Offset)),
    gradientTo: dart.finalFieldType(dart.legacy(ui.Offset)),
    gradientColorStops: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    spotsLine: dart.finalFieldType(dart.legacy(line_chart_data.BarAreaSpotsLine)),
    cutOffY: dart.finalFieldType(dart.legacy(core.double)),
    applyCutOffY: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var fromIndex$ = dart.privateName(line_chart_data, "BetweenBarsData.fromIndex");
  var toIndex$ = dart.privateName(line_chart_data, "BetweenBarsData.toIndex");
  var colors$2 = dart.privateName(line_chart_data, "BetweenBarsData.colors");
  var gradientFrom$1 = dart.privateName(line_chart_data, "BetweenBarsData.gradientFrom");
  var gradientTo$1 = dart.privateName(line_chart_data, "BetweenBarsData.gradientTo");
  var gradientColorStops$0 = dart.privateName(line_chart_data, "BetweenBarsData.gradientColorStops");
  const Object_EquatableMixin$36$8 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$8.new = function() {
  }).prototype = Object_EquatableMixin$36$8.prototype;
  dart.applyMixin(Object_EquatableMixin$36$8, equatable_mixin.EquatableMixin);
  line_chart_data.BetweenBarsData = class BetweenBarsData extends Object_EquatableMixin$36$8 {
    get fromIndex() {
      return this[fromIndex$];
    }
    set fromIndex(value) {
      super.fromIndex = value;
    }
    get toIndex() {
      return this[toIndex$];
    }
    set toIndex(value) {
      super.toIndex = value;
    }
    get colors() {
      return this[colors$2];
    }
    set colors(value) {
      super.colors = value;
    }
    get gradientFrom() {
      return this[gradientFrom$1];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$1];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get gradientColorStops() {
      return this[gradientColorStops$0];
    }
    set gradientColorStops(value) {
      super.gradientColorStops = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.BetweenBarsData.new({fromIndex: b.fromIndex, toIndex: b.toIndex, gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), colors: lerp.lerpColorList(a.colors, b.colors, t), gradientColorStops: lerp.lerpDoubleList(a.gradientColorStops, b.gradientColorStops, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.fromIndex, this.toIndex, this.colors, this.gradientFrom, this.gradientTo, this.gradientColorStops]);
    }
  };
  (line_chart_data.BetweenBarsData.new = function(opts) {
    let t0, t0$, t0$0;
    let fromIndex = opts && 'fromIndex' in opts ? opts.fromIndex : null;
    let toIndex = opts && 'toIndex' in opts ? opts.toIndex : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let gradientColorStops = opts && 'gradientColorStops' in opts ? opts.gradientColorStops : null;
    this[fromIndex$] = fromIndex;
    this[toIndex$] = toIndex;
    this[colors$2] = (t0 = colors, t0 == null ? C[105] || CT.C105 : t0);
    this[gradientFrom$1] = (t0$ = gradientFrom, t0$ == null ? C[4] || CT.C4 : t0$);
    this[gradientTo$1] = (t0$0 = gradientTo, t0$0 == null ? C[103] || CT.C103 : t0$0);
    this[gradientColorStops$0] = gradientColorStops;
    ;
  }).prototype = line_chart_data.BetweenBarsData.prototype;
  dart.addTypeTests(line_chart_data.BetweenBarsData);
  dart.addTypeCaches(line_chart_data.BetweenBarsData);
  dart.setGetterSignature(line_chart_data.BetweenBarsData, () => ({
    __proto__: dart.getGetters(line_chart_data.BetweenBarsData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.BetweenBarsData, I[11]);
  dart.setFieldSignature(line_chart_data.BetweenBarsData, () => ({
    __proto__: dart.getFields(line_chart_data.BetweenBarsData.__proto__),
    fromIndex: dart.finalFieldType(dart.legacy(core.int)),
    toIndex: dart.finalFieldType(dart.legacy(core.int)),
    colors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Color)))),
    gradientFrom: dart.finalFieldType(dart.legacy(ui.Offset)),
    gradientTo: dart.finalFieldType(dart.legacy(ui.Offset)),
    gradientColorStops: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double))))
  }));
  var show$2 = dart.privateName(line_chart_data, "BarAreaSpotsLine.show");
  var flLineStyle$ = dart.privateName(line_chart_data, "BarAreaSpotsLine.flLineStyle");
  var checkToShowSpotLine$ = dart.privateName(line_chart_data, "BarAreaSpotsLine.checkToShowSpotLine");
  var applyCutOffY$0 = dart.privateName(line_chart_data, "BarAreaSpotsLine.applyCutOffY");
  const Object_EquatableMixin$36$9 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$9.new = function() {
  }).prototype = Object_EquatableMixin$36$9.prototype;
  dart.applyMixin(Object_EquatableMixin$36$9, equatable_mixin.EquatableMixin);
  line_chart_data.BarAreaSpotsLine = class BarAreaSpotsLine extends Object_EquatableMixin$36$9 {
    get show() {
      return this[show$2];
    }
    set show(value) {
      super.show = value;
    }
    get flLineStyle() {
      return this[flLineStyle$];
    }
    set flLineStyle(value) {
      super.flLineStyle = value;
    }
    get checkToShowSpotLine() {
      return this[checkToShowSpotLine$];
    }
    set checkToShowSpotLine(value) {
      super.checkToShowSpotLine = value;
    }
    get applyCutOffY() {
      return this[applyCutOffY$0];
    }
    set applyCutOffY(value) {
      super.applyCutOffY = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.BarAreaSpotsLine.new({show: b.show, checkToShowSpotLine: b.checkToShowSpotLine, flLineStyle: axis_chart_data.FlLine.lerp(a.flLineStyle, b.flLineStyle, t), applyCutOffY: b.applyCutOffY});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.flLineStyle, this.checkToShowSpotLine, this.applyCutOffY]);
    }
  };
  (line_chart_data.BarAreaSpotsLine.new = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let show = opts && 'show' in opts ? opts.show : null;
    let flLineStyle = opts && 'flLineStyle' in opts ? opts.flLineStyle : null;
    let checkToShowSpotLine = opts && 'checkToShowSpotLine' in opts ? opts.checkToShowSpotLine : null;
    let applyCutOffY = opts && 'applyCutOffY' in opts ? opts.applyCutOffY : null;
    this[show$2] = (t0 = show, t0 == null ? false : t0);
    this[flLineStyle$] = (t0$ = flLineStyle, t0$ == null ? new axis_chart_data.FlLine.new() : t0$);
    this[checkToShowSpotLine$] = (t0$0 = checkToShowSpotLine, t0$0 == null ? C[118] || CT.C118 : t0$0);
    this[applyCutOffY$0] = (t0$1 = applyCutOffY, t0$1 == null ? true : t0$1);
    ;
  }).prototype = line_chart_data.BarAreaSpotsLine.prototype;
  dart.addTypeTests(line_chart_data.BarAreaSpotsLine);
  dart.addTypeCaches(line_chart_data.BarAreaSpotsLine);
  dart.setGetterSignature(line_chart_data.BarAreaSpotsLine, () => ({
    __proto__: dart.getGetters(line_chart_data.BarAreaSpotsLine.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.BarAreaSpotsLine, I[11]);
  dart.setFieldSignature(line_chart_data.BarAreaSpotsLine, () => ({
    __proto__: dart.getFields(line_chart_data.BarAreaSpotsLine.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    flLineStyle: dart.finalFieldType(dart.legacy(axis_chart_data.FlLine)),
    checkToShowSpotLine: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(axis_chart_data.FlSpot)]))),
    applyCutOffY: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var show$3 = dart.privateName(line_chart_data, "FlDotData.show");
  var checkToShowDot$ = dart.privateName(line_chart_data, "FlDotData.checkToShowDot");
  var getDotPainter$ = dart.privateName(line_chart_data, "FlDotData.getDotPainter");
  const Object_EquatableMixin$36$10 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$10.new = function() {
  }).prototype = Object_EquatableMixin$36$10.prototype;
  dart.applyMixin(Object_EquatableMixin$36$10, equatable_mixin.EquatableMixin);
  line_chart_data.FlDotData = class FlDotData extends Object_EquatableMixin$36$10 {
    get show() {
      return this[show$3];
    }
    set show(value) {
      super.show = value;
    }
    get checkToShowDot() {
      return this[checkToShowDot$];
    }
    set checkToShowDot(value) {
      super.checkToShowDot = value;
    }
    get getDotPainter() {
      return this[getDotPainter$];
    }
    set getDotPainter(value) {
      super.getDotPainter = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.FlDotData.new({show: b.show, checkToShowDot: b.checkToShowDot, getDotPainter: b.getDotPainter});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.checkToShowDot, this.getDotPainter]);
    }
  };
  (line_chart_data.FlDotData.new = function(opts) {
    let t0, t0$, t0$0;
    let show = opts && 'show' in opts ? opts.show : null;
    let checkToShowDot = opts && 'checkToShowDot' in opts ? opts.checkToShowDot : null;
    let getDotPainter = opts && 'getDotPainter' in opts ? opts.getDotPainter : null;
    this[show$3] = (t0 = show, t0 == null ? true : t0);
    this[checkToShowDot$] = (t0$ = checkToShowDot, t0$ == null ? C[119] || CT.C119 : t0$);
    this[getDotPainter$] = (t0$0 = getDotPainter, t0$0 == null ? C[120] || CT.C120 : t0$0);
    ;
  }).prototype = line_chart_data.FlDotData.prototype;
  dart.addTypeTests(line_chart_data.FlDotData);
  dart.addTypeCaches(line_chart_data.FlDotData);
  dart.setGetterSignature(line_chart_data.FlDotData, () => ({
    __proto__: dart.getGetters(line_chart_data.FlDotData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.FlDotData, I[11]);
  dart.setFieldSignature(line_chart_data.FlDotData, () => ({
    __proto__: dart.getFields(line_chart_data.FlDotData.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    checkToShowDot: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(axis_chart_data.FlSpot), dart.legacy(line_chart_data.LineChartBarData)]))),
    getDotPainter: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(line_chart_data.FlDotPainter), [dart.legacy(axis_chart_data.FlSpot), dart.legacy(core.double), dart.legacy(line_chart_data.LineChartBarData), dart.legacy(core.int)])))
  }));
  const Object_EquatableMixin$36$11 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$11.new = function() {
  }).prototype = Object_EquatableMixin$36$11.prototype;
  dart.applyMixin(Object_EquatableMixin$36$11, equatable_mixin.EquatableMixin);
  line_chart_data.FlDotPainter = class FlDotPainter extends Object_EquatableMixin$36$11 {};
  (line_chart_data.FlDotPainter.new = function() {
    ;
  }).prototype = line_chart_data.FlDotPainter.prototype;
  dart.addTypeTests(line_chart_data.FlDotPainter);
  dart.addTypeCaches(line_chart_data.FlDotPainter);
  dart.setLibraryUri(line_chart_data.FlDotPainter, I[11]);
  var color$1 = dart.privateName(line_chart_data, "FlDotCirclePainter.color");
  var radius$1 = dart.privateName(line_chart_data, "FlDotCirclePainter.radius");
  var strokeColor$ = dart.privateName(line_chart_data, "FlDotCirclePainter.strokeColor");
  var strokeWidth$ = dart.privateName(line_chart_data, "FlDotCirclePainter.strokeWidth");
  line_chart_data.FlDotCirclePainter = class FlDotCirclePainter extends line_chart_data.FlDotPainter {
    get color() {
      return this[color$1];
    }
    set color(value) {
      this[color$1] = value;
    }
    get radius() {
      return this[radius$1];
    }
    set radius(value) {
      this[radius$1] = value;
    }
    get strokeColor() {
      return this[strokeColor$];
    }
    set strokeColor(value) {
      this[strokeColor$] = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      this[strokeWidth$] = value;
    }
    draw(canvas, spot, offsetInCanvas) {
      let t1, t0, t0$;
      if (this.strokeWidth != null) {
        canvas.drawCircle(offsetInCanvas, dart.notNull(this.radius) + dart.notNull(this.strokeWidth) / 2, (t0 = ui.Paint.new(), (() => {
          t0.color = (t1 = this.strokeColor, t1 == null ? this.color : t1);
          t0.strokeWidth = this.strokeWidth;
          t0.style = ui.PaintingStyle.stroke;
          return t0;
        })()));
      }
      canvas.drawCircle(offsetInCanvas, this.radius, (t0$ = ui.Paint.new(), (() => {
        t0$.color = this.color;
        t0$.style = ui.PaintingStyle.fill;
        return t0$;
      })()));
    }
    getSize(spot) {
      return new ui.Size.new(this.radius, this.radius);
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.color, this.radius, this.strokeColor, this.strokeWidth]);
    }
  };
  (line_chart_data.FlDotCirclePainter.new = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let color = opts && 'color' in opts ? opts.color : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[color$1] = (t0 = color, t0 == null ? colors$.Colors.green : t0);
    this[radius$1] = (t0$ = radius, t0$ == null ? 4.0 : t0$);
    this[strokeColor$] = (t0$0 = strokeColor, t0$0 == null ? color_extension['ColorExtension|darken'](colors$.Colors.green) : t0$0);
    this[strokeWidth$] = (t0$1 = strokeWidth, t0$1 == null ? 1.0 : t0$1);
    ;
  }).prototype = line_chart_data.FlDotCirclePainter.prototype;
  dart.addTypeTests(line_chart_data.FlDotCirclePainter);
  dart.addTypeCaches(line_chart_data.FlDotCirclePainter);
  dart.setMethodSignature(line_chart_data.FlDotCirclePainter, () => ({
    __proto__: dart.getMethods(line_chart_data.FlDotCirclePainter.__proto__),
    draw: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(axis_chart_data.FlSpot), dart.legacy(ui.Offset)]),
    getSize: dart.fnType(dart.legacy(ui.Size), [dart.legacy(axis_chart_data.FlSpot)])
  }));
  dart.setGetterSignature(line_chart_data.FlDotCirclePainter, () => ({
    __proto__: dart.getGetters(line_chart_data.FlDotCirclePainter.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.FlDotCirclePainter, I[11]);
  dart.setFieldSignature(line_chart_data.FlDotCirclePainter, () => ({
    __proto__: dart.getFields(line_chart_data.FlDotCirclePainter.__proto__),
    color: dart.fieldType(dart.legacy(ui.Color)),
    radius: dart.fieldType(dart.legacy(core.double)),
    strokeColor: dart.fieldType(dart.legacy(ui.Color)),
    strokeWidth: dart.fieldType(dart.legacy(core.double))
  }));
  var color$2 = dart.privateName(line_chart_data, "FlDotSquarePainter.color");
  var size$ = dart.privateName(line_chart_data, "FlDotSquarePainter.size");
  var strokeColor$0 = dart.privateName(line_chart_data, "FlDotSquarePainter.strokeColor");
  var strokeWidth$0 = dart.privateName(line_chart_data, "FlDotSquarePainter.strokeWidth");
  line_chart_data.FlDotSquarePainter = class FlDotSquarePainter extends line_chart_data.FlDotPainter {
    get color() {
      return this[color$2];
    }
    set color(value) {
      this[color$2] = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      this[size$] = value;
    }
    get strokeColor() {
      return this[strokeColor$0];
    }
    set strokeColor(value) {
      this[strokeColor$0] = value;
    }
    get strokeWidth() {
      return this[strokeWidth$0];
    }
    set strokeWidth(value) {
      this[strokeWidth$0] = value;
    }
    draw(canvas, spot, offsetInCanvas) {
      let t1, t0, t0$;
      if (this.strokeWidth != null) {
        canvas.drawRect(new ui.Rect.fromCircle({center: offsetInCanvas, radius: dart.notNull(this.size) / 2 + dart.notNull(this.strokeWidth) / 2}), (t0 = ui.Paint.new(), (() => {
          t0.color = (t1 = this.strokeColor, t1 == null ? this.color : t1);
          t0.strokeWidth = this.strokeWidth;
          t0.style = ui.PaintingStyle.stroke;
          return t0;
        })()));
      }
      canvas.drawRect(new ui.Rect.fromCircle({center: offsetInCanvas, radius: dart.notNull(this.size) / 2}), (t0$ = ui.Paint.new(), (() => {
        t0$.color = this.color;
        t0$.style = ui.PaintingStyle.fill;
        return t0$;
      })()));
    }
    getSize(spot) {
      return new ui.Size.new(this.size, this.size);
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.color, this.size, this.strokeColor, this.strokeWidth]);
    }
  };
  (line_chart_data.FlDotSquarePainter.new = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let color = opts && 'color' in opts ? opts.color : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[color$2] = (t0 = color, t0 == null ? colors$.Colors.green : t0);
    this[size$] = (t0$ = size, t0$ == null ? 4.0 : t0$);
    this[strokeColor$0] = (t0$0 = strokeColor, t0$0 == null ? color_extension['ColorExtension|darken'](colors$.Colors.green) : t0$0);
    this[strokeWidth$0] = (t0$1 = strokeWidth, t0$1 == null ? 1.0 : t0$1);
    ;
  }).prototype = line_chart_data.FlDotSquarePainter.prototype;
  dart.addTypeTests(line_chart_data.FlDotSquarePainter);
  dart.addTypeCaches(line_chart_data.FlDotSquarePainter);
  dart.setMethodSignature(line_chart_data.FlDotSquarePainter, () => ({
    __proto__: dart.getMethods(line_chart_data.FlDotSquarePainter.__proto__),
    draw: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(axis_chart_data.FlSpot), dart.legacy(ui.Offset)]),
    getSize: dart.fnType(dart.legacy(ui.Size), [dart.legacy(axis_chart_data.FlSpot)])
  }));
  dart.setGetterSignature(line_chart_data.FlDotSquarePainter, () => ({
    __proto__: dart.getGetters(line_chart_data.FlDotSquarePainter.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.FlDotSquarePainter, I[11]);
  dart.setFieldSignature(line_chart_data.FlDotSquarePainter, () => ({
    __proto__: dart.getFields(line_chart_data.FlDotSquarePainter.__proto__),
    color: dart.fieldType(dart.legacy(ui.Color)),
    size: dart.fieldType(dart.legacy(core.double)),
    strokeColor: dart.fieldType(dart.legacy(ui.Color)),
    strokeWidth: dart.fieldType(dart.legacy(core.double))
  }));
  var y$0 = dart.privateName(line_chart_data, "HorizontalLine.y");
  var image$ = dart.privateName(line_chart_data, "HorizontalLine.image");
  var sizedPicture$ = dart.privateName(line_chart_data, "HorizontalLine.sizedPicture");
  var label$ = dart.privateName(line_chart_data, "HorizontalLine.label");
  var color$3 = dart.privateName(axis_chart_data, "FlLine.color");
  var strokeWidth$1 = dart.privateName(axis_chart_data, "FlLine.strokeWidth");
  var dashArray$0 = dart.privateName(axis_chart_data, "FlLine.dashArray");
  const Object_EquatableMixin$36$12 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$12.new = function() {
  }).prototype = Object_EquatableMixin$36$12.prototype;
  dart.applyMixin(Object_EquatableMixin$36$12, equatable_mixin.EquatableMixin);
  axis_chart_data.FlLine = class FlLine extends Object_EquatableMixin$36$12 {
    get color() {
      return this[color$3];
    }
    set color(value) {
      super.color = value;
    }
    get strokeWidth() {
      return this[strokeWidth$1];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get dashArray() {
      return this[dashArray$0];
    }
    set dashArray(value) {
      super.dashArray = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.FlLine.new({color: ui.Color.lerp(a.color, b.color, t), strokeWidth: ui.lerpDouble(a.strokeWidth, b.strokeWidth, t), dashArray: lerp.lerpIntList(a.dashArray, b.dashArray, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.color, this.strokeWidth, this.dashArray]);
    }
  };
  (axis_chart_data.FlLine.new = function(opts) {
    let t0, t0$;
    let color = opts && 'color' in opts ? opts.color : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    this[color$3] = (t0 = color, t0 == null ? colors$.Colors.black : t0);
    this[strokeWidth$1] = (t0$ = strokeWidth, t0$ == null ? 2.0 : t0$);
    this[dashArray$0] = dashArray;
    ;
  }).prototype = axis_chart_data.FlLine.prototype;
  dart.addTypeTests(axis_chart_data.FlLine);
  dart.addTypeCaches(axis_chart_data.FlLine);
  dart.setGetterSignature(axis_chart_data.FlLine, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlLine.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.FlLine, I[3]);
  dart.setFieldSignature(axis_chart_data.FlLine, () => ({
    __proto__: dart.getFields(axis_chart_data.FlLine.__proto__),
    color: dart.finalFieldType(dart.legacy(ui.Color)),
    strokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    dashArray: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  const FlLine_EquatableMixin$36 = class FlLine_EquatableMixin extends axis_chart_data.FlLine {};
  (FlLine_EquatableMixin$36.new = function(opts) {
    FlLine_EquatableMixin$36.__proto__.new.call(this, opts);
  }).prototype = FlLine_EquatableMixin$36.prototype;
  dart.applyMixin(FlLine_EquatableMixin$36, equatable_mixin.EquatableMixin);
  line_chart_data.HorizontalLine = class HorizontalLine extends FlLine_EquatableMixin$36 {
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      this[image$] = value;
    }
    get sizedPicture() {
      return this[sizedPicture$];
    }
    set sizedPicture(value) {
      this[sizedPicture$] = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.HorizontalLine.new({y: ui.lerpDouble(a.y, b.y, t), label: line_chart_data.HorizontalLineLabel.lerp(a.label, b.label, t), color: ui.Color.lerp(a.color, b.color, t), strokeWidth: ui.lerpDouble(a.strokeWidth, b.strokeWidth, t), dashArray: lerp.lerpIntList(a.dashArray, b.dashArray, t), image: b.image, sizedPicture: b.sizedPicture});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.y, this.label, this.color, this.strokeWidth, this.dashArray, this.image, this.sizedPicture]);
    }
  };
  (line_chart_data.HorizontalLine.new = function(opts) {
    let t0, t0$, t0$0;
    let y = opts && 'y' in opts ? opts.y : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let sizedPicture = opts && 'sizedPicture' in opts ? opts.sizedPicture : null;
    this[y$0] = y;
    this[image$] = image;
    this[sizedPicture$] = sizedPicture;
    this[label$] = (t0 = label, t0 == null ? new line_chart_data.HorizontalLineLabel.new() : t0);
    line_chart_data.HorizontalLine.__proto__.new.call(this, {color: (t0$ = color, t0$ == null ? colors$.Colors.black : t0$), strokeWidth: (t0$0 = strokeWidth, t0$0 == null ? 2.0 : t0$0), dashArray: dashArray});
    ;
  }).prototype = line_chart_data.HorizontalLine.prototype;
  dart.addTypeTests(line_chart_data.HorizontalLine);
  dart.addTypeCaches(line_chart_data.HorizontalLine);
  dart.setLibraryUri(line_chart_data.HorizontalLine, I[11]);
  dart.setFieldSignature(line_chart_data.HorizontalLine, () => ({
    __proto__: dart.getFields(line_chart_data.HorizontalLine.__proto__),
    y: dart.finalFieldType(dart.legacy(core.double)),
    image: dart.fieldType(dart.legacy(ui.Image)),
    sizedPicture: dart.fieldType(dart.legacy(line_chart_data.SizedPicture)),
    label: dart.finalFieldType(dart.legacy(line_chart_data.HorizontalLineLabel))
  }));
  var x$0 = dart.privateName(line_chart_data, "VerticalLine.x");
  var image$0 = dart.privateName(line_chart_data, "VerticalLine.image");
  var sizedPicture$0 = dart.privateName(line_chart_data, "VerticalLine.sizedPicture");
  var label$0 = dart.privateName(line_chart_data, "VerticalLine.label");
  const FlLine_EquatableMixin$36$ = class FlLine_EquatableMixin extends axis_chart_data.FlLine {};
  (FlLine_EquatableMixin$36$.new = function(opts) {
    FlLine_EquatableMixin$36$.__proto__.new.call(this, opts);
  }).prototype = FlLine_EquatableMixin$36$.prototype;
  dart.applyMixin(FlLine_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  line_chart_data.VerticalLine = class VerticalLine extends FlLine_EquatableMixin$36$ {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get image() {
      return this[image$0];
    }
    set image(value) {
      this[image$0] = value;
    }
    get sizedPicture() {
      return this[sizedPicture$0];
    }
    set sizedPicture(value) {
      this[sizedPicture$0] = value;
    }
    get label() {
      return this[label$0];
    }
    set label(value) {
      super.label = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.VerticalLine.new({x: ui.lerpDouble(a.x, b.x, t), label: line_chart_data.VerticalLineLabel.lerp(a.label, b.label, t), color: ui.Color.lerp(a.color, b.color, t), strokeWidth: ui.lerpDouble(a.strokeWidth, b.strokeWidth, t), dashArray: lerp.lerpIntList(a.dashArray, b.dashArray, t), image: b.image, sizedPicture: b.sizedPicture});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.x, this.label, this.color, this.strokeWidth, this.dashArray, this.image, this.sizedPicture]);
    }
  };
  (line_chart_data.VerticalLine.new = function(opts) {
    let t0, t0$, t0$0;
    let x = opts && 'x' in opts ? opts.x : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let sizedPicture = opts && 'sizedPicture' in opts ? opts.sizedPicture : null;
    this[x$0] = x;
    this[image$0] = image;
    this[sizedPicture$0] = sizedPicture;
    this[label$0] = (t0 = label, t0 == null ? new line_chart_data.VerticalLineLabel.new() : t0);
    line_chart_data.VerticalLine.__proto__.new.call(this, {color: (t0$ = color, t0$ == null ? colors$.Colors.black : t0$), strokeWidth: (t0$0 = strokeWidth, t0$0 == null ? 2.0 : t0$0), dashArray: dashArray});
    ;
  }).prototype = line_chart_data.VerticalLine.prototype;
  dart.addTypeTests(line_chart_data.VerticalLine);
  dart.addTypeCaches(line_chart_data.VerticalLine);
  dart.setLibraryUri(line_chart_data.VerticalLine, I[11]);
  dart.setFieldSignature(line_chart_data.VerticalLine, () => ({
    __proto__: dart.getFields(line_chart_data.VerticalLine.__proto__),
    x: dart.finalFieldType(dart.legacy(core.double)),
    image: dart.fieldType(dart.legacy(ui.Image)),
    sizedPicture: dart.fieldType(dart.legacy(line_chart_data.SizedPicture)),
    label: dart.finalFieldType(dart.legacy(line_chart_data.VerticalLineLabel))
  }));
  var show$4 = dart.privateName(line_chart_data, "FlLineLabel.show");
  var padding$ = dart.privateName(line_chart_data, "FlLineLabel.padding");
  var style$ = dart.privateName(line_chart_data, "FlLineLabel.style");
  var alignment$0 = dart.privateName(line_chart_data, "FlLineLabel.alignment");
  const Object_EquatableMixin$36$13 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$13.new = function() {
  }).prototype = Object_EquatableMixin$36$13.prototype;
  dart.applyMixin(Object_EquatableMixin$36$13, equatable_mixin.EquatableMixin);
  line_chart_data.FlLineLabel = class FlLineLabel extends Object_EquatableMixin$36$13 {
    get show() {
      return this[show$4];
    }
    set show(value) {
      super.show = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get alignment() {
      return this[alignment$0];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.padding, this.style, this.alignment]);
    }
  };
  (line_chart_data.FlLineLabel.new = function(opts) {
    let show = opts && 'show' in opts ? opts.show : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    this[show$4] = show;
    this[padding$] = padding;
    this[style$] = style;
    this[alignment$0] = alignment;
    ;
  }).prototype = line_chart_data.FlLineLabel.prototype;
  dart.addTypeTests(line_chart_data.FlLineLabel);
  dart.addTypeCaches(line_chart_data.FlLineLabel);
  dart.setGetterSignature(line_chart_data.FlLineLabel, () => ({
    __proto__: dart.getGetters(line_chart_data.FlLineLabel.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.FlLineLabel, I[11]);
  dart.setFieldSignature(line_chart_data.FlLineLabel, () => ({
    __proto__: dart.getFields(line_chart_data.FlLineLabel.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    padding: dart.finalFieldType(dart.legacy(edge_insets.EdgeInsetsGeometry)),
    style: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    alignment: dart.finalFieldType(dart.legacy(alignment$.Alignment))
  }));
  var labelResolver$ = dart.privateName(line_chart_data, "HorizontalLineLabel.labelResolver");
  const FlLineLabel_EquatableMixin$36 = class FlLineLabel_EquatableMixin extends line_chart_data.FlLineLabel {};
  (FlLineLabel_EquatableMixin$36.new = function(opts) {
    FlLineLabel_EquatableMixin$36.__proto__.new.call(this, opts);
  }).prototype = FlLineLabel_EquatableMixin$36.prototype;
  dart.applyMixin(FlLineLabel_EquatableMixin$36, equatable_mixin.EquatableMixin);
  line_chart_data.HorizontalLineLabel = class HorizontalLineLabel extends FlLineLabel_EquatableMixin$36 {
    get labelResolver() {
      return this[labelResolver$];
    }
    set labelResolver(value) {
      super.labelResolver = value;
    }
    static defaultLineLabelResolver(line) {
      return line.y[$toStringAsFixed](1);
    }
    static lerp(a, b, t) {
      return new line_chart_data.HorizontalLineLabel.new({padding: edge_insets.EdgeInsets.lerp(T$.EdgeInsetsN().as(a.padding), T$.EdgeInsetsN().as(b.padding), t), style: text_style.TextStyle.lerp(a.style, b.style, t), alignment: alignment$.Alignment.lerp(a.alignment, b.alignment, t), labelResolver: b.labelResolver, show: b.show});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.labelResolver, this.show, this.padding, this.style, this.alignment]);
    }
  };
  (line_chart_data.HorizontalLineLabel.new = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let show = opts && 'show' in opts ? opts.show : false;
    let labelResolver = opts && 'labelResolver' in opts ? opts.labelResolver : null;
    this[labelResolver$] = (t0 = labelResolver, t0 == null ? C[121] || CT.C121 : t0);
    line_chart_data.HorizontalLineLabel.__proto__.new.call(this, {show: show, padding: (t0$ = padding, t0$ == null ? C[122] || CT.C122 : t0$), style: (t0$0 = style, t0$0 == null ? C[123] || CT.C123 : t0$0), alignment: (t0$1 = alignment, t0$1 == null ? alignment$.Alignment.topLeft : t0$1)});
    ;
  }).prototype = line_chart_data.HorizontalLineLabel.prototype;
  dart.addTypeTests(line_chart_data.HorizontalLineLabel);
  dart.addTypeCaches(line_chart_data.HorizontalLineLabel);
  dart.setLibraryUri(line_chart_data.HorizontalLineLabel, I[11]);
  dart.setFieldSignature(line_chart_data.HorizontalLineLabel, () => ({
    __proto__: dart.getFields(line_chart_data.HorizontalLineLabel.__proto__),
    labelResolver: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(line_chart_data.HorizontalLine)])))
  }));
  var labelResolver$0 = dart.privateName(line_chart_data, "VerticalLineLabel.labelResolver");
  const FlLineLabel_EquatableMixin$36$ = class FlLineLabel_EquatableMixin extends line_chart_data.FlLineLabel {};
  (FlLineLabel_EquatableMixin$36$.new = function(opts) {
    FlLineLabel_EquatableMixin$36$.__proto__.new.call(this, opts);
  }).prototype = FlLineLabel_EquatableMixin$36$.prototype;
  dart.applyMixin(FlLineLabel_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  line_chart_data.VerticalLineLabel = class VerticalLineLabel extends FlLineLabel_EquatableMixin$36$ {
    get labelResolver() {
      return this[labelResolver$0];
    }
    set labelResolver(value) {
      super.labelResolver = value;
    }
    static defaultLineLabelResolver(line) {
      return line.x[$toStringAsFixed](1);
    }
    static lerp(a, b, t) {
      return new line_chart_data.VerticalLineLabel.new({padding: edge_insets.EdgeInsets.lerp(T$.EdgeInsetsN().as(a.padding), T$.EdgeInsetsN().as(b.padding), t), style: text_style.TextStyle.lerp(a.style, b.style, t), alignment: alignment$.Alignment.lerp(a.alignment, b.alignment, t), labelResolver: b.labelResolver, show: b.show});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.labelResolver, this.show, this.padding, this.style, this.alignment]);
    }
  };
  (line_chart_data.VerticalLineLabel.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let show = opts && 'show' in opts ? opts.show : null;
    let labelResolver = opts && 'labelResolver' in opts ? opts.labelResolver : null;
    this[labelResolver$0] = (t0 = labelResolver, t0 == null ? C[125] || CT.C125 : t0);
    line_chart_data.VerticalLineLabel.__proto__.new.call(this, {show: (t0$ = show, t0$ == null ? false : t0$), padding: (t0$0 = padding, t0$0 == null ? C[122] || CT.C122 : t0$0), style: (t0$1 = style, t0$1 == null ? C[123] || CT.C123 : t0$1), alignment: (t0$2 = alignment, t0$2 == null ? alignment$.Alignment.bottomRight : t0$2)});
    ;
  }).prototype = line_chart_data.VerticalLineLabel.prototype;
  dart.addTypeTests(line_chart_data.VerticalLineLabel);
  dart.addTypeCaches(line_chart_data.VerticalLineLabel);
  dart.setLibraryUri(line_chart_data.VerticalLineLabel, I[11]);
  dart.setFieldSignature(line_chart_data.VerticalLineLabel, () => ({
    __proto__: dart.getFields(line_chart_data.VerticalLineLabel.__proto__),
    labelResolver: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(line_chart_data.VerticalLine)])))
  }));
  var picture$ = dart.privateName(line_chart_data, "SizedPicture.picture");
  var width$ = dart.privateName(line_chart_data, "SizedPicture.width");
  var height$ = dart.privateName(line_chart_data, "SizedPicture.height");
  const Object_EquatableMixin$36$14 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$14.new = function() {
  }).prototype = Object_EquatableMixin$36$14.prototype;
  dart.applyMixin(Object_EquatableMixin$36$14, equatable_mixin.EquatableMixin);
  line_chart_data.SizedPicture = class SizedPicture extends Object_EquatableMixin$36$14 {
    get picture() {
      return this[picture$];
    }
    set picture(value) {
      this[picture$] = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      this[width$] = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      this[height$] = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.picture, this.width, this.height]);
    }
  };
  (line_chart_data.SizedPicture.new = function(picture, width, height) {
    this[picture$] = picture;
    this[width$] = width;
    this[height$] = height;
    ;
  }).prototype = line_chart_data.SizedPicture.prototype;
  dart.addTypeTests(line_chart_data.SizedPicture);
  dart.addTypeCaches(line_chart_data.SizedPicture);
  dart.setGetterSignature(line_chart_data.SizedPicture, () => ({
    __proto__: dart.getGetters(line_chart_data.SizedPicture.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.SizedPicture, I[11]);
  dart.setFieldSignature(line_chart_data.SizedPicture, () => ({
    __proto__: dart.getFields(line_chart_data.SizedPicture.__proto__),
    picture: dart.fieldType(dart.legacy(ui.Picture)),
    width: dart.fieldType(dart.legacy(core.int)),
    height: dart.fieldType(dart.legacy(core.int))
  }));
  var horizontalLines$ = dart.privateName(line_chart_data, "ExtraLinesData.horizontalLines");
  var verticalLines$ = dart.privateName(line_chart_data, "ExtraLinesData.verticalLines");
  var extraLinesOnTop$ = dart.privateName(line_chart_data, "ExtraLinesData.extraLinesOnTop");
  const Object_EquatableMixin$36$15 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$15.new = function() {
  }).prototype = Object_EquatableMixin$36$15.prototype;
  dart.applyMixin(Object_EquatableMixin$36$15, equatable_mixin.EquatableMixin);
  line_chart_data.ExtraLinesData = class ExtraLinesData extends Object_EquatableMixin$36$15 {
    get horizontalLines() {
      return this[horizontalLines$];
    }
    set horizontalLines(value) {
      super.horizontalLines = value;
    }
    get verticalLines() {
      return this[verticalLines$];
    }
    set verticalLines(value) {
      super.verticalLines = value;
    }
    get extraLinesOnTop() {
      return this[extraLinesOnTop$];
    }
    set extraLinesOnTop(value) {
      super.extraLinesOnTop = value;
    }
    static lerp(a, b, t) {
      return new line_chart_data.ExtraLinesData.new({extraLinesOnTop: b.extraLinesOnTop, horizontalLines: lerp.lerpHorizontalLineList(a.horizontalLines, b.horizontalLines, t), verticalLines: lerp.lerpVerticalLineList(a.verticalLines, b.verticalLines, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.horizontalLines, this.verticalLines, this.extraLinesOnTop]);
    }
  };
  (line_chart_data.ExtraLinesData.new = function(opts) {
    let t0, t0$, t0$0;
    let horizontalLines = opts && 'horizontalLines' in opts ? opts.horizontalLines : null;
    let verticalLines = opts && 'verticalLines' in opts ? opts.verticalLines : null;
    let extraLinesOnTop = opts && 'extraLinesOnTop' in opts ? opts.extraLinesOnTop : null;
    this[horizontalLines$] = (t0 = horizontalLines, t0 == null ? C[126] || CT.C126 : t0);
    this[verticalLines$] = (t0$ = verticalLines, t0$ == null ? C[127] || CT.C127 : t0$);
    this[extraLinesOnTop$] = (t0$0 = extraLinesOnTop, t0$0 == null ? true : t0$0);
    ;
  }).prototype = line_chart_data.ExtraLinesData.prototype;
  dart.addTypeTests(line_chart_data.ExtraLinesData);
  dart.addTypeCaches(line_chart_data.ExtraLinesData);
  dart.setGetterSignature(line_chart_data.ExtraLinesData, () => ({
    __proto__: dart.getGetters(line_chart_data.ExtraLinesData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.ExtraLinesData, I[11]);
  dart.setFieldSignature(line_chart_data.ExtraLinesData, () => ({
    __proto__: dart.getFields(line_chart_data.ExtraLinesData.__proto__),
    horizontalLines: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(line_chart_data.HorizontalLine)))),
    verticalLines: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(line_chart_data.VerticalLine)))),
    extraLinesOnTop: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var touchTooltipData$0 = dart.privateName(line_chart_data, "LineTouchData.touchTooltipData");
  var getTouchedSpotIndicator$ = dart.privateName(line_chart_data, "LineTouchData.getTouchedSpotIndicator");
  var touchSpotThreshold$0 = dart.privateName(line_chart_data, "LineTouchData.touchSpotThreshold");
  var handleBuiltInTouches$0 = dart.privateName(line_chart_data, "LineTouchData.handleBuiltInTouches");
  var fullHeightTouchLine$ = dart.privateName(line_chart_data, "LineTouchData.fullHeightTouchLine");
  var touchCallback$1 = dart.privateName(line_chart_data, "LineTouchData.touchCallback");
  const FlTouchData_EquatableMixin$36$0 = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36$0.new = function(enabled) {
    FlTouchData_EquatableMixin$36$0.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36$0.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36$0, equatable_mixin.EquatableMixin);
  line_chart_data.LineTouchData = class LineTouchData extends FlTouchData_EquatableMixin$36$0 {
    get touchTooltipData() {
      return this[touchTooltipData$0];
    }
    set touchTooltipData(value) {
      super.touchTooltipData = value;
    }
    get getTouchedSpotIndicator() {
      return this[getTouchedSpotIndicator$];
    }
    set getTouchedSpotIndicator(value) {
      super.getTouchedSpotIndicator = value;
    }
    get touchSpotThreshold() {
      return this[touchSpotThreshold$0];
    }
    set touchSpotThreshold(value) {
      super.touchSpotThreshold = value;
    }
    get handleBuiltInTouches() {
      return this[handleBuiltInTouches$0];
    }
    set handleBuiltInTouches(value) {
      super.handleBuiltInTouches = value;
    }
    get fullHeightTouchLine() {
      return this[fullHeightTouchLine$];
    }
    set fullHeightTouchLine(value) {
      super.fullHeightTouchLine = value;
    }
    get touchCallback() {
      return this[touchCallback$1];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
      let getTouchedSpotIndicator = opts && 'getTouchedSpotIndicator' in opts ? opts.getTouchedSpotIndicator : null;
      let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
      let fullHeightTouchLine = opts && 'fullHeightTouchLine' in opts ? opts.fullHeightTouchLine : null;
      let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
      let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
      return new line_chart_data.LineTouchData.new({enabled: (t0 = enabled, t0 == null ? this.enabled : t0), touchTooltipData: (t0$ = touchTooltipData, t0$ == null ? this.touchTooltipData : t0$), getTouchedSpotIndicator: (t0$0 = getTouchedSpotIndicator, t0$0 == null ? this.getTouchedSpotIndicator : t0$0), touchSpotThreshold: (t0$1 = touchSpotThreshold, t0$1 == null ? this.touchSpotThreshold : t0$1), fullHeightTouchLine: (t0$2 = fullHeightTouchLine, t0$2 == null ? this.fullHeightTouchLine : t0$2), handleBuiltInTouches: (t0$3 = handleBuiltInTouches, t0$3 == null ? this.handleBuiltInTouches : t0$3), touchCallback: (t0$4 = touchCallback, t0$4 == null ? this.touchCallback : t0$4)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.touchTooltipData, this.getTouchedSpotIndicator, this.touchSpotThreshold, this.handleBuiltInTouches, this.fullHeightTouchLine, this.touchCallback, this.enabled]);
    }
  };
  (line_chart_data.LineTouchData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
    let getTouchedSpotIndicator = opts && 'getTouchedSpotIndicator' in opts ? opts.getTouchedSpotIndicator : null;
    let touchSpotThreshold = opts && 'touchSpotThreshold' in opts ? opts.touchSpotThreshold : null;
    let fullHeightTouchLine = opts && 'fullHeightTouchLine' in opts ? opts.fullHeightTouchLine : null;
    let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    this[touchTooltipData$0] = (t0 = touchTooltipData, t0 == null ? new line_chart_data.LineTouchTooltipData.new() : t0);
    this[getTouchedSpotIndicator$] = (t0$ = getTouchedSpotIndicator, t0$ == null ? C[128] || CT.C128 : t0$);
    this[touchSpotThreshold$0] = (t0$0 = touchSpotThreshold, t0$0 == null ? 10.0 : t0$0);
    this[fullHeightTouchLine$] = (t0$1 = fullHeightTouchLine, t0$1 == null ? false : t0$1);
    this[handleBuiltInTouches$0] = (t0$2 = handleBuiltInTouches, t0$2 == null ? true : t0$2);
    this[touchCallback$1] = touchCallback;
    line_chart_data.LineTouchData.__proto__.new.call(this, (t0$3 = enabled, t0$3 == null ? true : t0$3));
    ;
  }).prototype = line_chart_data.LineTouchData.prototype;
  dart.addTypeTests(line_chart_data.LineTouchData);
  dart.addTypeCaches(line_chart_data.LineTouchData);
  dart.setMethodSignature(line_chart_data.LineTouchData, () => ({
    __proto__: dart.getMethods(line_chart_data.LineTouchData.__proto__),
    copyWith: dart.fnType(dart.legacy(line_chart_data.LineTouchData), [], {enabled: dart.legacy(core.bool), fullHeightTouchLine: dart.legacy(core.bool), getTouchedSpotIndicator: dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(line_chart_data.TouchedSpotIndicatorData))), [dart.legacy(line_chart_data.LineChartBarData), dart.legacy(core.List$(dart.legacy(core.int)))])), handleBuiltInTouches: dart.legacy(core.bool), touchCallback: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(line_chart_data.LineTouchResponse)])), touchSpotThreshold: dart.legacy(core.double), touchTooltipData: dart.legacy(line_chart_data.LineTouchTooltipData)}, {})
  }));
  dart.setLibraryUri(line_chart_data.LineTouchData, I[11]);
  dart.setFieldSignature(line_chart_data.LineTouchData, () => ({
    __proto__: dart.getFields(line_chart_data.LineTouchData.__proto__),
    touchTooltipData: dart.finalFieldType(dart.legacy(line_chart_data.LineTouchTooltipData)),
    getTouchedSpotIndicator: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(line_chart_data.TouchedSpotIndicatorData))), [dart.legacy(line_chart_data.LineChartBarData), dart.legacy(core.List$(dart.legacy(core.int)))]))),
    touchSpotThreshold: dart.finalFieldType(dart.legacy(core.double)),
    handleBuiltInTouches: dart.finalFieldType(dart.legacy(core.bool)),
    fullHeightTouchLine: dart.finalFieldType(dart.legacy(core.bool)),
    touchCallback: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(line_chart_data.LineTouchResponse)])))
  }));
  var tooltipBgColor$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.tooltipBgColor");
  var tooltipRoundedRadius$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.tooltipRoundedRadius");
  var tooltipPadding$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.tooltipPadding");
  var tooltipBottomMargin$ = dart.privateName(line_chart_data, "LineTouchTooltipData.tooltipBottomMargin");
  var maxContentWidth$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.maxContentWidth");
  var getTooltipItems$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.getTooltipItems");
  var fitInsideHorizontally$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.fitInsideHorizontally");
  var fitInsideVertically$0 = dart.privateName(line_chart_data, "LineTouchTooltipData.fitInsideVertically");
  var showOnTopOfTheChartBoxArea$ = dart.privateName(line_chart_data, "LineTouchTooltipData.showOnTopOfTheChartBoxArea");
  const Object_EquatableMixin$36$16 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$16.new = function() {
  }).prototype = Object_EquatableMixin$36$16.prototype;
  dart.applyMixin(Object_EquatableMixin$36$16, equatable_mixin.EquatableMixin);
  line_chart_data.LineTouchTooltipData = class LineTouchTooltipData extends Object_EquatableMixin$36$16 {
    get tooltipBgColor() {
      return this[tooltipBgColor$0];
    }
    set tooltipBgColor(value) {
      super.tooltipBgColor = value;
    }
    get tooltipRoundedRadius() {
      return this[tooltipRoundedRadius$0];
    }
    set tooltipRoundedRadius(value) {
      super.tooltipRoundedRadius = value;
    }
    get tooltipPadding() {
      return this[tooltipPadding$0];
    }
    set tooltipPadding(value) {
      super.tooltipPadding = value;
    }
    get tooltipBottomMargin() {
      return this[tooltipBottomMargin$];
    }
    set tooltipBottomMargin(value) {
      super.tooltipBottomMargin = value;
    }
    get maxContentWidth() {
      return this[maxContentWidth$0];
    }
    set maxContentWidth(value) {
      super.maxContentWidth = value;
    }
    get getTooltipItems() {
      return this[getTooltipItems$0];
    }
    set getTooltipItems(value) {
      super.getTooltipItems = value;
    }
    get fitInsideHorizontally() {
      return this[fitInsideHorizontally$0];
    }
    set fitInsideHorizontally(value) {
      super.fitInsideHorizontally = value;
    }
    get fitInsideVertically() {
      return this[fitInsideVertically$0];
    }
    set fitInsideVertically(value) {
      super.fitInsideVertically = value;
    }
    get showOnTopOfTheChartBoxArea() {
      return this[showOnTopOfTheChartBoxArea$];
    }
    set showOnTopOfTheChartBoxArea(value) {
      super.showOnTopOfTheChartBoxArea = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.tooltipBgColor, this.tooltipRoundedRadius, this.tooltipPadding, this.tooltipBottomMargin, this.maxContentWidth, this.getTooltipItems, this.fitInsideHorizontally, this.fitInsideVertically, this.showOnTopOfTheChartBoxArea]);
    }
  };
  (line_chart_data.LineTouchTooltipData.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
    let tooltipBgColor = opts && 'tooltipBgColor' in opts ? opts.tooltipBgColor : null;
    let tooltipRoundedRadius = opts && 'tooltipRoundedRadius' in opts ? opts.tooltipRoundedRadius : null;
    let tooltipPadding = opts && 'tooltipPadding' in opts ? opts.tooltipPadding : null;
    let tooltipBottomMargin = opts && 'tooltipBottomMargin' in opts ? opts.tooltipBottomMargin : null;
    let maxContentWidth = opts && 'maxContentWidth' in opts ? opts.maxContentWidth : null;
    let getTooltipItems = opts && 'getTooltipItems' in opts ? opts.getTooltipItems : null;
    let fitInsideHorizontally = opts && 'fitInsideHorizontally' in opts ? opts.fitInsideHorizontally : null;
    let fitInsideVertically = opts && 'fitInsideVertically' in opts ? opts.fitInsideVertically : null;
    let showOnTopOfTheChartBoxArea = opts && 'showOnTopOfTheChartBoxArea' in opts ? opts.showOnTopOfTheChartBoxArea : null;
    this[tooltipBgColor$0] = (t0 = tooltipBgColor, t0 == null ? colors$.Colors.white : t0);
    this[tooltipRoundedRadius$0] = (t0$ = tooltipRoundedRadius, t0$ == null ? 4.0 : t0$);
    this[tooltipPadding$0] = (t0$0 = tooltipPadding, t0$0 == null ? C[60] || CT.C60 : t0$0);
    this[tooltipBottomMargin$] = (t0$1 = tooltipBottomMargin, t0$1 == null ? 16.0 : t0$1);
    this[maxContentWidth$0] = (t0$2 = maxContentWidth, t0$2 == null ? 120.0 : t0$2);
    this[getTooltipItems$0] = (t0$3 = getTooltipItems, t0$3 == null ? C[129] || CT.C129 : t0$3);
    this[fitInsideHorizontally$0] = (t0$4 = fitInsideHorizontally, t0$4 == null ? false : t0$4);
    this[fitInsideVertically$0] = (t0$5 = fitInsideVertically, t0$5 == null ? false : t0$5);
    this[showOnTopOfTheChartBoxArea$] = (t0$6 = showOnTopOfTheChartBoxArea, t0$6 == null ? false : t0$6);
    ;
  }).prototype = line_chart_data.LineTouchTooltipData.prototype;
  dart.addTypeTests(line_chart_data.LineTouchTooltipData);
  dart.addTypeCaches(line_chart_data.LineTouchTooltipData);
  dart.setGetterSignature(line_chart_data.LineTouchTooltipData, () => ({
    __proto__: dart.getGetters(line_chart_data.LineTouchTooltipData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.LineTouchTooltipData, I[11]);
  dart.setFieldSignature(line_chart_data.LineTouchTooltipData, () => ({
    __proto__: dart.getFields(line_chart_data.LineTouchTooltipData.__proto__),
    tooltipBgColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipRoundedRadius: dart.finalFieldType(dart.legacy(core.double)),
    tooltipPadding: dart.finalFieldType(dart.legacy(edge_insets.EdgeInsets)),
    tooltipBottomMargin: dart.finalFieldType(dart.legacy(core.double)),
    maxContentWidth: dart.finalFieldType(dart.legacy(core.double)),
    getTooltipItems: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(line_chart_data.LineTooltipItem))), [dart.legacy(core.List$(dart.legacy(line_chart_data.LineBarSpot)))]))),
    fitInsideHorizontally: dart.finalFieldType(dart.legacy(core.bool)),
    fitInsideVertically: dart.finalFieldType(dart.legacy(core.bool)),
    showOnTopOfTheChartBoxArea: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var bar$ = dart.privateName(line_chart_data, "LineBarSpot.bar");
  var barIndex$ = dart.privateName(line_chart_data, "LineBarSpot.barIndex");
  var spotIndex = dart.privateName(line_chart_data, "LineBarSpot.spotIndex");
  const FlSpot_EquatableMixin$36$ = class FlSpot_EquatableMixin extends axis_chart_data.FlSpot {};
  (FlSpot_EquatableMixin$36$.new = function(x, y) {
    FlSpot_EquatableMixin$36$.__proto__.new.call(this, x, y);
  }).prototype = FlSpot_EquatableMixin$36$.prototype;
  dart.applyMixin(FlSpot_EquatableMixin$36$, equatable_mixin.EquatableMixin);
  line_chart_data.LineBarSpot = class LineBarSpot extends FlSpot_EquatableMixin$36$ {
    get bar() {
      return this[bar$];
    }
    set bar(value) {
      super.bar = value;
    }
    get barIndex() {
      return this[barIndex$];
    }
    set barIndex(value) {
      super.barIndex = value;
    }
    get spotIndex() {
      return this[spotIndex];
    }
    set spotIndex(value) {
      super.spotIndex = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.bar, this.barIndex, this.spotIndex, this.x, this.y]);
    }
  };
  (line_chart_data.LineBarSpot.new = function(bar, barIndex, spot) {
    this[bar$] = bar;
    this[barIndex$] = barIndex;
    this[spotIndex] = bar.spots[$indexOf](spot);
    line_chart_data.LineBarSpot.__proto__.new.call(this, spot.x, spot.y);
    ;
  }).prototype = line_chart_data.LineBarSpot.prototype;
  dart.addTypeTests(line_chart_data.LineBarSpot);
  dart.addTypeCaches(line_chart_data.LineBarSpot);
  dart.setLibraryUri(line_chart_data.LineBarSpot, I[11]);
  dart.setFieldSignature(line_chart_data.LineBarSpot, () => ({
    __proto__: dart.getFields(line_chart_data.LineBarSpot.__proto__),
    bar: dart.finalFieldType(dart.legacy(line_chart_data.LineChartBarData)),
    barIndex: dart.finalFieldType(dart.legacy(core.int)),
    spotIndex: dart.finalFieldType(dart.legacy(core.int))
  }));
  var text$0 = dart.privateName(line_chart_data, "LineTooltipItem.text");
  var textStyle$0 = dart.privateName(line_chart_data, "LineTooltipItem.textStyle");
  const Object_EquatableMixin$36$17 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$17.new = function() {
  }).prototype = Object_EquatableMixin$36$17.prototype;
  dart.applyMixin(Object_EquatableMixin$36$17, equatable_mixin.EquatableMixin);
  line_chart_data.LineTooltipItem = class LineTooltipItem extends Object_EquatableMixin$36$17 {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get textStyle() {
      return this[textStyle$0];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.text, this.textStyle]);
    }
  };
  (line_chart_data.LineTooltipItem.new = function(text, textStyle) {
    this[text$0] = text;
    this[textStyle$0] = textStyle;
    ;
  }).prototype = line_chart_data.LineTooltipItem.prototype;
  dart.addTypeTests(line_chart_data.LineTooltipItem);
  dart.addTypeCaches(line_chart_data.LineTooltipItem);
  dart.setGetterSignature(line_chart_data.LineTooltipItem, () => ({
    __proto__: dart.getGetters(line_chart_data.LineTooltipItem.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.LineTooltipItem, I[11]);
  dart.setFieldSignature(line_chart_data.LineTooltipItem, () => ({
    __proto__: dart.getFields(line_chart_data.LineTooltipItem.__proto__),
    text: dart.finalFieldType(dart.legacy(core.String)),
    textStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  var indicatorBelowLine$ = dart.privateName(line_chart_data, "TouchedSpotIndicatorData.indicatorBelowLine");
  var touchedSpotDotData$ = dart.privateName(line_chart_data, "TouchedSpotIndicatorData.touchedSpotDotData");
  const Object_EquatableMixin$36$18 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$18.new = function() {
  }).prototype = Object_EquatableMixin$36$18.prototype;
  dart.applyMixin(Object_EquatableMixin$36$18, equatable_mixin.EquatableMixin);
  line_chart_data.TouchedSpotIndicatorData = class TouchedSpotIndicatorData extends Object_EquatableMixin$36$18 {
    get indicatorBelowLine() {
      return this[indicatorBelowLine$];
    }
    set indicatorBelowLine(value) {
      super.indicatorBelowLine = value;
    }
    get touchedSpotDotData() {
      return this[touchedSpotDotData$];
    }
    set touchedSpotDotData(value) {
      super.touchedSpotDotData = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.indicatorBelowLine, this.touchedSpotDotData]);
    }
  };
  (line_chart_data.TouchedSpotIndicatorData.new = function(indicatorBelowLine, touchedSpotDotData) {
    this[indicatorBelowLine$] = indicatorBelowLine;
    this[touchedSpotDotData$] = touchedSpotDotData;
    ;
  }).prototype = line_chart_data.TouchedSpotIndicatorData.prototype;
  dart.addTypeTests(line_chart_data.TouchedSpotIndicatorData);
  dart.addTypeCaches(line_chart_data.TouchedSpotIndicatorData);
  dart.setGetterSignature(line_chart_data.TouchedSpotIndicatorData, () => ({
    __proto__: dart.getGetters(line_chart_data.TouchedSpotIndicatorData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.TouchedSpotIndicatorData, I[11]);
  dart.setFieldSignature(line_chart_data.TouchedSpotIndicatorData, () => ({
    __proto__: dart.getFields(line_chart_data.TouchedSpotIndicatorData.__proto__),
    indicatorBelowLine: dart.finalFieldType(dart.legacy(axis_chart_data.FlLine)),
    touchedSpotDotData: dart.finalFieldType(dart.legacy(line_chart_data.FlDotData))
  }));
  var lineIndex$ = dart.privateName(line_chart_data, "ShowingTooltipIndicators.lineIndex");
  var showingSpots$ = dart.privateName(line_chart_data, "ShowingTooltipIndicators.showingSpots");
  const Object_EquatableMixin$36$19 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$19.new = function() {
  }).prototype = Object_EquatableMixin$36$19.prototype;
  dart.applyMixin(Object_EquatableMixin$36$19, equatable_mixin.EquatableMixin);
  line_chart_data.ShowingTooltipIndicators = class ShowingTooltipIndicators extends Object_EquatableMixin$36$19 {
    get lineIndex() {
      return this[lineIndex$];
    }
    set lineIndex(value) {
      super.lineIndex = value;
    }
    get showingSpots() {
      return this[showingSpots$];
    }
    set showingSpots(value) {
      super.showingSpots = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.lineIndex, this.showingSpots]);
    }
  };
  (line_chart_data.ShowingTooltipIndicators.new = function(lineIndex, showingSpots) {
    this[lineIndex$] = lineIndex;
    this[showingSpots$] = showingSpots;
    ;
  }).prototype = line_chart_data.ShowingTooltipIndicators.prototype;
  dart.addTypeTests(line_chart_data.ShowingTooltipIndicators);
  dart.addTypeCaches(line_chart_data.ShowingTooltipIndicators);
  dart.setGetterSignature(line_chart_data.ShowingTooltipIndicators, () => ({
    __proto__: dart.getGetters(line_chart_data.ShowingTooltipIndicators.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(line_chart_data.ShowingTooltipIndicators, I[11]);
  dart.setFieldSignature(line_chart_data.ShowingTooltipIndicators, () => ({
    __proto__: dart.getFields(line_chart_data.ShowingTooltipIndicators.__proto__),
    lineIndex: dart.finalFieldType(dart.legacy(core.int)),
    showingSpots: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(line_chart_data.LineBarSpot))))
  }));
  var lineBarSpots$ = dart.privateName(line_chart_data, "LineTouchResponse.lineBarSpots");
  const BaseTouchResponse_EquatableMixin$36$0 = class BaseTouchResponse_EquatableMixin extends base_chart_data.BaseTouchResponse {};
  (BaseTouchResponse_EquatableMixin$36$0.new = function(touchInput) {
    BaseTouchResponse_EquatableMixin$36$0.__proto__.new.call(this, touchInput);
  }).prototype = BaseTouchResponse_EquatableMixin$36$0.prototype;
  dart.applyMixin(BaseTouchResponse_EquatableMixin$36$0, equatable_mixin.EquatableMixin);
  line_chart_data.LineTouchResponse = class LineTouchResponse extends BaseTouchResponse_EquatableMixin$36$0 {
    get lineBarSpots() {
      return this[lineBarSpots$];
    }
    set lineBarSpots(value) {
      super.lineBarSpots = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.lineBarSpots, this.touchInput]);
    }
  };
  (line_chart_data.LineTouchResponse.new = function(lineBarSpots, touchInput) {
    this[lineBarSpots$] = lineBarSpots;
    line_chart_data.LineTouchResponse.__proto__.new.call(this, touchInput);
    ;
  }).prototype = line_chart_data.LineTouchResponse.prototype;
  dart.addTypeTests(line_chart_data.LineTouchResponse);
  dart.addTypeCaches(line_chart_data.LineTouchResponse);
  dart.setLibraryUri(line_chart_data.LineTouchResponse, I[11]);
  dart.setFieldSignature(line_chart_data.LineTouchResponse, () => ({
    __proto__: dart.getFields(line_chart_data.LineTouchResponse.__proto__),
    lineBarSpots: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(line_chart_data.LineBarSpot))))
  }));
  line_chart_data.LineChartDataTween = class LineChartDataTween extends tween.Tween$(dart.legacy(line_chart_data.LineChartData)) {
    lerp(t) {
      return T$.LineChartDataL().as(this.begin.lerp(this.begin, this.end, t));
    }
  };
  (line_chart_data.LineChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    line_chart_data.LineChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = line_chart_data.LineChartDataTween.prototype;
  dart.addTypeTests(line_chart_data.LineChartDataTween);
  dart.addTypeCaches(line_chart_data.LineChartDataTween);
  dart.setMethodSignature(line_chart_data.LineChartDataTween, () => ({
    __proto__: dart.getMethods(line_chart_data.LineChartDataTween.__proto__),
    lerp: dart.fnType(dart.legacy(line_chart_data.LineChartData), [dart.legacy(core.double)])
  }));
  dart.setLibraryUri(line_chart_data.LineChartDataTween, I[11]);
  line_chart_data.showAllSpotsBelowLine = function showAllSpotsBelowLine(spot) {
    return true;
  };
  line_chart_data._defaultGetDotColor = function _defaultGetDotColor(_, xPercentage, bar) {
    if (bar.colors == null || dart.test(bar.colors[$isEmpty])) {
      return colors$.Colors.green;
    } else if (bar.colors[$length] === 1) {
      return bar.colors[$_get](0);
    } else {
      return utils.lerpGradient(bar.colors, bar.colorStops, dart.notNull(xPercentage) / 100);
    }
  };
  line_chart_data._defaultGetDotStrokeColor = function _defaultGetDotStrokeColor(spot, xPercentage, bar) {
    let color = null;
    if (bar.colors == null || dart.test(bar.colors[$isEmpty])) {
      color = colors$.Colors.green;
    } else if (bar.colors[$length] === 1) {
      color = bar.colors[$_get](0);
    } else {
      color = utils.lerpGradient(bar.colors, bar.colorStops, dart.notNull(xPercentage) / 100);
    }
    return color_extension['ColorExtension|darken'](color);
  };
  line_chart_data._defaultGetDotPainter = function _defaultGetDotPainter(spot, xPercentage, bar, index, opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    return new line_chart_data.FlDotCirclePainter.new({radius: size, color: line_chart_data._defaultGetDotColor(spot, xPercentage, bar), strokeColor: line_chart_data._defaultGetDotStrokeColor(spot, xPercentage, bar)});
  };
  line_chart_data.showAllDots = function showAllDots(spot, barData) {
    return true;
  };
  line_chart_data.defaultTouchedIndicators = function defaultTouchedIndicators(barData, indicators) {
    if (indicators == null) {
      return T$.JSArrayOfTouchedSpotIndicatorDataL().of([]);
    }
    return indicators[$map](T$.TouchedSpotIndicatorDataL(), dart.fn(index => {
      let lineColor = barData.colors[$_get](0);
      if (dart.test(barData.dotData.show)) {
        lineColor = line_chart_data._defaultGetDotColor(barData.spots[$_get](index), 0.0, barData);
      }
      let flLine = new axis_chart_data.FlLine.new({color: lineColor, strokeWidth: 4});
      let dotSize = 10.0;
      if (dart.test(barData.dotData.show)) {
        dotSize = 4.0 * 1.8;
      }
      let dotData = new line_chart_data.FlDotData.new({getDotPainter: dart.fn((spot, percent, bar, index) => line_chart_data._defaultGetDotPainter(spot, percent, bar, index, {size: dotSize}), T$.FlSpotLAnddoubleLAndLineChartBarDataL__ToFlDotPainterL$1())});
      return new line_chart_data.TouchedSpotIndicatorData.new(flLine, dotData);
    }, T$.intLToTouchedSpotIndicatorDataL()))[$toList]();
  };
  line_chart_data.defaultLineTooltipItem = function defaultLineTooltipItem(touchedSpots) {
    if (touchedSpots == null) {
      return null;
    }
    return touchedSpots[$map](T$.LineTooltipItemL(), dart.fn(touchedSpot => {
      if (touchedSpot == null) {
        return null;
      }
      let textStyle = new text_style.TextStyle.new({color: touchedSpot.bar.colors[$_get](0), fontWeight: ui.FontWeight.bold, fontSize: 14.0});
      return new line_chart_data.LineTooltipItem.new(dart.toString(touchedSpot.y), textStyle);
    }, T$.LineBarSpotLToLineTooltipItemL()))[$toList]();
  };
  canvas_extension['DashedLine|drawDashedLine'] = function DashedLine$124drawDashedLine($this, from, to, painter, dashArray) {
    let path = ui.Path.new();
    path.moveTo(from.dx, from.dy);
    path.lineTo(to.dx, to.dy);
    path = path_extension['DashedPath|toDashedPath'](path, dashArray);
    $this.drawPath(path, painter);
  };
  canvas_extension['DashedLine|get#drawDashedLine'] = function DashedLine$124get$35drawDashedLine($this) {
    return dart.fn((from, to, painter, dashArray) => canvas_extension['DashedLine|drawDashedLine']($this, from, to, painter, dashArray), T$.OffsetLAndOffsetLAndPaintL__Tovoid());
  };
  var _barPaint = dart.privateName(line_chart_painter, "_barPaint");
  var _barAreaPaint = dart.privateName(line_chart_painter, "_barAreaPaint");
  var _barAreaLinesPaint = dart.privateName(line_chart_painter, "_barAreaLinesPaint");
  var _clearBarAreaPaint = dart.privateName(line_chart_painter, "_clearBarAreaPaint");
  var _extraLinesPaint = dart.privateName(line_chart_painter, "_extraLinesPaint");
  var _touchLinePaint = dart.privateName(line_chart_painter, "_touchLinePaint");
  var _bgTouchTooltipPaint$ = dart.privateName(line_chart_painter, "_bgTouchTooltipPaint");
  var _imagePaint = dart.privateName(line_chart_painter, "_imagePaint");
  var _clipToBorder = dart.privateName(line_chart_painter, "_clipToBorder");
  var _drawBetweenBarsArea = dart.privateName(line_chart_painter, "_drawBetweenBarsArea");
  var _drawExtraLines = dart.privateName(line_chart_painter, "_drawExtraLines");
  var _drawBarLine = dart.privateName(line_chart_painter, "_drawBarLine");
  var _drawDots = dart.privateName(line_chart_painter, "_drawDots");
  var _drawTouchedSpotsIndicator = dart.privateName(line_chart_painter, "_drawTouchedSpotsIndicator");
  var _drawTitles$ = dart.privateName(line_chart_painter, "_drawTitles");
  var _drawTouchTooltip$ = dart.privateName(line_chart_painter, "_drawTouchTooltip");
  var _generateBarPath = dart.privateName(line_chart_painter, "_generateBarPath");
  var _generateBelowBarPath = dart.privateName(line_chart_painter, "_generateBelowBarPath");
  var _generateAboveBarPath = dart.privateName(line_chart_painter, "_generateAboveBarPath");
  var _drawBelowBar = dart.privateName(line_chart_painter, "_drawBelowBar");
  var _drawAboveBar = dart.privateName(line_chart_painter, "_drawAboveBar");
  var _drawBarShadow = dart.privateName(line_chart_painter, "_drawBarShadow");
  var _drawBar = dart.privateName(line_chart_painter, "_drawBar");
  var _drawBetweenBar = dart.privateName(line_chart_painter, "_drawBetweenBar");
  var _getBarLineXLength = dart.privateName(line_chart_painter, "_getBarLineXLength");
  var _generateStepBarPath = dart.privateName(line_chart_painter, "_generateStepBarPath");
  var _generateNormalBarPath = dart.privateName(line_chart_painter, "_generateNormalBarPath");
  var _getNearestTouchedSpot = dart.privateName(line_chart_painter, "_getNearestTouchedSpot");
  const AxisChartPainter_TouchHandler$36$ = class AxisChartPainter_TouchHandler extends axis_chart_painter.AxisChartPainter$(dart.legacy(line_chart_data.LineChartData)) {};
  (AxisChartPainter_TouchHandler$36$.new = function(data, targetData, opts) {
    AxisChartPainter_TouchHandler$36$.__proto__.new.call(this, data, targetData, opts);
  }).prototype = AxisChartPainter_TouchHandler$36$.prototype;
  dart.applyMixin(AxisChartPainter_TouchHandler$36$, base_chart_painter.TouchHandler$(dart.legacy(line_chart_data.LineTouchResponse)));
  line_chart_painter.LineChartPainter = class LineChartPainter extends AxisChartPainter_TouchHandler$36$ {
    paint(canvas, size) {
      let canvasWrapper = new canvas_wrapper.CanvasWrapper.new(canvas, size);
      if (dart.test(this.data.lineBarsData[$isEmpty])) {
        return;
      }
      if (dart.test(this.data.clipData.any)) {
        canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, -40.0, dart.notNull(size.width) + 40, dart.notNull(size.height) + 40), ui.Paint.new());
        this[_clipToBorder](canvasWrapper);
      }
      super.paint(canvas, size);
      for (let betweenBarsData of this.data.betweenBarsData) {
        this[_drawBetweenBarsArea](canvasWrapper, this.data, betweenBarsData);
      }
      if (this.data.extraLinesData != null && !dart.test(this.data.extraLinesData.extraLinesOnTop)) {
        this[_drawExtraLines](canvasWrapper);
      }
      for (let i = 0; i < dart.notNull(this.data.lineBarsData[$length]); i = i + 1) {
        let barData = this.data.lineBarsData[$_get](i);
        if (!dart.test(barData.show)) {
          continue;
        }
        this[_drawBarLine](canvasWrapper, barData);
        this[_drawDots](canvasWrapper, barData);
        if (this.data.extraLinesData != null && dart.test(this.data.extraLinesData.extraLinesOnTop)) {
          this[_drawExtraLines](canvasWrapper);
        }
        this[_drawTouchedSpotsIndicator](canvasWrapper, barData);
      }
      if (dart.test(this.data.clipData.any)) {
        canvasWrapper.restore();
      }
      this.drawAxisTitles(canvasWrapper);
      this[_drawTitles$](canvasWrapper);
      for (let i = 0; i < dart.notNull(this.data.showingTooltipIndicators[$length]); i = i + 1) {
        let tooltipSpots = this.data.showingTooltipIndicators[$_get](i);
        let showingBarSpots = tooltipSpots.showingSpots;
        if (dart.test(showingBarSpots[$isEmpty])) {
          continue;
        }
        let barSpots = T$.ListOfLineBarSpotL().of(showingBarSpots);
        let topSpot = barSpots[$_get](0);
        for (let barSpot of barSpots) {
          if (dart.notNull(barSpot.y) > dart.notNull(topSpot.y)) {
            topSpot = barSpot;
          }
        }
        tooltipSpots = new line_chart_data.ShowingTooltipIndicators.new(tooltipSpots.lineIndex, barSpots);
        this[_drawTouchTooltip$](canvasWrapper, this.data.lineTouchData.touchTooltipData, topSpot, tooltipSpots);
      }
    }
    [_clipToBorder](canvasWrapper) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9;
      let size = canvasWrapper.size;
      let clip = this.data.clipData;
      let usableSize = this.getChartUsableDrawSize(size);
      let border = dart.test(this.data.borderData.show) ? this.data.borderData.border : null;
      let left = 0.0;
      let top = 0.0;
      let right = size.width;
      let bottom = size.height;
      if (dart.test(clip.left)) {
        let borderWidth = (t2$0 = (t2$ = (t2 = border, t2 == null ? null : t2.left), t2$ == null ? null : t2$.width), t2$0 == null ? 0.0 : t2$0);
        left = dart.notNull(this.getLeftOffsetDrawSize()) - dart.notNull(borderWidth) / 2;
      }
      if (dart.test(clip.top)) {
        let borderWidth = (t2$3 = (t2$2 = (t2$1 = border, t2$1 == null ? null : t2$1.top), t2$2 == null ? null : t2$2.width), t2$3 == null ? 0.0 : t2$3);
        top = dart.notNull(this.getTopOffsetDrawSize()) - dart.notNull(borderWidth) / 2;
      }
      if (dart.test(clip.right)) {
        let borderWidth = (t2$6 = (t2$5 = (t2$4 = border, t2$4 == null ? null : t2$4.right), t2$5 == null ? null : t2$5.width), t2$6 == null ? 0.0 : t2$6);
        right = dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(usableSize.width) + dart.notNull(borderWidth) / 2;
      }
      if (dart.test(clip.bottom)) {
        let borderWidth = (t2$9 = (t2$8 = (t2$7 = border, t2$7 == null ? null : t2$7.bottom), t2$8 == null ? null : t2$8.width), t2$9 == null ? 0.0 : t2$9);
        bottom = dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(usableSize.height) + dart.notNull(borderWidth) / 2;
      }
      canvasWrapper.clipRect(new ui.Rect.fromLTRB(left, top, right, bottom));
    }
    [_drawBarLine](canvasWrapper, barData) {
      let viewSize = canvasWrapper.size;
      let barList = T$.JSArrayOfListLOfFlSpotL().of([T$.JSArrayOfFlSpotL().of([])]);
      for (let spot of barData.spots) {
        if (dart.test(spot.isNotNull())) {
          barList[$last][$add](spot);
        } else if (dart.test(barList[$last][$isNotEmpty])) {
          barList[$add](T$.JSArrayOfFlSpotL().of([]));
        }
      }
      if (dart.test(barList[$last][$isEmpty])) {
        barList[$removeLast]();
      }
      for (let bar of barList) {
        let barPath = this[_generateBarPath](viewSize, barData, bar);
        let belowBarPath = this[_generateBelowBarPath](viewSize, barData, barPath, bar);
        let completelyFillBelowBarPath = this[_generateBelowBarPath](viewSize, barData, barPath, bar, {fillCompletely: true});
        let aboveBarPath = this[_generateAboveBarPath](viewSize, barData, barPath, bar);
        let completelyFillAboveBarPath = this[_generateAboveBarPath](viewSize, barData, barPath, bar, {fillCompletely: true});
        this[_drawBelowBar](canvasWrapper, belowBarPath, completelyFillAboveBarPath, barData);
        this[_drawAboveBar](canvasWrapper, aboveBarPath, completelyFillBelowBarPath, barData);
        this[_drawBarShadow](canvasWrapper, barPath, barData);
        this[_drawBar](canvasWrapper, barPath, barData);
      }
    }
    [_drawBetweenBarsArea](canvasWrapper, data, betweenBarsData) {
      let viewSize = canvasWrapper.size;
      let fromBarData = data.lineBarsData[$_get](betweenBarsData.fromIndex);
      let toBarData = data.lineBarsData[$_get](betweenBarsData.toIndex);
      let spots = T$.JSArrayOfFlSpotL().of([]);
      spots[$addAll](toBarData.spots[$reversed][$toList]());
      let fromBarPath = this[_generateBarPath](viewSize, fromBarData, fromBarData.spots);
      let barPath = this[_generateBarPath](viewSize, toBarData.copyWith({spots: spots}), toBarData.copyWith({spots: spots}).spots, {appendToPath: fromBarPath});
      this[_drawBetweenBar](canvasWrapper, barPath, betweenBarsData);
    }
    [_drawDots](canvasWrapper, barData) {
      let t4, t3, t2, t6, t5, t4$, t3$, t2$;
      if (!dart.test(barData.dotData.show) || barData.spots == null || dart.test(barData.spots[$isEmpty])) {
        return;
      }
      let viewSize = this.getChartUsableDrawSize(canvasWrapper.size);
      let barXDelta = this[_getBarLineXLength](barData, viewSize);
      for (let i = 0; i < dart.notNull(barData.spots[$length]); i = i + 1) {
        let spot = barData.spots[$_get](i);
        if (dart.test(spot.isNotNull()) && dart.test((t2 = barData.dotData, t3 = spot, t4 = barData, t2.checkToShowDot(t3, t4)))) {
          let x = this.getPixelX(spot.x, viewSize);
          let y = this.getPixelY(spot.y, viewSize);
          let xPercentInLine = (dart.notNull(x) - dart.notNull(this.getLeftOffsetDrawSize())) / dart.notNull(barXDelta) * 100;
          let painter = (t2$ = barData.dotData, t3$ = spot, t4$ = xPercentInLine, t5 = barData, t6 = i, t2$.getDotPainter(t3$, t4$, t5, t6));
          canvasWrapper.drawDot(painter, spot, new ui.Offset.new(x, y));
        }
      }
    }
    [_drawTouchedSpotsIndicator](canvasWrapper, barData) {
      let t4, t3, t2, t6, t5, t4$, t3$, t2$;
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      let barXDelta = this[_getBarLineXLength](barData, viewSize);
      let indicatorsData = (t2 = this.data.lineTouchData, t3 = barData, t4 = barData.showingIndicators, t2.getTouchedSpotIndicator(t3, t4));
      if (indicatorsData[$length] != barData.showingIndicators[$length]) {
        dart.throw(core.Exception.new("indicatorsData and touchedSpotOffsets size should be same"));
      }
      for (let i = 0; i < dart.notNull(barData.showingIndicators[$length]); i = i + 1) {
        let indicatorData = indicatorsData[$_get](i);
        let index = barData.showingIndicators[$_get](i);
        let spot = barData.spots[$_get](index);
        if (indicatorData == null) {
          continue;
        }
        let touchedSpot = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize), this.getPixelY(spot.y, chartViewSize));
        let showingDots = indicatorData.touchedSpotDotData != null && dart.test(indicatorData.touchedSpotDotData.show);
        let dotHeight = 0.0;
        let dotPainter = null;
        if (showingDots) {
          let xPercentInLine = (dart.notNull(touchedSpot.dx) - dart.notNull(this.getLeftOffsetDrawSize())) / dart.notNull(barXDelta) * 100;
          dotPainter = (t2$ = indicatorData.touchedSpotDotData, t3$ = spot, t4$ = xPercentInLine, t5 = barData, t6 = index, t2$.getDotPainter(t3$, t4$, t5, t6));
          dotHeight = dotPainter.getSize(spot).height;
        }
        let bottom = new ui.Offset.new(touchedSpot.dx, dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height));
        let top = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize), this.getTopOffsetDrawSize());
        let lineEnd = dart.test(this.data.lineTouchData.fullHeightTouchLine) ? top : touchedSpot['+'](new ui.Offset.new(0.0, dart.notNull(dotHeight) / 2));
        this[_touchLinePaint].color = indicatorData.indicatorBelowLine.color;
        this[_touchLinePaint].strokeWidth = indicatorData.indicatorBelowLine.strokeWidth;
        canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, bottom, lineEnd, this[_touchLinePaint], indicatorData.indicatorBelowLine.dashArray);
        if (showingDots) {
          canvasWrapper.drawDot(dotPainter, spot, touchedSpot);
        }
      }
    }
    [_generateBarPath](viewSize, barData, barSpots, opts) {
      let appendToPath = opts && 'appendToPath' in opts ? opts.appendToPath : null;
      if (dart.test(barData.isStepLineChart)) {
        return this[_generateStepBarPath](viewSize, barData, barSpots, {appendToPath: appendToPath});
      } else {
        return this[_generateNormalBarPath](viewSize, barData, barSpots, {appendToPath: appendToPath});
      }
    }
    [_generateNormalBarPath](viewSize, barData, barSpots, opts) {
      let t2;
      let appendToPath = opts && 'appendToPath' in opts ? opts.appendToPath : null;
      viewSize = this.getChartUsableDrawSize(viewSize);
      let path = (t2 = appendToPath, t2 == null ? ui.Path.new() : t2);
      let size = barSpots[$length];
      let temp = C[4] || CT.C4;
      let x = this.getPixelX(barSpots[$_get](0).x, viewSize);
      let y = this.getPixelY(barSpots[$_get](0).y, viewSize);
      if (appendToPath == null) {
        path.moveTo(x, y);
      } else {
        path.lineTo(x, y);
      }
      for (let i = 1; i < dart.notNull(size); i = i + 1) {
        let current = new ui.Offset.new(this.getPixelX(barSpots[$_get](i).x, viewSize), this.getPixelY(barSpots[$_get](i).y, viewSize));
        let previous = new ui.Offset.new(this.getPixelX(barSpots[$_get](i - 1).x, viewSize), this.getPixelY(barSpots[$_get](i - 1).y, viewSize));
        let next = new ui.Offset.new(this.getPixelX(barSpots[$_get](i + 1 < dart.notNull(size) ? i + 1 : i).x, viewSize), this.getPixelY(barSpots[$_get](i + 1 < dart.notNull(size) ? i + 1 : i).y, viewSize));
        let controlPoint1 = previous['+'](temp);
        let smoothness = dart.test(barData.isCurved) ? barData.curveSmoothness : 0.0;
        temp = next['-'](previous)['/'](2.0)['*'](smoothness);
        if (dart.test(barData.preventCurveOverShooting)) {
          if (dart.notNull(next['-'](current).dy) <= dart.notNull(barData.preventCurveOvershootingThreshold) || dart.notNull(current['-'](previous).dy) <= dart.notNull(barData.preventCurveOvershootingThreshold)) {
            temp = new ui.Offset.new(temp.dx, 0.0);
          }
          if (dart.notNull(next['-'](current).dx) <= dart.notNull(barData.preventCurveOvershootingThreshold) || dart.notNull(current['-'](previous).dx) <= dart.notNull(barData.preventCurveOvershootingThreshold)) {
            temp = new ui.Offset.new(0.0, temp.dy);
          }
        }
        let controlPoint2 = current['-'](temp);
        path.cubicTo(controlPoint1.dx, controlPoint1.dy, controlPoint2.dx, controlPoint2.dy, current.dx, current.dy);
      }
      return path;
    }
    [_generateStepBarPath](viewSize, barData, barSpots, opts) {
      let t2;
      let appendToPath = opts && 'appendToPath' in opts ? opts.appendToPath : null;
      viewSize = this.getChartUsableDrawSize(viewSize);
      let path = (t2 = appendToPath, t2 == null ? ui.Path.new() : t2);
      let size = barSpots[$length];
      let x = this.getPixelX(barSpots[$_get](0).x, viewSize);
      let y = this.getPixelY(barSpots[$_get](0).y, viewSize);
      if (appendToPath == null) {
        path.moveTo(x, y);
      } else {
        path.lineTo(x, y);
      }
      for (let i = 0; i < dart.notNull(size); i = i + 1) {
        let current = new ui.Offset.new(this.getPixelX(barSpots[$_get](i).x, viewSize), this.getPixelY(barSpots[$_get](i).y, viewSize));
        let next = new ui.Offset.new(this.getPixelX(barSpots[$_get](i + 1 < dart.notNull(size) ? i + 1 : i).x, viewSize), this.getPixelY(barSpots[$_get](i + 1 < dart.notNull(size) ? i + 1 : i).y, viewSize));
        let stepDirection = barData.lineChartStepData.stepDirection;
        if (current.dy == next.dy) {
          path.lineTo(next.dx, next.dy);
        } else {
          let deltaX = dart.notNull(next.dx) - dart.notNull(current.dx);
          path.lineTo(dart.notNull(current.dx) + deltaX - deltaX * dart.notNull(stepDirection), current.dy);
          path.lineTo(dart.notNull(current.dx) + deltaX - deltaX * dart.notNull(stepDirection), next.dy);
          path.lineTo(next.dx, next.dy);
        }
      }
      return path;
    }
    [_generateBelowBarPath](viewSize, barData, barPath, barSpots, opts) {
      let fillCompletely = opts && 'fillCompletely' in opts ? opts.fillCompletely : false;
      let belowBarPath = ui.Path.from(barPath);
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      let x = this.getPixelX(barSpots[$_get](dart.notNull(barSpots[$length]) - 1).x, chartViewSize);
      let y = null;
      if (!dart.test(fillCompletely) && dart.test(barData.belowBarData.applyCutOffY)) {
        y = this.getPixelY(barData.belowBarData.cutOffY, chartViewSize);
      } else {
        y = dart.notNull(chartViewSize.height) + dart.notNull(this.getTopOffsetDrawSize());
      }
      belowBarPath.lineTo(x, y);
      x = this.getPixelX(barSpots[$_get](0).x, chartViewSize);
      if (!dart.test(fillCompletely) && dart.test(barData.belowBarData.applyCutOffY)) {
        y = this.getPixelY(barData.belowBarData.cutOffY, chartViewSize);
      } else {
        y = dart.notNull(chartViewSize.height) + dart.notNull(this.getTopOffsetDrawSize());
      }
      belowBarPath.lineTo(x, y);
      x = this.getPixelX(barSpots[$_get](0).x, chartViewSize);
      y = this.getPixelY(barSpots[$_get](0).y, chartViewSize);
      belowBarPath.lineTo(x, y);
      belowBarPath.close();
      return belowBarPath;
    }
    [_generateAboveBarPath](viewSize, barData, barPath, barSpots, opts) {
      let fillCompletely = opts && 'fillCompletely' in opts ? opts.fillCompletely : false;
      let aboveBarPath = ui.Path.from(barPath);
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      let x = this.getPixelX(barSpots[$_get](dart.notNull(barSpots[$length]) - 1).x, chartViewSize);
      let y = null;
      if (!dart.test(fillCompletely) && dart.test(barData.aboveBarData.applyCutOffY)) {
        y = this.getPixelY(barData.aboveBarData.cutOffY, chartViewSize);
      } else {
        y = this.getTopOffsetDrawSize();
      }
      aboveBarPath.lineTo(x, y);
      x = this.getPixelX(barSpots[$_get](0).x, chartViewSize);
      if (!dart.test(fillCompletely) && dart.test(barData.aboveBarData.applyCutOffY)) {
        y = this.getPixelY(barData.aboveBarData.cutOffY, chartViewSize);
      } else {
        y = this.getTopOffsetDrawSize();
      }
      aboveBarPath.lineTo(x, y);
      x = this.getPixelX(barSpots[$_get](0).x, chartViewSize);
      y = this.getPixelY(barSpots[$_get](0).y, chartViewSize);
      aboveBarPath.lineTo(x, y);
      aboveBarPath.close();
      return aboveBarPath;
    }
    [_drawBelowBar](canvasWrapper, belowBarPath, filledAboveBarPath, barData) {
      let t3, t2;
      if (!dart.test(barData.belowBarData.show)) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      if (barData.belowBarData.colors[$length] === 1) {
        this[_barAreaPaint].color = barData.belowBarData.colors[$_get](0);
        this[_barAreaPaint].shader = null;
      } else {
        let stops = T$.JSArrayOfdoubleL().of([]);
        if (barData.belowBarData.gradientColorStops == null || barData.belowBarData.gradientColorStops[$length] != barData.belowBarData.colors[$length]) {
          barData.belowBarData.colors[$asMap]()[$forEach](dart.fn((index, color) => {
            let percent = 1.0 / dart.notNull(barData.belowBarData.colors[$length]);
            stops[$add](percent * dart.notNull(index));
          }, T$.intLAndColorLToNull()));
        } else {
          stops = barData.belowBarData.gradientColorStops;
        }
        let from = barData.belowBarData.gradientFrom;
        let to = barData.belowBarData.gradientTo;
        this[_barAreaPaint].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height) * dart.notNull(to.dy)), barData.belowBarData.colors, stops);
      }
      if (dart.test(barData.belowBarData.applyCutOffY)) {
        canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, 0.0, viewSize.width, viewSize.height), ui.Paint.new());
      }
      canvasWrapper.drawPath(belowBarPath, this[_barAreaPaint]);
      if (dart.test(barData.belowBarData.applyCutOffY)) {
        canvasWrapper.drawPath(filledAboveBarPath, this[_clearBarAreaPaint]);
        canvasWrapper.restore();
      }
      if (barData.belowBarData.spotsLine != null && dart.test(barData.belowBarData.spotsLine.show)) {
        for (let spot of barData.spots) {
          if (dart.test((t2 = barData.belowBarData.spotsLine, t3 = spot, t2.checkToShowSpotLine(t3)))) {
            let from = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize), this.getPixelY(spot.y, chartViewSize));
            let bottomPadding = dart.notNull(this.getExtraNeededVerticalSpace()) - dart.notNull(this.getTopOffsetDrawSize());
            let to = null;
            if (dart.test(barData.belowBarData.spotsLine.applyCutOffY) && dart.test(barData.belowBarData.applyCutOffY)) {
              to = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize), this.getPixelY(barData.belowBarData.cutOffY, chartViewSize));
            } else {
              to = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize), dart.notNull(viewSize.height) - bottomPadding);
            }
            this[_barAreaLinesPaint].color = barData.belowBarData.spotsLine.flLineStyle.color;
            this[_barAreaLinesPaint].strokeWidth = barData.belowBarData.spotsLine.flLineStyle.strokeWidth;
            canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, from, to, this[_barAreaLinesPaint], barData.belowBarData.spotsLine.flLineStyle.dashArray);
          }
        }
      }
    }
    [_drawAboveBar](canvasWrapper, aboveBarPath, filledBelowBarPath, barData) {
      let t3, t2;
      if (!dart.test(barData.aboveBarData.show)) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      if (barData.aboveBarData.colors[$length] === 1) {
        this[_barAreaPaint].color = barData.aboveBarData.colors[$_get](0);
        this[_barAreaPaint].shader = null;
      } else {
        let stops = T$.JSArrayOfdoubleL().of([]);
        if (barData.aboveBarData.gradientColorStops == null || barData.aboveBarData.gradientColorStops[$length] != barData.aboveBarData.colors[$length]) {
          barData.colors[$asMap]()[$forEach](dart.fn((index, color) => {
            let percent = 1.0 / dart.notNull(barData.colors[$length]);
            stops[$add](percent * dart.notNull(index));
          }, T$.intLAndColorLToNull()));
        } else {
          stops = barData.aboveBarData.gradientColorStops;
        }
        let from = barData.aboveBarData.gradientFrom;
        let to = barData.aboveBarData.gradientTo;
        this[_barAreaPaint].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height) * dart.notNull(to.dy)), barData.aboveBarData.colors, stops);
      }
      if (dart.test(barData.aboveBarData.applyCutOffY)) {
        canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, 0.0, viewSize.width, viewSize.height), ui.Paint.new());
      }
      canvasWrapper.drawPath(aboveBarPath, this[_barAreaPaint]);
      if (dart.test(barData.aboveBarData.applyCutOffY)) {
        canvasWrapper.drawPath(filledBelowBarPath, this[_clearBarAreaPaint]);
        canvasWrapper.restore();
      }
      if (barData.aboveBarData.spotsLine != null && dart.test(barData.aboveBarData.spotsLine.show)) {
        for (let spot of barData.spots) {
          if (dart.test((t2 = barData.aboveBarData.spotsLine, t3 = spot, t2.checkToShowSpotLine(t3)))) {
            let from = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize), this.getPixelY(spot.y, chartViewSize));
            let to = null;
            if (dart.test(barData.aboveBarData.spotsLine.applyCutOffY) && dart.test(barData.aboveBarData.applyCutOffY)) {
              to = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize), this.getPixelY(barData.aboveBarData.cutOffY, chartViewSize));
            } else {
              to = new ui.Offset.new(this.getPixelX(spot.x, chartViewSize), this.getTopOffsetDrawSize());
            }
            this[_barAreaLinesPaint].color = barData.aboveBarData.spotsLine.flLineStyle.color;
            this[_barAreaLinesPaint].strokeWidth = barData.aboveBarData.spotsLine.flLineStyle.strokeWidth;
            canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, from, to, this[_barAreaLinesPaint], barData.aboveBarData.spotsLine.flLineStyle.dashArray);
          }
        }
      }
    }
    [_drawBetweenBar](canvasWrapper, aboveBarPath, betweenBarsData) {
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      if (betweenBarsData.colors[$length] === 1) {
        this[_barAreaPaint].color = betweenBarsData.colors[$_get](0);
        this[_barAreaPaint].shader = null;
      } else {
        let stops = T$.JSArrayOfdoubleL().of([]);
        if (betweenBarsData.gradientColorStops == null || betweenBarsData.gradientColorStops[$length] != betweenBarsData.colors[$length]) {
          betweenBarsData.colors[$asMap]()[$forEach](dart.fn((index, color) => {
            let percent = 1.0 / dart.notNull(betweenBarsData.colors[$length]);
            stops[$add](percent * dart.notNull(index));
          }, T$.intLAndColorLToNull()));
        } else {
          stops = betweenBarsData.gradientColorStops;
        }
        let from = betweenBarsData.gradientFrom;
        let to = betweenBarsData.gradientTo;
        this[_barAreaPaint].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height) * dart.notNull(to.dy)), betweenBarsData.colors, stops);
      }
      canvasWrapper.saveLayer(new ui.Rect.fromLTWH(0.0, 0.0, viewSize.width, viewSize.height), ui.Paint.new());
      canvasWrapper.drawPath(aboveBarPath, this[_barAreaPaint]);
      canvasWrapper.restore();
    }
    [_drawBarShadow](canvasWrapper, barPath, barData) {
      if (!dart.test(barData.show) || barData.shadow.color.opacity === 0.0) {
        return;
      }
      this[_barPaint].strokeCap = dart.test(barData.isStrokeCapRound) ? ui.StrokeCap.round : ui.StrokeCap.butt;
      this[_barPaint].color = barData.shadow.color;
      this[_barPaint].shader = null;
      this[_barPaint].strokeWidth = barData.barWidth;
      this[_barPaint].color = barData.shadow.color;
      this[_barPaint].maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, line_chart_painter.LineChartPainter.convertRadiusToSigma(barData.shadow.blurRadius));
      barPath = path_extension['DashedPath|toDashedPath'](barPath, barData.dashArray);
      barPath = barPath.shift(barData.shadow.offset);
      canvasWrapper.drawPath(barPath, this[_barPaint]);
    }
    static convertRadiusToSigma(radius) {
      return dart.notNull(radius) * 0.57735 + 0.5;
    }
    [_drawBar](canvasWrapper, barPath, barData) {
      if (!dart.test(barData.show)) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      this[_barPaint].strokeCap = dart.test(barData.isStrokeCapRound) ? ui.StrokeCap.round : ui.StrokeCap.butt;
      if (barData.colors[$length] === 1) {
        this[_barPaint].color = barData.colors[$_get](0);
        this[_barPaint].shader = null;
      } else {
        let stops = T$.JSArrayOfdoubleL().of([]);
        if (barData.colorStops == null || barData.colorStops[$length] != barData.colors[$length]) {
          barData.colors[$asMap]()[$forEach](dart.fn((index, color) => {
            let percent = 1.0 / dart.notNull(barData.colors[$length]);
            stops[$add](percent * dart.notNull(index));
          }, T$.intLAndColorLToNull()));
        } else {
          stops = barData.colorStops;
        }
        let from = barData.gradientFrom;
        let to = barData.gradientTo;
        this[_barPaint].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(chartViewSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(chartViewSize.height) * dart.notNull(to.dy)), barData.colors, stops);
      }
      this[_barPaint].maskFilter = null;
      this[_barPaint].strokeWidth = barData.barWidth;
      barPath = path_extension['DashedPath|toDashedPath'](barPath, barData.dashArray);
      canvasWrapper.drawPath(barPath, this[_barPaint]);
    }
    [_drawTitles$](canvasWrapper) {
      let t2, t7, t6, t5, t4, t3, t2$, t3$, t2$0, t3$0, t2$1, t2$2, t7$, t6$, t5$, t4$, t3$1, t2$3, t3$2, t2$4, t3$3, t2$5, t2$6, t7$0, t6$0, t5$0, t4$0, t3$4, t2$7, t3$5, t2$8, t3$6, t2$9, t2$10, t7$1, t6$1, t5$1, t4$1, t3$7, t2$11, t3$8, t2$12, t3$9, t2$13;
      if (!dart.test(this.targetData.titlesData.show)) {
        return;
      }
      let viewSize = this.getChartUsableDrawSize(canvasWrapper.size);
      let leftTitles = this.targetData.titlesData.leftTitles;
      let leftInterval = (t2 = leftTitles.interval, t2 == null ? utils.getEfficientInterval(viewSize.height, this.data.verticalDiff) : t2);
      if (dart.test(leftTitles.showTitles)) {
        let verticalSeek = this.data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(this.data.maxY)) {
          if (dart.test((t2$ = leftTitles, t3 = this.data.minY, t4 = this.data.maxY, t5 = leftTitles, t6 = leftInterval, t7 = verticalSeek, t2$.checkToShowTitle(t3, t4, t5, t6, t7)))) {
            let x = 0 + dart.notNull(this.getLeftOffsetDrawSize());
            let y = this.getPixelY(verticalSeek, viewSize);
            let text = (t2$0 = leftTitles, t3$ = verticalSeek, t2$0.getTitles(t3$));
            let span = new text_span.TextSpan.new({style: (t2$1 = leftTitles, t3$0 = verticalSeek, t2$1.getTextStyles(t3$0)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace()});
            x = x - (dart.notNull(tp.width) + dart.notNull(leftTitles.margin));
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(leftTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) - dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxY) - dart.notNull(verticalSeek) < dart.notNull(leftInterval) && this.data.maxY != verticalSeek) {
            verticalSeek = this.data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(leftInterval);
          }
        }
      }
      let topTitles = this.targetData.titlesData.topTitles;
      let topInterval = (t2$2 = topTitles.interval, t2$2 == null ? utils.getEfficientInterval(viewSize.width, this.data.horizontalDiff) : t2$2);
      if (dart.test(topTitles.showTitles)) {
        let horizontalSeek = this.data.minX;
        while (dart.notNull(horizontalSeek) <= dart.notNull(this.data.maxX)) {
          if (dart.test((t2$3 = topTitles, t3$1 = this.data.minX, t4$ = this.data.maxX, t5$ = topTitles, t6$ = topInterval, t7$ = horizontalSeek, t2$3.checkToShowTitle(t3$1, t4$, t5$, t6$, t7$)))) {
            let x = this.getPixelX(horizontalSeek, viewSize);
            let y = this.getTopOffsetDrawSize();
            let text = (t2$4 = topTitles, t3$2 = horizontalSeek, t2$4.getTitles(t3$2));
            let span = new text_span.TextSpan.new({style: (t2$5 = topTitles, t3$3 = horizontalSeek, t2$5.getTextStyles(t3$3)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout();
            x = dart.notNull(x) - dart.notNull(tp.width) / 2;
            y = dart.notNull(y) - (dart.notNull(topTitles.margin) + dart.notNull(tp.height));
            canvasWrapper.save();
            canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(topTitles.rotateAngle));
            canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            x = dart.notNull(x) - dart.notNull(utils.translateRotatedPosition(tp.width, topTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxX) - dart.notNull(horizontalSeek) < dart.notNull(topInterval) && this.data.maxX != horizontalSeek) {
            horizontalSeek = this.data.maxX;
          } else {
            horizontalSeek = dart.notNull(horizontalSeek) + dart.notNull(topInterval);
          }
        }
      }
      let rightTitles = this.targetData.titlesData.rightTitles;
      let rightInterval = (t2$6 = rightTitles.interval, t2$6 == null ? utils.getEfficientInterval(viewSize.height, this.data.verticalDiff) : t2$6);
      if (dart.test(rightTitles.showTitles)) {
        let verticalSeek = this.data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(this.data.maxY)) {
          if (dart.test((t2$7 = rightTitles, t3$4 = this.data.minY, t4$0 = this.data.maxY, t5$0 = rightTitles, t6$0 = rightInterval, t7$0 = verticalSeek, t2$7.checkToShowTitle(t3$4, t4$0, t5$0, t6$0, t7$0)))) {
            let x = dart.notNull(viewSize.width) + dart.notNull(this.getLeftOffsetDrawSize());
            let y = this.getPixelY(verticalSeek, viewSize);
            let text = (t2$8 = rightTitles, t3$5 = verticalSeek, t2$8.getTitles(t3$5));
            let span = new text_span.TextSpan.new({style: (t2$9 = rightTitles, t3$6 = verticalSeek, t2$9.getTextStyles(t3$6)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace()});
            x = x + dart.notNull(rightTitles.margin);
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(rightTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) + dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxY) - dart.notNull(verticalSeek) < dart.notNull(rightInterval) && this.data.maxY != verticalSeek) {
            verticalSeek = this.data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(rightInterval);
          }
        }
      }
      let bottomTitles = this.targetData.titlesData.bottomTitles;
      let bottomInterval = (t2$10 = bottomTitles.interval, t2$10 == null ? utils.getEfficientInterval(viewSize.width, this.data.horizontalDiff) : t2$10);
      if (dart.test(bottomTitles.showTitles)) {
        let horizontalSeek = this.data.minX;
        while (dart.notNull(horizontalSeek) <= dart.notNull(this.data.maxX)) {
          if (dart.test((t2$11 = bottomTitles, t3$7 = this.data.minX, t4$1 = this.data.maxX, t5$1 = bottomTitles, t6$1 = bottomInterval, t7$1 = horizontalSeek, t2$11.checkToShowTitle(t3$7, t4$1, t5$1, t6$1, t7$1)))) {
            let x = this.getPixelX(horizontalSeek, viewSize);
            let y = dart.notNull(viewSize.height) + dart.notNull(this.getTopOffsetDrawSize());
            let text = (t2$12 = bottomTitles, t3$8 = horizontalSeek, t2$12.getTitles(t3$8));
            let span = new text_span.TextSpan.new({style: (t2$13 = bottomTitles, t3$9 = horizontalSeek, t2$13.getTextStyles(t3$9)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout();
            x = dart.notNull(x) - dart.notNull(tp.width) / 2;
            y = y + dart.notNull(bottomTitles.margin);
            canvasWrapper.save();
            canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, y + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(bottomTitles.rotateAngle));
            canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(y + dart.notNull(tp.height) / 2));
            x = dart.notNull(x) + dart.notNull(utils.translateRotatedPosition(tp.width, bottomTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxX) - dart.notNull(horizontalSeek) < dart.notNull(bottomInterval) && this.data.maxX != horizontalSeek) {
            horizontalSeek = this.data.maxX;
          } else {
            horizontalSeek = dart.notNull(horizontalSeek) + dart.notNull(bottomInterval);
          }
        }
      }
    }
    [_drawExtraLines](canvasWrapper) {
      let t2, t3, t2$, t2$0, t3$, t2$1;
      if (this.data.extraLinesData == null) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize);
      if (dart.test(this.data.extraLinesData.horizontalLines[$isNotEmpty])) {
        for (let line of this.data.extraLinesData.horizontalLines) {
          let leftChartPadding = this.getLeftOffsetDrawSize();
          let from = new ui.Offset.new(leftChartPadding, this.getPixelY(line.y, chartUsableSize));
          let rightChartPadding = dart.notNull(this.getExtraNeededHorizontalSpace()) - dart.notNull(this.getLeftOffsetDrawSize());
          let to = new ui.Offset.new(dart.notNull(viewSize.width) - rightChartPadding, this.getPixelY(line.y, chartUsableSize));
          this[_extraLinesPaint].color = line.color;
          this[_extraLinesPaint].strokeWidth = line.strokeWidth;
          canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, from, to, this[_extraLinesPaint], line.dashArray);
          if (line.sizedPicture != null) {
            let centerX = dart.notNull(line.sizedPicture.width) / 2;
            let centerY = dart.notNull(line.sizedPicture.height) / 2;
            let xPosition = dart.notNull(leftChartPadding) - centerX;
            let yPosition = dart.notNull(to.dy) - centerY;
            canvasWrapper.save();
            canvasWrapper.translate(xPosition, yPosition);
            canvasWrapper.drawPicture(line.sizedPicture.picture);
            canvasWrapper.restore();
          }
          if (line.image != null) {
            let centerX = dart.notNull(line.image.width) / 2;
            let centerY = dart.notNull(line.image.height) / 2;
            let centeredImageOffset = new ui.Offset.new(dart.notNull(leftChartPadding) - centerX, dart.notNull(to.dy) - centerY);
            canvasWrapper.drawImage(line.image, centeredImageOffset, this[_imagePaint]);
          }
          if (line.label != null && dart.test(line.label.show)) {
            let label = line.label;
            let style = new text_style.TextStyle.new({fontSize: 11.0, color: line.color}).merge(label.style);
            let padding = T$.EdgeInsetsL().as((t2 = label.padding, t2 == null ? edge_insets.EdgeInsets.zero : t2));
            let span = new text_span.TextSpan.new({text: (t2$ = label, t3 = line, t2$.labelResolver(t3)), style: style});
            let tp = new text_painter.TextPainter.new({text: span, textDirection: ui.TextDirection.ltr});
            tp.layout();
            canvasWrapper.drawText(tp, label.alignment.withinRect(new ui.Rect.fromLTRB(dart.notNull(from.dx) + dart.notNull(padding.left), dart.notNull(from.dy) - dart.notNull(padding.bottom) - dart.notNull(tp.height), dart.notNull(to.dx) - dart.notNull(padding.right) - dart.notNull(tp.width), dart.notNull(to.dy) + dart.notNull(padding.top))));
          }
        }
      }
      if (dart.test(this.data.extraLinesData.verticalLines[$isNotEmpty])) {
        for (let line of this.data.extraLinesData.verticalLines) {
          let topChartPadding = this.getTopOffsetDrawSize();
          let from = new ui.Offset.new(this.getPixelX(line.x, chartUsableSize), topChartPadding);
          let bottomChartPadding = dart.notNull(this.getExtraNeededVerticalSpace()) - dart.notNull(this.getTopOffsetDrawSize());
          let to = new ui.Offset.new(this.getPixelX(line.x, chartUsableSize), dart.notNull(viewSize.height) - bottomChartPadding);
          this[_extraLinesPaint].color = line.color;
          this[_extraLinesPaint].strokeWidth = line.strokeWidth;
          canvas_extension['DashedLine|drawDashedLine'](canvasWrapper, from, to, this[_extraLinesPaint], line.dashArray);
          if (line.sizedPicture != null) {
            let centerX = dart.notNull(line.sizedPicture.width) / 2;
            let centerY = dart.notNull(line.sizedPicture.height) / 2;
            let xPosition = dart.notNull(to.dx) - centerX;
            let yPosition = dart.notNull(viewSize.height) - bottomChartPadding - centerY;
            canvasWrapper.save();
            canvasWrapper.translate(xPosition, yPosition);
            canvasWrapper.drawPicture(line.sizedPicture.picture);
            canvasWrapper.restore();
          }
          if (line.image != null) {
            let centerX = dart.notNull(line.image.width) / 2;
            let centerY = dart.notNull(line.image.height) / 2;
            let centeredImageOffset = new ui.Offset.new(dart.notNull(to.dx) - centerX, dart.notNull(viewSize.height) - bottomChartPadding - centerY);
            canvasWrapper.drawImage(line.image, centeredImageOffset, this[_imagePaint]);
          }
          if (line.label != null && dart.test(line.label.show)) {
            let label = line.label;
            let style = new text_style.TextStyle.new({fontSize: 11.0, color: line.color}).merge(label.style);
            let padding = T$.EdgeInsetsL().as((t2$0 = label.padding, t2$0 == null ? edge_insets.EdgeInsets.zero : t2$0));
            let span = new text_span.TextSpan.new({text: (t2$1 = label, t3$ = line, t2$1.labelResolver(t3$)), style: style});
            let tp = new text_painter.TextPainter.new({text: span, textDirection: ui.TextDirection.ltr});
            tp.layout();
            canvasWrapper.drawText(tp, label.alignment.withinRect(new ui.Rect.fromLTRB(dart.notNull(to.dx) - dart.notNull(padding.right) - dart.notNull(tp.width), dart.notNull(from.dy) + dart.notNull(padding.top) - dart.notNull(topChartPadding), dart.notNull(from.dx) + dart.notNull(padding.left), dart.notNull(to.dy) - dart.notNull(padding.bottom) + bottomChartPadding)));
          }
        }
      }
    }
    [_drawTouchTooltip$](canvasWrapper, tooltipData, showOnSpot, showingTooltipSpots) {
      let t3, t2;
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize);
      let drawingTextPainters = T$.JSArrayOfTextPainterL().of([]);
      let tooltipItems = (t2 = tooltipData, t3 = showingTooltipSpots.showingSpots, t2.getTooltipItems(t3));
      if (tooltipItems[$length] != showingTooltipSpots.showingSpots[$length]) {
        dart.throw(core.Exception.new("tooltipItems and touchedSpots size should be same"));
      }
      for (let i = 0; i < dart.notNull(showingTooltipSpots.showingSpots[$length]); i = i + 1) {
        let tooltipItem = tooltipItems[$_get](i);
        if (tooltipItem == null) {
          continue;
        }
        let span = new text_span.TextSpan.new({style: tooltipItem.textStyle, text: tooltipItem.text});
        let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
        tp.layout({maxWidth: tooltipData.maxContentWidth});
        drawingTextPainters[$add](tp);
      }
      if (dart.test(drawingTextPainters[$isEmpty])) {
        return;
      }
      let biggerWidth = 0.0;
      let sumTextsHeight = 0.0;
      for (let tp of drawingTextPainters) {
        if (dart.notNull(tp.width) > dart.notNull(biggerWidth)) {
          biggerWidth = tp.width;
        }
        sumTextsHeight = sumTextsHeight + dart.notNull(tp.height);
      }
      sumTextsHeight = sumTextsHeight + (dart.notNull(drawingTextPainters[$length]) - 1) * 4;
      let mostTopOffset = new ui.Offset.new(this.getPixelX(showOnSpot.x, chartUsableSize), this.getPixelY(showOnSpot.y, chartUsableSize));
      let tooltipWidth = dart.notNull(biggerWidth) + dart.notNull(tooltipData.tooltipPadding.horizontal);
      let tooltipHeight = sumTextsHeight + dart.notNull(tooltipData.tooltipPadding.vertical);
      let tooltipTopPosition = null;
      if (dart.test(tooltipData.showOnTopOfTheChartBoxArea)) {
        tooltipTopPosition = 0 - tooltipHeight - dart.notNull(tooltipData.tooltipBottomMargin);
      } else {
        tooltipTopPosition = dart.notNull(mostTopOffset.dy) - tooltipHeight - dart.notNull(tooltipData.tooltipBottomMargin);
      }
      let rect = new ui.Rect.fromLTWH(dart.notNull(mostTopOffset.dx) - tooltipWidth / 2, tooltipTopPosition, tooltipWidth, tooltipHeight);
      if (dart.test(tooltipData.fitInsideHorizontally)) {
        if (dart.notNull(rect.left) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.left);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) + shiftAmount, rect.top, dart.notNull(rect.right) + shiftAmount, rect.bottom);
        }
        if (dart.notNull(rect.right) > dart.notNull(viewSize.width)) {
          let shiftAmount = dart.notNull(rect.right) - dart.notNull(viewSize.width);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) - shiftAmount, rect.top, dart.notNull(rect.right) - shiftAmount, rect.bottom);
        }
      }
      if (dart.test(tooltipData.fitInsideVertically)) {
        if (dart.notNull(rect.top) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.top);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) + shiftAmount, rect.right, dart.notNull(rect.bottom) + shiftAmount);
        }
        if (dart.notNull(rect.bottom) > dart.notNull(viewSize.height)) {
          let shiftAmount = dart.notNull(rect.bottom) - dart.notNull(viewSize.height);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) - shiftAmount, rect.right, dart.notNull(rect.bottom) - shiftAmount);
        }
      }
      let radius = new ui.Radius.circular(tooltipData.tooltipRoundedRadius);
      let roundedRect = new ui.RRect.fromRectAndCorners(rect, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
      this[_bgTouchTooltipPaint$].color = tooltipData.tooltipBgColor;
      canvasWrapper.drawRRect(roundedRect, this[_bgTouchTooltipPaint$]);
      let topPosSeek = tooltipData.tooltipPadding.top;
      for (let tp of drawingTextPainters) {
        let drawOffset = new ui.Offset.new(dart.notNull(rect.center.dx) - dart.notNull(tp.width) / 2, dart.notNull(rect.topCenter.dy) + dart.notNull(topPosSeek));
        canvasWrapper.drawText(tp, drawOffset);
        topPosSeek = dart.notNull(topPosSeek) + dart.notNull(tp.height);
        topPosSeek = dart.notNull(topPosSeek) + 4;
      }
    }
    [_getBarLineXLength](barData, chartUsableSize) {
      if (barData.spots == null || dart.test(barData.spots[$isEmpty])) {
        return 0.0;
      }
      let firstSpot = barData.spots[$_get](0);
      let firstSpotX = this.getPixelX(firstSpot.x, chartUsableSize);
      let lastSpot = barData.spots[$_get](dart.notNull(barData.spots[$length]) - 1);
      let lastSpotX = this.getPixelX(lastSpot.x, chartUsableSize);
      return dart.notNull(lastSpotX) - dart.notNull(firstSpotX);
    }
    getExtraNeededHorizontalSpace() {
      let sum = super.getExtraNeededHorizontalSpace();
      if (dart.test(this.data.titlesData.show)) {
        let leftSide = this.data.titlesData.leftTitles;
        if (dart.test(leftSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(leftSide.reservedSize) + dart.notNull(leftSide.margin));
        }
        let rightSide = this.data.titlesData.rightTitles;
        if (dart.test(rightSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(rightSide.reservedSize) + dart.notNull(rightSide.margin));
        }
      }
      return sum;
    }
    getExtraNeededVerticalSpace() {
      let sum = super.getExtraNeededVerticalSpace();
      if (dart.test(this.data.titlesData.show)) {
        let topSide = this.data.titlesData.topTitles;
        if (dart.test(topSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(topSide.reservedSize) + dart.notNull(topSide.margin));
        }
        let bottomSide = this.data.titlesData.bottomTitles;
        if (dart.test(bottomSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(bottomSide.reservedSize) + dart.notNull(bottomSide.margin));
        }
      }
      return sum;
    }
    getLeftOffsetDrawSize() {
      let sum = super.getLeftOffsetDrawSize();
      let leftTitles = this.data.titlesData.leftTitles;
      if (dart.test(this.data.titlesData.show) && dart.test(leftTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(leftTitles.reservedSize) + dart.notNull(leftTitles.margin));
      }
      return sum;
    }
    getTopOffsetDrawSize() {
      let sum = super.getTopOffsetDrawSize();
      let topTitles = this.data.titlesData.topTitles;
      if (dart.test(this.data.titlesData.show) && dart.test(topTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(topTitles.reservedSize) + dart.notNull(topTitles.margin));
      }
      return sum;
    }
    handleTouch(touchInput, size) {
      let touchedSpots = T$.JSArrayOfLineBarSpotL().of([]);
      for (let i = 0; i < dart.notNull(this.data.lineBarsData[$length]); i = i + 1) {
        let barData = this.data.lineBarsData[$_get](i);
        let foundTouchedSpot = this[_getNearestTouchedSpot](size, touchInput.getOffset(), barData, i);
        if (foundTouchedSpot != null) {
          touchedSpots[$add](foundTouchedSpot);
        }
      }
      return new line_chart_data.LineTouchResponse.new(touchedSpots, touchInput);
    }
    [_getNearestTouchedSpot](viewSize, touchedPoint, barData, barDataPosition) {
      if (!dart.test(barData.show)) {
        return null;
      }
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      for (let i = 0; i < dart.notNull(barData.spots[$length]); i = i + 1) {
        let spot = barData.spots[$_get](i);
        if (dart.test(spot.isNotNull())) {
          if ((dart.notNull(touchedPoint.dx) - dart.notNull(this.getPixelX(spot.x, chartViewSize)))[$abs]() <= dart.notNull(this.data.lineTouchData.touchSpotThreshold)) {
            return new line_chart_data.LineBarSpot.new(barData, barDataPosition, spot);
          }
        }
      }
      return null;
    }
    shouldRepaint(oldDelegate) {
      T$.LineChartPainterL().as(oldDelegate);
      return !dart.equals(oldDelegate.data, this.data);
    }
  };
  (line_chart_painter.LineChartPainter.new = function(data, targetData, touchHandler, opts) {
    let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4;
    let textScale = opts && 'textScale' in opts ? opts.textScale : null;
    this[_barPaint] = null;
    this[_barAreaPaint] = null;
    this[_barAreaLinesPaint] = null;
    this[_clearBarAreaPaint] = null;
    this[_extraLinesPaint] = null;
    this[_touchLinePaint] = null;
    this[_bgTouchTooltipPaint$] = null;
    this[_imagePaint] = null;
    line_chart_painter.LineChartPainter.__proto__.new.call(this, data, targetData, {textScale: textScale});
    touchHandler(this);
    this[_barPaint] = (t2 = ui.Paint.new(), (() => {
      t2.style = ui.PaintingStyle.stroke;
      return t2;
    })());
    this[_barAreaPaint] = (t2$ = ui.Paint.new(), (() => {
      t2$.style = ui.PaintingStyle.fill;
      return t2$;
    })());
    this[_barAreaLinesPaint] = (t2$0 = ui.Paint.new(), (() => {
      t2$0.style = ui.PaintingStyle.stroke;
      return t2$0;
    })());
    this[_clearBarAreaPaint] = (t2$1 = ui.Paint.new(), (() => {
      t2$1.style = ui.PaintingStyle.fill;
      t2$1.color = C[24] || CT.C24;
      t2$1.blendMode = ui.BlendMode.dstIn;
      return t2$1;
    })());
    this[_extraLinesPaint] = (t2$2 = ui.Paint.new(), (() => {
      t2$2.style = ui.PaintingStyle.stroke;
      return t2$2;
    })());
    this[_touchLinePaint] = (t2$3 = ui.Paint.new(), (() => {
      t2$3.style = ui.PaintingStyle.stroke;
      t2$3.color = colors$.Colors.black;
      return t2$3;
    })());
    this[_bgTouchTooltipPaint$] = (t2$4 = ui.Paint.new(), (() => {
      t2$4.style = ui.PaintingStyle.fill;
      t2$4.color = colors$.Colors.white;
      return t2$4;
    })());
    this[_imagePaint] = ui.Paint.new();
  }).prototype = line_chart_painter.LineChartPainter.prototype;
  dart.addTypeTests(line_chart_painter.LineChartPainter);
  dart.addTypeCaches(line_chart_painter.LineChartPainter);
  dart.setMethodSignature(line_chart_painter.LineChartPainter, () => ({
    __proto__: dart.getMethods(line_chart_painter.LineChartPainter.__proto__),
    [_clipToBorder]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
    [_drawBarLine]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(line_chart_data.LineChartBarData)]),
    [_drawBetweenBarsArea]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(line_chart_data.LineChartData), dart.legacy(line_chart_data.BetweenBarsData)]),
    [_drawDots]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(line_chart_data.LineChartBarData)]),
    [_drawTouchedSpotsIndicator]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(line_chart_data.LineChartBarData)]),
    [_generateBarPath]: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Size), dart.legacy(line_chart_data.LineChartBarData), dart.legacy(core.List$(dart.legacy(axis_chart_data.FlSpot)))], {appendToPath: dart.legacy(ui.Path)}, {}),
    [_generateNormalBarPath]: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Size), dart.legacy(line_chart_data.LineChartBarData), dart.legacy(core.List$(dart.legacy(axis_chart_data.FlSpot)))], {appendToPath: dart.legacy(ui.Path)}, {}),
    [_generateStepBarPath]: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Size), dart.legacy(line_chart_data.LineChartBarData), dart.legacy(core.List$(dart.legacy(axis_chart_data.FlSpot)))], {appendToPath: dart.legacy(ui.Path)}, {}),
    [_generateBelowBarPath]: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Size), dart.legacy(line_chart_data.LineChartBarData), dart.legacy(ui.Path), dart.legacy(core.List$(dart.legacy(axis_chart_data.FlSpot)))], {fillCompletely: dart.legacy(core.bool)}, {}),
    [_generateAboveBarPath]: dart.fnType(dart.legacy(ui.Path), [dart.legacy(ui.Size), dart.legacy(line_chart_data.LineChartBarData), dart.legacy(ui.Path), dart.legacy(core.List$(dart.legacy(axis_chart_data.FlSpot)))], {fillCompletely: dart.legacy(core.bool)}, {}),
    [_drawBelowBar]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(ui.Path), dart.legacy(ui.Path), dart.legacy(line_chart_data.LineChartBarData)]),
    [_drawAboveBar]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(ui.Path), dart.legacy(ui.Path), dart.legacy(line_chart_data.LineChartBarData)]),
    [_drawBetweenBar]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(ui.Path), dart.legacy(line_chart_data.BetweenBarsData)]),
    [_drawBarShadow]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(ui.Path), dart.legacy(line_chart_data.LineChartBarData)]),
    [_drawBar]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(ui.Path), dart.legacy(line_chart_data.LineChartBarData)]),
    [_drawTitles$]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
    [_drawExtraLines]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper)]),
    [_drawTouchTooltip$]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(line_chart_data.LineTouchTooltipData), dart.legacy(axis_chart_data.FlSpot), dart.legacy(line_chart_data.ShowingTooltipIndicators)]),
    [_getBarLineXLength]: dart.fnType(dart.legacy(core.double), [dart.legacy(line_chart_data.LineChartBarData), dart.legacy(ui.Size)]),
    [_getNearestTouchedSpot]: dart.fnType(dart.legacy(line_chart_data.LineBarSpot), [dart.legacy(ui.Size), dart.legacy(ui.Offset), dart.legacy(line_chart_data.LineChartBarData), dart.legacy(core.int)]),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(line_chart_painter.LineChartPainter, I[13]);
  dart.setFieldSignature(line_chart_painter.LineChartPainter, () => ({
    __proto__: dart.getFields(line_chart_painter.LineChartPainter.__proto__),
    [_barPaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_barAreaPaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_barAreaLinesPaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_clearBarAreaPaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_extraLinesPaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_touchLinePaint]: dart.fieldType(dart.legacy(ui.Paint)),
    [_bgTouchTooltipPaint$]: dart.fieldType(dart.legacy(ui.Paint)),
    [_imagePaint]: dart.fieldType(dart.legacy(ui.Paint))
  }));
  var show$5 = dart.privateName(base_chart_data, "FlBorderData.show");
  var border$ = dart.privateName(base_chart_data, "FlBorderData.border");
  const Object_EquatableMixin$36$20 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$20.new = function() {
  }).prototype = Object_EquatableMixin$36$20.prototype;
  dart.applyMixin(Object_EquatableMixin$36$20, equatable_mixin.EquatableMixin);
  base_chart_data.FlBorderData = class FlBorderData extends Object_EquatableMixin$36$20 {
    get show() {
      return this[show$5];
    }
    set show(value) {
      super.show = value;
    }
    get border() {
      return this[border$];
    }
    set border(value) {
      this[border$] = value;
    }
    static lerp(a, b, t) {
      if (!(a != null && b != null && t != null)) dart.assertFailed(null, I[14], 57, 12, "a != null && b != null && t != null");
      return new base_chart_data.FlBorderData.new({show: b.show, border: box_border.Border.lerp(a.border, b.border, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.border]);
    }
  };
  (base_chart_data.FlBorderData.new = function(opts) {
    let t2, t2$;
    let show = opts && 'show' in opts ? opts.show : null;
    let border = opts && 'border' in opts ? opts.border : null;
    this[show$5] = (t2 = show, t2 == null ? true : t2);
    this[border$] = (t2$ = border, t2$ == null ? box_border.Border.all({color: colors$.Colors.black, width: 1.0, style: borders.BorderStyle.solid}) : t2$);
    ;
  }).prototype = base_chart_data.FlBorderData.prototype;
  dart.addTypeTests(base_chart_data.FlBorderData);
  dart.addTypeCaches(base_chart_data.FlBorderData);
  dart.setGetterSignature(base_chart_data.FlBorderData, () => ({
    __proto__: dart.getGetters(base_chart_data.FlBorderData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(base_chart_data.FlBorderData, I[2]);
  dart.setFieldSignature(base_chart_data.FlBorderData, () => ({
    __proto__: dart.getFields(base_chart_data.FlBorderData.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    border: dart.fieldType(dart.legacy(box_border.Border))
  }));
  var top$ = dart.privateName(base_chart_data, "FlClipData.top");
  var bottom$ = dart.privateName(base_chart_data, "FlClipData.bottom");
  var left$ = dart.privateName(base_chart_data, "FlClipData.left");
  var right$ = dart.privateName(base_chart_data, "FlClipData.right");
  const Object_EquatableMixin$36$21 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$21.new = function() {
  }).prototype = Object_EquatableMixin$36$21.prototype;
  dart.applyMixin(Object_EquatableMixin$36$21, equatable_mixin.EquatableMixin);
  base_chart_data.FlClipData = class FlClipData extends Object_EquatableMixin$36$21 {
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    get any() {
      return dart.test(this.top) || dart.test(this.bottom) || dart.test(this.left) || dart.test(this.right);
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.top, this.bottom, this.left, this.right]);
    }
  };
  (base_chart_data.FlClipData.new = function(opts) {
    let top = opts && 'top' in opts ? opts.top : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    let left = opts && 'left' in opts ? opts.left : null;
    let right = opts && 'right' in opts ? opts.right : null;
    this[top$] = top;
    this[bottom$] = bottom;
    this[left$] = left;
    this[right$] = right;
    ;
  }).prototype = base_chart_data.FlClipData.prototype;
  (base_chart_data.FlClipData.all = function() {
    base_chart_data.FlClipData.new.call(this, {top: true, bottom: true, left: true, right: true});
  }).prototype = base_chart_data.FlClipData.prototype;
  (base_chart_data.FlClipData.vertical = function() {
    base_chart_data.FlClipData.new.call(this, {top: true, bottom: true, left: false, right: false});
  }).prototype = base_chart_data.FlClipData.prototype;
  (base_chart_data.FlClipData.horizontal = function() {
    base_chart_data.FlClipData.new.call(this, {top: false, bottom: false, left: true, right: true});
  }).prototype = base_chart_data.FlClipData.prototype;
  (base_chart_data.FlClipData.none = function() {
    base_chart_data.FlClipData.new.call(this, {top: false, bottom: false, left: false, right: false});
  }).prototype = base_chart_data.FlClipData.prototype;
  dart.addTypeTests(base_chart_data.FlClipData);
  dart.addTypeCaches(base_chart_data.FlClipData);
  dart.setGetterSignature(base_chart_data.FlClipData, () => ({
    __proto__: dart.getGetters(base_chart_data.FlClipData.__proto__),
    any: dart.legacy(core.bool),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(base_chart_data.FlClipData, I[2]);
  dart.setFieldSignature(base_chart_data.FlClipData, () => ({
    __proto__: dart.getFields(base_chart_data.FlClipData.__proto__),
    top: dart.finalFieldType(dart.legacy(core.bool)),
    bottom: dart.finalFieldType(dart.legacy(core.bool)),
    left: dart.finalFieldType(dart.legacy(core.bool)),
    right: dart.finalFieldType(dart.legacy(core.bool))
  }));
  base_chart_data.defaultGetTitle = function defaultGetTitle(value) {
    return utils.formatNumber(value);
  };
  base_chart_data.defaultGetTitleTextStyle = function defaultGetTitleTextStyle(value) {
    return C[130] || CT.C130;
  };
  var canvas$ = dart.privateName(canvas_wrapper, "CanvasWrapper.canvas");
  var size$0 = dart.privateName(canvas_wrapper, "CanvasWrapper.size");
  var _name = dart.privateName(ui, "_name");
  canvas_wrapper.CanvasWrapper = class CanvasWrapper extends core.Object {
    get canvas() {
      return this[canvas$];
    }
    set canvas(value) {
      super.canvas = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    drawRRect(rrect, paint) {
      return this.canvas.drawRRect(rrect, paint);
    }
    save() {
      return this.canvas.save();
    }
    restore() {
      return this.canvas.restore();
    }
    clipRect(rect, opts) {
      let clipOp = opts && 'clipOp' in opts ? opts.clipOp : C[131] || CT.C131;
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      return this.canvas.clipRect(rect, {clipOp: clipOp, doAntiAlias: doAntiAlias});
    }
    translate(dx, dy) {
      return this.canvas.translate(dx, dy);
    }
    rotate(radius) {
      return this.canvas.rotate(radius);
    }
    drawPath(path, paint) {
      return this.canvas.drawPath(path, paint);
    }
    saveLayer(bounds, paint) {
      return this.canvas.saveLayer(bounds, paint);
    }
    drawPicture(picture) {
      return this.canvas.drawPicture(picture);
    }
    drawImage(image, offset, paint) {
      return this.canvas.drawImage(image, offset, paint);
    }
    drawRect(rect, paint) {
      return this.canvas.drawRect(rect, paint);
    }
    drawLine(p1, p2, paint) {
      return this.canvas.drawLine(p1, p2, paint);
    }
    drawCircle(center, radius, paint) {
      return this.canvas.drawCircle(center, radius, paint);
    }
    drawArc(rect, startAngle, sweepAngle, useCenter, paint) {
      return this.canvas.drawArc(rect, startAngle, sweepAngle, useCenter, paint);
    }
    drawText(tp, offset) {
      return tp.paint(this.canvas, offset);
    }
    drawDot(painter, spot, offset) {
      painter.draw(this.canvas, spot, offset);
    }
  };
  (canvas_wrapper.CanvasWrapper.new = function(canvas, size) {
    this[canvas$] = canvas;
    this[size$0] = size;
    ;
  }).prototype = canvas_wrapper.CanvasWrapper.prototype;
  dart.addTypeTests(canvas_wrapper.CanvasWrapper);
  dart.addTypeCaches(canvas_wrapper.CanvasWrapper);
  dart.setMethodSignature(canvas_wrapper.CanvasWrapper, () => ({
    __proto__: dart.getMethods(canvas_wrapper.CanvasWrapper.__proto__),
    drawRRect: dart.fnType(dart.void, [dart.legacy(ui.RRect), dart.legacy(ui.Paint)]),
    save: dart.fnType(dart.void, []),
    restore: dart.fnType(dart.void, []),
    clipRect: dart.fnType(dart.void, [dart.legacy(ui.Rect)], {clipOp: dart.legacy(ui.ClipOp), doAntiAlias: dart.legacy(core.bool)}, {}),
    translate: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    rotate: dart.fnType(dart.void, [dart.legacy(core.double)]),
    drawPath: dart.fnType(dart.void, [dart.legacy(ui.Path), dart.legacy(ui.Paint)]),
    saveLayer: dart.fnType(dart.void, [dart.legacy(ui.Rect), dart.legacy(ui.Paint)]),
    drawPicture: dart.fnType(dart.void, [dart.legacy(ui.Picture)]),
    drawImage: dart.fnType(dart.void, [dart.legacy(ui.Image), dart.legacy(ui.Offset), dart.legacy(ui.Paint)]),
    drawRect: dart.fnType(dart.void, [dart.legacy(ui.Rect), dart.legacy(ui.Paint)]),
    drawLine: dart.fnType(dart.void, [dart.legacy(ui.Offset), dart.legacy(ui.Offset), dart.legacy(ui.Paint)]),
    drawCircle: dart.fnType(dart.void, [dart.legacy(ui.Offset), dart.legacy(core.double), dart.legacy(ui.Paint)]),
    drawArc: dart.fnType(dart.void, [dart.legacy(ui.Rect), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.bool), dart.legacy(ui.Paint)]),
    drawText: dart.fnType(dart.void, [dart.legacy(text_painter.TextPainter), dart.legacy(ui.Offset)]),
    drawDot: dart.fnType(dart.void, [dart.legacy(line_chart_data.FlDotPainter), dart.legacy(axis_chart_data.FlSpot), dart.legacy(ui.Offset)])
  }));
  dart.setLibraryUri(canvas_wrapper.CanvasWrapper, I[15]);
  dart.setFieldSignature(canvas_wrapper.CanvasWrapper, () => ({
    __proto__: dart.getFields(canvas_wrapper.CanvasWrapper.__proto__),
    canvas: dart.finalFieldType(dart.legacy(ui.Canvas)),
    size: dart.finalFieldType(dart.legacy(ui.Size))
  }));
  var show$6 = dart.privateName(axis_chart_data, "FlAxisTitleData.show");
  var leftTitle$ = dart.privateName(axis_chart_data, "FlAxisTitleData.leftTitle");
  var topTitle$ = dart.privateName(axis_chart_data, "FlAxisTitleData.topTitle");
  var rightTitle$ = dart.privateName(axis_chart_data, "FlAxisTitleData.rightTitle");
  var bottomTitle$ = dart.privateName(axis_chart_data, "FlAxisTitleData.bottomTitle");
  const Object_EquatableMixin$36$22 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$22.new = function() {
  }).prototype = Object_EquatableMixin$36$22.prototype;
  dart.applyMixin(Object_EquatableMixin$36$22, equatable_mixin.EquatableMixin);
  axis_chart_data.FlAxisTitleData = class FlAxisTitleData extends Object_EquatableMixin$36$22 {
    get show() {
      return this[show$6];
    }
    set show(value) {
      super.show = value;
    }
    get leftTitle() {
      return this[leftTitle$];
    }
    set leftTitle(value) {
      super.leftTitle = value;
    }
    get topTitle() {
      return this[topTitle$];
    }
    set topTitle(value) {
      super.topTitle = value;
    }
    get rightTitle() {
      return this[rightTitle$];
    }
    set rightTitle(value) {
      super.rightTitle = value;
    }
    get bottomTitle() {
      return this[bottomTitle$];
    }
    set bottomTitle(value) {
      super.bottomTitle = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.FlAxisTitleData.new({show: b.show, leftTitle: axis_chart_data.AxisTitle.lerp(a.leftTitle, b.leftTitle, t), rightTitle: axis_chart_data.AxisTitle.lerp(a.rightTitle, b.rightTitle, t), bottomTitle: axis_chart_data.AxisTitle.lerp(a.bottomTitle, b.bottomTitle, t), topTitle: axis_chart_data.AxisTitle.lerp(a.topTitle, b.topTitle, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.leftTitle, this.topTitle, this.rightTitle, this.bottomTitle]);
    }
  };
  (axis_chart_data.FlAxisTitleData.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2;
    let show = opts && 'show' in opts ? opts.show : null;
    let leftTitle = opts && 'leftTitle' in opts ? opts.leftTitle : null;
    let topTitle = opts && 'topTitle' in opts ? opts.topTitle : null;
    let rightTitle = opts && 'rightTitle' in opts ? opts.rightTitle : null;
    let bottomTitle = opts && 'bottomTitle' in opts ? opts.bottomTitle : null;
    this[show$6] = (t2 = show, t2 == null ? true : t2);
    this[leftTitle$] = (t2$ = leftTitle, t2$ == null ? new axis_chart_data.AxisTitle.new({reservedSize: 16.0}) : t2$);
    this[topTitle$] = (t2$0 = topTitle, t2$0 == null ? new axis_chart_data.AxisTitle.new({reservedSize: 16.0}) : t2$0);
    this[rightTitle$] = (t2$1 = rightTitle, t2$1 == null ? new axis_chart_data.AxisTitle.new({reservedSize: 16.0}) : t2$1);
    this[bottomTitle$] = (t2$2 = bottomTitle, t2$2 == null ? new axis_chart_data.AxisTitle.new({reservedSize: 16.0}) : t2$2);
    ;
  }).prototype = axis_chart_data.FlAxisTitleData.prototype;
  dart.addTypeTests(axis_chart_data.FlAxisTitleData);
  dart.addTypeCaches(axis_chart_data.FlAxisTitleData);
  dart.setGetterSignature(axis_chart_data.FlAxisTitleData, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlAxisTitleData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.FlAxisTitleData, I[3]);
  dart.setFieldSignature(axis_chart_data.FlAxisTitleData, () => ({
    __proto__: dart.getFields(axis_chart_data.FlAxisTitleData.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    leftTitle: dart.finalFieldType(dart.legacy(axis_chart_data.AxisTitle)),
    topTitle: dart.finalFieldType(dart.legacy(axis_chart_data.AxisTitle)),
    rightTitle: dart.finalFieldType(dart.legacy(axis_chart_data.AxisTitle)),
    bottomTitle: dart.finalFieldType(dart.legacy(axis_chart_data.AxisTitle))
  }));
  var showTitle$0 = dart.privateName(axis_chart_data, "AxisTitle.showTitle");
  var titleText$ = dart.privateName(axis_chart_data, "AxisTitle.titleText");
  var reservedSize$ = dart.privateName(axis_chart_data, "AxisTitle.reservedSize");
  var textStyle$1 = dart.privateName(axis_chart_data, "AxisTitle.textStyle");
  var textAlign$ = dart.privateName(axis_chart_data, "AxisTitle.textAlign");
  var margin$ = dart.privateName(axis_chart_data, "AxisTitle.margin");
  const Object_EquatableMixin$36$23 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$23.new = function() {
  }).prototype = Object_EquatableMixin$36$23.prototype;
  dart.applyMixin(Object_EquatableMixin$36$23, equatable_mixin.EquatableMixin);
  axis_chart_data.AxisTitle = class AxisTitle extends Object_EquatableMixin$36$23 {
    get showTitle() {
      return this[showTitle$0];
    }
    set showTitle(value) {
      super.showTitle = value;
    }
    get titleText() {
      return this[titleText$];
    }
    set titleText(value) {
      super.titleText = value;
    }
    get reservedSize() {
      return this[reservedSize$];
    }
    set reservedSize(value) {
      super.reservedSize = value;
    }
    get textStyle() {
      return this[textStyle$1];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get textAlign() {
      return this[textAlign$];
    }
    set textAlign(value) {
      super.textAlign = value;
    }
    get margin() {
      return this[margin$];
    }
    set margin(value) {
      super.margin = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.AxisTitle.new({showTitle: b.showTitle, titleText: b.titleText, reservedSize: ui.lerpDouble(a.reservedSize, b.reservedSize, t), textStyle: text_style.TextStyle.lerp(a.textStyle.copyWith({fontSize: a.textStyle.fontSize}), b.textStyle.copyWith({fontSize: b.textStyle.fontSize}), t), textAlign: b.textAlign, margin: ui.lerpDouble(a.margin, b.margin, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.showTitle, this.titleText, this.reservedSize, this.textStyle, this.textAlign, this.margin]);
    }
  };
  (axis_chart_data.AxisTitle.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2, t2$3;
    let showTitle = opts && 'showTitle' in opts ? opts.showTitle : null;
    let titleText = opts && 'titleText' in opts ? opts.titleText : null;
    let reservedSize = opts && 'reservedSize' in opts ? opts.reservedSize : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    this[showTitle$0] = (t2 = showTitle, t2 == null ? false : t2);
    this[titleText$] = (t2$ = titleText, t2$ == null ? "" : t2$);
    this[reservedSize$] = (t2$0 = reservedSize, t2$0 == null ? 14.0 : t2$0);
    this[textStyle$1] = (t2$1 = textStyle, t2$1 == null ? C[130] || CT.C130 : t2$1);
    this[textAlign$] = (t2$2 = textAlign, t2$2 == null ? ui.TextAlign.center : t2$2);
    this[margin$] = (t2$3 = margin, t2$3 == null ? 4.0 : t2$3);
    ;
  }).prototype = axis_chart_data.AxisTitle.prototype;
  dart.addTypeTests(axis_chart_data.AxisTitle);
  dart.addTypeCaches(axis_chart_data.AxisTitle);
  dart.setGetterSignature(axis_chart_data.AxisTitle, () => ({
    __proto__: dart.getGetters(axis_chart_data.AxisTitle.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.AxisTitle, I[3]);
  dart.setFieldSignature(axis_chart_data.AxisTitle, () => ({
    __proto__: dart.getFields(axis_chart_data.AxisTitle.__proto__),
    showTitle: dart.finalFieldType(dart.legacy(core.bool)),
    titleText: dart.finalFieldType(dart.legacy(core.String)),
    reservedSize: dart.finalFieldType(dart.legacy(core.double)),
    textStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle)),
    textAlign: dart.finalFieldType(dart.legacy(ui.TextAlign)),
    margin: dart.finalFieldType(dart.legacy(core.double))
  }));
  var show$7 = dart.privateName(axis_chart_data, "FlTitlesData.show");
  var leftTitles$ = dart.privateName(axis_chart_data, "FlTitlesData.leftTitles");
  var topTitles$ = dart.privateName(axis_chart_data, "FlTitlesData.topTitles");
  var rightTitles$ = dart.privateName(axis_chart_data, "FlTitlesData.rightTitles");
  var bottomTitles$ = dart.privateName(axis_chart_data, "FlTitlesData.bottomTitles");
  const Object_EquatableMixin$36$24 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$24.new = function() {
  }).prototype = Object_EquatableMixin$36$24.prototype;
  dart.applyMixin(Object_EquatableMixin$36$24, equatable_mixin.EquatableMixin);
  axis_chart_data.FlTitlesData = class FlTitlesData extends Object_EquatableMixin$36$24 {
    get show() {
      return this[show$7];
    }
    set show(value) {
      super.show = value;
    }
    get leftTitles() {
      return this[leftTitles$];
    }
    set leftTitles(value) {
      super.leftTitles = value;
    }
    get topTitles() {
      return this[topTitles$];
    }
    set topTitles(value) {
      super.topTitles = value;
    }
    get rightTitles() {
      return this[rightTitles$];
    }
    set rightTitles(value) {
      super.rightTitles = value;
    }
    get bottomTitles() {
      return this[bottomTitles$];
    }
    set bottomTitles(value) {
      super.bottomTitles = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.FlTitlesData.new({show: b.show, leftTitles: axis_chart_data.SideTitles.lerp(a.leftTitles, b.leftTitles, t), rightTitles: axis_chart_data.SideTitles.lerp(a.rightTitles, b.rightTitles, t), bottomTitles: axis_chart_data.SideTitles.lerp(a.bottomTitles, b.bottomTitles, t), topTitles: axis_chart_data.SideTitles.lerp(a.topTitles, b.topTitles, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.leftTitles, this.topTitles, this.rightTitles, this.bottomTitles]);
    }
  };
  (axis_chart_data.FlTitlesData.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2;
    let show = opts && 'show' in opts ? opts.show : null;
    let leftTitles = opts && 'leftTitles' in opts ? opts.leftTitles : null;
    let topTitles = opts && 'topTitles' in opts ? opts.topTitles : null;
    let rightTitles = opts && 'rightTitles' in opts ? opts.rightTitles : null;
    let bottomTitles = opts && 'bottomTitles' in opts ? opts.bottomTitles : null;
    this[show$7] = (t2 = show, t2 == null ? true : t2);
    this[leftTitles$] = (t2$ = leftTitles, t2$ == null ? new axis_chart_data.SideTitles.new({reservedSize: 40.0, showTitles: true}) : t2$);
    this[topTitles$] = (t2$0 = topTitles, t2$0 == null ? new axis_chart_data.SideTitles.new({reservedSize: 6.0}) : t2$0);
    this[rightTitles$] = (t2$1 = rightTitles, t2$1 == null ? new axis_chart_data.SideTitles.new({reservedSize: 40.0}) : t2$1);
    this[bottomTitles$] = (t2$2 = bottomTitles, t2$2 == null ? new axis_chart_data.SideTitles.new({reservedSize: 22.0, showTitles: true}) : t2$2);
    ;
  }).prototype = axis_chart_data.FlTitlesData.prototype;
  dart.addTypeTests(axis_chart_data.FlTitlesData);
  dart.addTypeCaches(axis_chart_data.FlTitlesData);
  dart.setGetterSignature(axis_chart_data.FlTitlesData, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlTitlesData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.FlTitlesData, I[3]);
  dart.setFieldSignature(axis_chart_data.FlTitlesData, () => ({
    __proto__: dart.getFields(axis_chart_data.FlTitlesData.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    leftTitles: dart.finalFieldType(dart.legacy(axis_chart_data.SideTitles)),
    topTitles: dart.finalFieldType(dart.legacy(axis_chart_data.SideTitles)),
    rightTitles: dart.finalFieldType(dart.legacy(axis_chart_data.SideTitles)),
    bottomTitles: dart.finalFieldType(dart.legacy(axis_chart_data.SideTitles))
  }));
  var showTitles$ = dart.privateName(axis_chart_data, "SideTitles.showTitles");
  var getTitles$ = dart.privateName(axis_chart_data, "SideTitles.getTitles");
  var reservedSize$0 = dart.privateName(axis_chart_data, "SideTitles.reservedSize");
  var getTextStyles$ = dart.privateName(axis_chart_data, "SideTitles.getTextStyles");
  var margin$0 = dart.privateName(axis_chart_data, "SideTitles.margin");
  var interval$ = dart.privateName(axis_chart_data, "SideTitles.interval");
  var rotateAngle$ = dart.privateName(axis_chart_data, "SideTitles.rotateAngle");
  var checkToShowTitle$ = dart.privateName(axis_chart_data, "SideTitles.checkToShowTitle");
  const Object_EquatableMixin$36$25 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$25.new = function() {
  }).prototype = Object_EquatableMixin$36$25.prototype;
  dart.applyMixin(Object_EquatableMixin$36$25, equatable_mixin.EquatableMixin);
  axis_chart_data.SideTitles = class SideTitles extends Object_EquatableMixin$36$25 {
    get showTitles() {
      return this[showTitles$];
    }
    set showTitles(value) {
      super.showTitles = value;
    }
    get getTitles() {
      return this[getTitles$];
    }
    set getTitles(value) {
      super.getTitles = value;
    }
    get reservedSize() {
      return this[reservedSize$0];
    }
    set reservedSize(value) {
      super.reservedSize = value;
    }
    get getTextStyles() {
      return this[getTextStyles$];
    }
    set getTextStyles(value) {
      super.getTextStyles = value;
    }
    get margin() {
      return this[margin$0];
    }
    set margin(value) {
      super.margin = value;
    }
    get interval() {
      return this[interval$];
    }
    set interval(value) {
      super.interval = value;
    }
    get rotateAngle() {
      return this[rotateAngle$];
    }
    set rotateAngle(value) {
      super.rotateAngle = value;
    }
    get checkToShowTitle() {
      return this[checkToShowTitle$];
    }
    set checkToShowTitle(value) {
      super.checkToShowTitle = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.SideTitles.new({showTitles: b.showTitles, getTitles: b.getTitles, reservedSize: ui.lerpDouble(a.reservedSize, b.reservedSize, t), getTextStyles: b.getTextStyles, margin: ui.lerpDouble(a.margin, b.margin, t), interval: ui.lerpDouble(a.interval, b.interval, t), rotateAngle: ui.lerpDouble(a.rotateAngle, b.rotateAngle, t), checkToShowTitle: b.checkToShowTitle});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.showTitles, this.getTitles, this.reservedSize, this.getTextStyles, this.margin, this.interval, this.rotateAngle, this.checkToShowTitle]);
    }
  };
  (axis_chart_data.SideTitles.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4;
    let showTitles = opts && 'showTitles' in opts ? opts.showTitles : null;
    let getTitles = opts && 'getTitles' in opts ? opts.getTitles : null;
    let reservedSize = opts && 'reservedSize' in opts ? opts.reservedSize : null;
    let getTextStyles = opts && 'getTextStyles' in opts ? opts.getTextStyles : null;
    let margin = opts && 'margin' in opts ? opts.margin : null;
    let interval = opts && 'interval' in opts ? opts.interval : null;
    let rotateAngle = opts && 'rotateAngle' in opts ? opts.rotateAngle : null;
    let checkToShowTitle = opts && 'checkToShowTitle' in opts ? opts.checkToShowTitle : null;
    this[showTitles$] = (t2 = showTitles, t2 == null ? false : t2);
    this[getTitles$] = (t2$ = getTitles, t2$ == null ? C[132] || CT.C132 : t2$);
    this[reservedSize$0] = (t2$0 = reservedSize, t2$0 == null ? 22.0 : t2$0);
    this[getTextStyles$] = (t2$1 = getTextStyles, t2$1 == null ? C[133] || CT.C133 : t2$1);
    this[margin$0] = (t2$2 = margin, t2$2 == null ? 6.0 : t2$2);
    this[interval$] = interval;
    this[rotateAngle$] = (t2$3 = rotateAngle, t2$3 == null ? 0.0 : t2$3);
    this[checkToShowTitle$] = (t2$4 = checkToShowTitle, t2$4 == null ? C[134] || CT.C134 : t2$4);
    if (interval === 0) {
      dart.throw(new core.ArgumentError.new("SideTitles.interval couldn't be zero"));
    }
  }).prototype = axis_chart_data.SideTitles.prototype;
  dart.addTypeTests(axis_chart_data.SideTitles);
  dart.addTypeCaches(axis_chart_data.SideTitles);
  dart.setGetterSignature(axis_chart_data.SideTitles, () => ({
    __proto__: dart.getGetters(axis_chart_data.SideTitles.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.SideTitles, I[3]);
  dart.setFieldSignature(axis_chart_data.SideTitles, () => ({
    __proto__: dart.getFields(axis_chart_data.SideTitles.__proto__),
    showTitles: dart.finalFieldType(dart.legacy(core.bool)),
    getTitles: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.double)]))),
    reservedSize: dart.finalFieldType(dart.legacy(core.double)),
    getTextStyles: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(text_style.TextStyle), [dart.legacy(core.double)]))),
    margin: dart.finalFieldType(dart.legacy(core.double)),
    interval: dart.finalFieldType(dart.legacy(core.double)),
    rotateAngle: dart.finalFieldType(dart.legacy(core.double)),
    checkToShowTitle: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(axis_chart_data.SideTitles), dart.legacy(core.double), dart.legacy(core.double)])))
  }));
  var show$8 = dart.privateName(axis_chart_data, "FlGridData.show");
  var drawHorizontalLine$ = dart.privateName(axis_chart_data, "FlGridData.drawHorizontalLine");
  var horizontalInterval$ = dart.privateName(axis_chart_data, "FlGridData.horizontalInterval");
  var getDrawingHorizontalLine$ = dart.privateName(axis_chart_data, "FlGridData.getDrawingHorizontalLine");
  var checkToShowHorizontalLine$ = dart.privateName(axis_chart_data, "FlGridData.checkToShowHorizontalLine");
  var drawVerticalLine$ = dart.privateName(axis_chart_data, "FlGridData.drawVerticalLine");
  var verticalInterval$ = dart.privateName(axis_chart_data, "FlGridData.verticalInterval");
  var getDrawingVerticalLine$ = dart.privateName(axis_chart_data, "FlGridData.getDrawingVerticalLine");
  var checkToShowVerticalLine$ = dart.privateName(axis_chart_data, "FlGridData.checkToShowVerticalLine");
  const Object_EquatableMixin$36$26 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$26.new = function() {
  }).prototype = Object_EquatableMixin$36$26.prototype;
  dart.applyMixin(Object_EquatableMixin$36$26, equatable_mixin.EquatableMixin);
  axis_chart_data.FlGridData = class FlGridData extends Object_EquatableMixin$36$26 {
    get show() {
      return this[show$8];
    }
    set show(value) {
      super.show = value;
    }
    get drawHorizontalLine() {
      return this[drawHorizontalLine$];
    }
    set drawHorizontalLine(value) {
      super.drawHorizontalLine = value;
    }
    get horizontalInterval() {
      return this[horizontalInterval$];
    }
    set horizontalInterval(value) {
      super.horizontalInterval = value;
    }
    get getDrawingHorizontalLine() {
      return this[getDrawingHorizontalLine$];
    }
    set getDrawingHorizontalLine(value) {
      super.getDrawingHorizontalLine = value;
    }
    get checkToShowHorizontalLine() {
      return this[checkToShowHorizontalLine$];
    }
    set checkToShowHorizontalLine(value) {
      super.checkToShowHorizontalLine = value;
    }
    get drawVerticalLine() {
      return this[drawVerticalLine$];
    }
    set drawVerticalLine(value) {
      super.drawVerticalLine = value;
    }
    get verticalInterval() {
      return this[verticalInterval$];
    }
    set verticalInterval(value) {
      super.verticalInterval = value;
    }
    get getDrawingVerticalLine() {
      return this[getDrawingVerticalLine$];
    }
    set getDrawingVerticalLine(value) {
      super.getDrawingVerticalLine = value;
    }
    get checkToShowVerticalLine() {
      return this[checkToShowVerticalLine$];
    }
    set checkToShowVerticalLine(value) {
      super.checkToShowVerticalLine = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.FlGridData.new({show: b.show, drawHorizontalLine: b.drawHorizontalLine, horizontalInterval: ui.lerpDouble(a.horizontalInterval, b.horizontalInterval, t), getDrawingHorizontalLine: b.getDrawingHorizontalLine, checkToShowHorizontalLine: b.checkToShowHorizontalLine, drawVerticalLine: b.drawVerticalLine, verticalInterval: ui.lerpDouble(a.verticalInterval, b.verticalInterval, t), getDrawingVerticalLine: b.getDrawingVerticalLine, checkToShowVerticalLine: b.checkToShowVerticalLine});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.drawHorizontalLine, this.horizontalInterval, this.getDrawingHorizontalLine, this.checkToShowHorizontalLine, this.drawVerticalLine, this.verticalInterval, this.getDrawingVerticalLine, this.checkToShowVerticalLine]);
    }
  };
  (axis_chart_data.FlGridData.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4;
    let show = opts && 'show' in opts ? opts.show : null;
    let drawHorizontalLine = opts && 'drawHorizontalLine' in opts ? opts.drawHorizontalLine : null;
    let horizontalInterval = opts && 'horizontalInterval' in opts ? opts.horizontalInterval : null;
    let getDrawingHorizontalLine = opts && 'getDrawingHorizontalLine' in opts ? opts.getDrawingHorizontalLine : null;
    let checkToShowHorizontalLine = opts && 'checkToShowHorizontalLine' in opts ? opts.checkToShowHorizontalLine : null;
    let drawVerticalLine = opts && 'drawVerticalLine' in opts ? opts.drawVerticalLine : null;
    let verticalInterval = opts && 'verticalInterval' in opts ? opts.verticalInterval : null;
    let getDrawingVerticalLine = opts && 'getDrawingVerticalLine' in opts ? opts.getDrawingVerticalLine : null;
    let checkToShowVerticalLine = opts && 'checkToShowVerticalLine' in opts ? opts.checkToShowVerticalLine : null;
    this[show$8] = (t2 = show, t2 == null ? true : t2);
    this[drawHorizontalLine$] = (t2$ = drawHorizontalLine, t2$ == null ? true : t2$);
    this[horizontalInterval$] = horizontalInterval;
    this[getDrawingHorizontalLine$] = (t2$0 = getDrawingHorizontalLine, t2$0 == null ? C[135] || CT.C135 : t2$0);
    this[checkToShowHorizontalLine$] = (t2$1 = checkToShowHorizontalLine, t2$1 == null ? C[136] || CT.C136 : t2$1);
    this[drawVerticalLine$] = (t2$2 = drawVerticalLine, t2$2 == null ? false : t2$2);
    this[verticalInterval$] = verticalInterval;
    this[getDrawingVerticalLine$] = (t2$3 = getDrawingVerticalLine, t2$3 == null ? C[135] || CT.C135 : t2$3);
    this[checkToShowVerticalLine$] = (t2$4 = checkToShowVerticalLine, t2$4 == null ? C[136] || CT.C136 : t2$4);
    if (horizontalInterval === 0) {
      dart.throw(new core.ArgumentError.new("FlGridData.horizontalInterval couldn't be zero"));
    }
    if (verticalInterval === 0) {
      dart.throw(new core.ArgumentError.new("FlGridData.verticalInterval couldn't be zero"));
    }
  }).prototype = axis_chart_data.FlGridData.prototype;
  dart.addTypeTests(axis_chart_data.FlGridData);
  dart.addTypeCaches(axis_chart_data.FlGridData);
  dart.setGetterSignature(axis_chart_data.FlGridData, () => ({
    __proto__: dart.getGetters(axis_chart_data.FlGridData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.FlGridData, I[3]);
  dart.setFieldSignature(axis_chart_data.FlGridData, () => ({
    __proto__: dart.getFields(axis_chart_data.FlGridData.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    drawHorizontalLine: dart.finalFieldType(dart.legacy(core.bool)),
    horizontalInterval: dart.finalFieldType(dart.legacy(core.double)),
    getDrawingHorizontalLine: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(axis_chart_data.FlLine), [dart.legacy(core.double)]))),
    checkToShowHorizontalLine: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]))),
    drawVerticalLine: dart.finalFieldType(dart.legacy(core.bool)),
    verticalInterval: dart.finalFieldType(dart.legacy(core.double)),
    getDrawingVerticalLine: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(axis_chart_data.FlLine), [dart.legacy(core.double)]))),
    checkToShowVerticalLine: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)])))
  }));
  var spot$ = dart.privateName(axis_chart_data, "TouchedSpot.spot");
  var offset$ = dart.privateName(axis_chart_data, "TouchedSpot.offset");
  const Object_EquatableMixin$36$27 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$27.new = function() {
  }).prototype = Object_EquatableMixin$36$27.prototype;
  dart.applyMixin(Object_EquatableMixin$36$27, equatable_mixin.EquatableMixin);
  axis_chart_data.TouchedSpot = class TouchedSpot extends Object_EquatableMixin$36$27 {
    get spot() {
      return this[spot$];
    }
    set spot(value) {
      super.spot = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.spot, this.offset]);
    }
  };
  (axis_chart_data.TouchedSpot.new = function(spot, offset) {
    this[spot$] = spot;
    this[offset$] = offset;
    ;
  }).prototype = axis_chart_data.TouchedSpot.prototype;
  dart.addTypeTests(axis_chart_data.TouchedSpot);
  dart.addTypeCaches(axis_chart_data.TouchedSpot);
  dart.setGetterSignature(axis_chart_data.TouchedSpot, () => ({
    __proto__: dart.getGetters(axis_chart_data.TouchedSpot.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.TouchedSpot, I[3]);
  dart.setFieldSignature(axis_chart_data.TouchedSpot, () => ({
    __proto__: dart.getFields(axis_chart_data.TouchedSpot.__proto__),
    spot: dart.finalFieldType(dart.legacy(axis_chart_data.FlSpot)),
    offset: dart.finalFieldType(dart.legacy(ui.Offset))
  }));
  var horizontalRangeAnnotations$ = dart.privateName(axis_chart_data, "RangeAnnotations.horizontalRangeAnnotations");
  var verticalRangeAnnotations$ = dart.privateName(axis_chart_data, "RangeAnnotations.verticalRangeAnnotations");
  const Object_EquatableMixin$36$28 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$28.new = function() {
  }).prototype = Object_EquatableMixin$36$28.prototype;
  dart.applyMixin(Object_EquatableMixin$36$28, equatable_mixin.EquatableMixin);
  axis_chart_data.RangeAnnotations = class RangeAnnotations extends Object_EquatableMixin$36$28 {
    get horizontalRangeAnnotations() {
      return this[horizontalRangeAnnotations$];
    }
    set horizontalRangeAnnotations(value) {
      super.horizontalRangeAnnotations = value;
    }
    get verticalRangeAnnotations() {
      return this[verticalRangeAnnotations$];
    }
    set verticalRangeAnnotations(value) {
      super.verticalRangeAnnotations = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.RangeAnnotations.new({horizontalRangeAnnotations: lerp.lerpHorizontalRangeAnnotationList(a.horizontalRangeAnnotations, b.horizontalRangeAnnotations, t), verticalRangeAnnotations: lerp.lerpVerticalRangeAnnotationList(a.verticalRangeAnnotations, b.verticalRangeAnnotations, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.horizontalRangeAnnotations, this.verticalRangeAnnotations]);
    }
  };
  (axis_chart_data.RangeAnnotations.new = function(opts) {
    let t2, t2$;
    let horizontalRangeAnnotations = opts && 'horizontalRangeAnnotations' in opts ? opts.horizontalRangeAnnotations : null;
    let verticalRangeAnnotations = opts && 'verticalRangeAnnotations' in opts ? opts.verticalRangeAnnotations : null;
    this[horizontalRangeAnnotations$] = (t2 = horizontalRangeAnnotations, t2 == null ? C[137] || CT.C137 : t2);
    this[verticalRangeAnnotations$] = (t2$ = verticalRangeAnnotations, t2$ == null ? C[138] || CT.C138 : t2$);
    ;
  }).prototype = axis_chart_data.RangeAnnotations.prototype;
  dart.addTypeTests(axis_chart_data.RangeAnnotations);
  dart.addTypeCaches(axis_chart_data.RangeAnnotations);
  dart.setGetterSignature(axis_chart_data.RangeAnnotations, () => ({
    __proto__: dart.getGetters(axis_chart_data.RangeAnnotations.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.RangeAnnotations, I[3]);
  dart.setFieldSignature(axis_chart_data.RangeAnnotations, () => ({
    __proto__: dart.getFields(axis_chart_data.RangeAnnotations.__proto__),
    horizontalRangeAnnotations: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(axis_chart_data.HorizontalRangeAnnotation)))),
    verticalRangeAnnotations: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(axis_chart_data.VerticalRangeAnnotation))))
  }));
  var y1$ = dart.privateName(axis_chart_data, "HorizontalRangeAnnotation.y1");
  var y2$ = dart.privateName(axis_chart_data, "HorizontalRangeAnnotation.y2");
  var color$4 = dart.privateName(axis_chart_data, "HorizontalRangeAnnotation.color");
  const Object_EquatableMixin$36$29 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$29.new = function() {
  }).prototype = Object_EquatableMixin$36$29.prototype;
  dart.applyMixin(Object_EquatableMixin$36$29, equatable_mixin.EquatableMixin);
  axis_chart_data.HorizontalRangeAnnotation = class HorizontalRangeAnnotation extends Object_EquatableMixin$36$29 {
    get y1() {
      return this[y1$];
    }
    set y1(value) {
      super.y1 = value;
    }
    get y2() {
      return this[y2$];
    }
    set y2(value) {
      super.y2 = value;
    }
    get color() {
      return this[color$4];
    }
    set color(value) {
      super.color = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.HorizontalRangeAnnotation.new({y1: ui.lerpDouble(a.y1, b.y1, t), y2: ui.lerpDouble(a.y2, b.y2, t), color: ui.Color.lerp(a.color, b.color, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.y1, this.y2, this.color]);
    }
  };
  (axis_chart_data.HorizontalRangeAnnotation.new = function(opts) {
    let t2;
    let y1 = opts && 'y1' in opts ? opts.y1 : null;
    let y2 = opts && 'y2' in opts ? opts.y2 : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[y1$] = y1;
    this[y2$] = y2;
    this[color$4] = (t2 = color, t2 == null ? colors$.Colors.white : t2);
    ;
  }).prototype = axis_chart_data.HorizontalRangeAnnotation.prototype;
  dart.addTypeTests(axis_chart_data.HorizontalRangeAnnotation);
  dart.addTypeCaches(axis_chart_data.HorizontalRangeAnnotation);
  dart.setGetterSignature(axis_chart_data.HorizontalRangeAnnotation, () => ({
    __proto__: dart.getGetters(axis_chart_data.HorizontalRangeAnnotation.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.HorizontalRangeAnnotation, I[3]);
  dart.setFieldSignature(axis_chart_data.HorizontalRangeAnnotation, () => ({
    __proto__: dart.getFields(axis_chart_data.HorizontalRangeAnnotation.__proto__),
    y1: dart.finalFieldType(dart.legacy(core.double)),
    y2: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  var x1$ = dart.privateName(axis_chart_data, "VerticalRangeAnnotation.x1");
  var x2$ = dart.privateName(axis_chart_data, "VerticalRangeAnnotation.x2");
  var color$5 = dart.privateName(axis_chart_data, "VerticalRangeAnnotation.color");
  const Object_EquatableMixin$36$30 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$30.new = function() {
  }).prototype = Object_EquatableMixin$36$30.prototype;
  dart.applyMixin(Object_EquatableMixin$36$30, equatable_mixin.EquatableMixin);
  axis_chart_data.VerticalRangeAnnotation = class VerticalRangeAnnotation extends Object_EquatableMixin$36$30 {
    get x1() {
      return this[x1$];
    }
    set x1(value) {
      super.x1 = value;
    }
    get x2() {
      return this[x2$];
    }
    set x2(value) {
      super.x2 = value;
    }
    get color() {
      return this[color$5];
    }
    set color(value) {
      super.color = value;
    }
    static lerp(a, b, t) {
      return new axis_chart_data.VerticalRangeAnnotation.new({x1: ui.lerpDouble(a.x1, b.x1, t), x2: ui.lerpDouble(a.x2, b.x2, t), color: ui.Color.lerp(a.color, b.color, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.x1, this.x2, this.color]);
    }
  };
  (axis_chart_data.VerticalRangeAnnotation.new = function(opts) {
    let t2;
    let x1 = opts && 'x1' in opts ? opts.x1 : null;
    let x2 = opts && 'x2' in opts ? opts.x2 : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[x1$] = x1;
    this[x2$] = x2;
    this[color$5] = (t2 = color, t2 == null ? colors$.Colors.white : t2);
    ;
  }).prototype = axis_chart_data.VerticalRangeAnnotation.prototype;
  dart.addTypeTests(axis_chart_data.VerticalRangeAnnotation);
  dart.addTypeCaches(axis_chart_data.VerticalRangeAnnotation);
  dart.setGetterSignature(axis_chart_data.VerticalRangeAnnotation, () => ({
    __proto__: dart.getGetters(axis_chart_data.VerticalRangeAnnotation.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(axis_chart_data.VerticalRangeAnnotation, I[3]);
  dart.setFieldSignature(axis_chart_data.VerticalRangeAnnotation, () => ({
    __proto__: dart.getFields(axis_chart_data.VerticalRangeAnnotation.__proto__),
    x1: dart.finalFieldType(dart.legacy(core.double)),
    x2: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  axis_chart_data.defaultCheckToShowTitle = function defaultCheckToShowTitle(minValue, maxValue, sideTitles, appliedInterval, value) {
    if ((dart.notNull(maxValue) - dart.notNull(minValue))[$modulo](appliedInterval) === 0) {
      return true;
    }
    return value != maxValue;
  };
  axis_chart_data.showAllGrids = function showAllGrids(value) {
    return true;
  };
  axis_chart_data.defaultGridLine = function defaultGridLine(value) {
    return new axis_chart_data.FlLine.new({color: colors$.Colors.grey, strokeWidth: 0.5});
  };
  var barGroups$ = dart.privateName(bar_chart_data, "BarChartData.barGroups");
  var groupsSpace$ = dart.privateName(bar_chart_data, "BarChartData.groupsSpace");
  var alignment$1 = dart.privateName(bar_chart_data, "BarChartData.alignment");
  var titlesData$1 = dart.privateName(bar_chart_data, "BarChartData.titlesData");
  var barTouchData$ = dart.privateName(bar_chart_data, "BarChartData.barTouchData");
  const AxisChartData_EquatableMixin$36$0 = class AxisChartData_EquatableMixin extends axis_chart_data.AxisChartData {};
  (AxisChartData_EquatableMixin$36$0.new = function(opts) {
    AxisChartData_EquatableMixin$36$0.__proto__.new.call(this, opts);
  }).prototype = AxisChartData_EquatableMixin$36$0.prototype;
  dart.applyMixin(AxisChartData_EquatableMixin$36$0, equatable_mixin.EquatableMixin);
  bar_chart_data.BarChartData = class BarChartData extends AxisChartData_EquatableMixin$36$0 {
    get barGroups() {
      return this[barGroups$];
    }
    set barGroups(value) {
      super.barGroups = value;
    }
    get groupsSpace() {
      return this[groupsSpace$];
    }
    set groupsSpace(value) {
      super.groupsSpace = value;
    }
    get alignment() {
      return this[alignment$1];
    }
    set alignment(value) {
      super.alignment = value;
    }
    get titlesData() {
      return this[titlesData$1];
    }
    set titlesData(value) {
      super.titlesData = value;
    }
    get barTouchData() {
      return this[barTouchData$];
    }
    set barTouchData(value) {
      super.barTouchData = value;
    }
    initSuperMinMaxValues(maxY, minY) {
      let t2, t2$;
      for (let i = 0; i < dart.notNull(this.barGroups[$length]); i = i + 1) {
        let barData = this.barGroups[$_get](i);
        if (barData.barRods == null || dart.test(barData.barRods[$isEmpty])) {
          dart.throw(core.Exception.new("barRods could not be null or empty"));
        }
      }
      if (dart.test(this.barGroups[$isNotEmpty])) {
        let canModifyMaxY = maxY == null;
        if (canModifyMaxY) {
          maxY = this.barGroups[$_get](0).barRods[$_get](0).y;
        }
        let canModifyMinY = minY == null;
        if (canModifyMinY) {
          minY = 0.0;
        }
        for (let i = 0; i < dart.notNull(this.barGroups[$length]); i = i + 1) {
          let barGroup = this.barGroups[$_get](i);
          for (let j = 0; j < dart.notNull(barGroup.barRods[$length]); j = j + 1) {
            let rod = barGroup.barRods[$_get](j);
            if (canModifyMaxY && dart.notNull(rod.y) > dart.notNull(maxY)) {
              maxY = rod.y;
            }
            if (canModifyMaxY && dart.test(rod.backDrawRodData.show) && rod.backDrawRodData.y != null && dart.notNull(rod.backDrawRodData.y) > dart.notNull(maxY)) {
              maxY = rod.backDrawRodData.y;
            }
            if (canModifyMinY && dart.notNull(rod.y) < dart.notNull(minY)) {
              minY = rod.y;
            }
            if (canModifyMinY && dart.test(rod.backDrawRodData.show) && rod.backDrawRodData.y != null && dart.notNull(rod.backDrawRodData.y) < dart.notNull(minY)) {
              minY = rod.backDrawRodData.y;
            }
          }
        }
      }
      super.minX = 0.0;
      super.maxX = 1.0;
      super.minY = (t2 = minY, t2 == null ? 0.0 : t2);
      super.maxY = (t2$ = maxY, t2$ == null ? 1.0 : t2$);
    }
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6, t2$7, t2$8, t2$9;
      let barGroups = opts && 'barGroups' in opts ? opts.barGroups : null;
      let groupsSpace = opts && 'groupsSpace' in opts ? opts.groupsSpace : null;
      let alignment = opts && 'alignment' in opts ? opts.alignment : null;
      let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
      let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
      let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
      let barTouchData = opts && 'barTouchData' in opts ? opts.barTouchData : null;
      let gridData = opts && 'gridData' in opts ? opts.gridData : null;
      let borderData = opts && 'borderData' in opts ? opts.borderData : null;
      let maxY = opts && 'maxY' in opts ? opts.maxY : null;
      let minY = opts && 'minY' in opts ? opts.minY : null;
      let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
      return new bar_chart_data.BarChartData.new({barGroups: (t2 = barGroups, t2 == null ? this.barGroups : t2), groupsSpace: (t2$ = groupsSpace, t2$ == null ? this.groupsSpace : t2$), alignment: (t2$0 = alignment, t2$0 == null ? this.alignment : t2$0), titlesData: (t2$1 = titlesData, t2$1 == null ? this.titlesData : t2$1), axisTitleData: (t2$2 = axisTitleData, t2$2 == null ? this.axisTitleData : t2$2), rangeAnnotations: (t2$3 = rangeAnnotations, t2$3 == null ? this.rangeAnnotations : t2$3), barTouchData: (t2$4 = barTouchData, t2$4 == null ? this.barTouchData : t2$4), gridData: (t2$5 = gridData, t2$5 == null ? this.gridData : t2$5), borderData: (t2$6 = borderData, t2$6 == null ? this.borderData : t2$6), maxY: (t2$7 = maxY, t2$7 == null ? this.maxY : t2$7), minY: (t2$8 = minY, t2$8 == null ? this.minY : t2$8), backgroundColor: (t2$9 = backgroundColor, t2$9 == null ? this.backgroundColor : t2$9)});
    }
    lerp(a, b, t) {
      if (T$.BarChartDataL().is(a) && T$.BarChartDataL().is(b) && t != null) {
        return new bar_chart_data.BarChartData.new({barGroups: lerp.lerpBarChartGroupDataList(a.barGroups, b.barGroups, t), groupsSpace: ui.lerpDouble(a.groupsSpace, b.groupsSpace, t), alignment: b.alignment, titlesData: axis_chart_data.FlTitlesData.lerp(a.titlesData, b.titlesData, t), axisTitleData: axis_chart_data.FlAxisTitleData.lerp(a.axisTitleData, b.axisTitleData, t), rangeAnnotations: axis_chart_data.RangeAnnotations.lerp(a.rangeAnnotations, b.rangeAnnotations, t), barTouchData: b.barTouchData, gridData: axis_chart_data.FlGridData.lerp(a.gridData, b.gridData, t), borderData: base_chart_data.FlBorderData.lerp(a.borderData, b.borderData, t), maxY: ui.lerpDouble(a.maxY, b.maxY, t), minY: ui.lerpDouble(a.minY, b.minY, t), backgroundColor: ui.Color.lerp(a.backgroundColor, b.backgroundColor, t)});
      } else {
        dart.throw(core.Exception.new("Illegal State"));
      }
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.barGroups, this.groupsSpace, this.alignment, this.titlesData, this.barTouchData, this.axisTitleData, this.maxY, this.minY, this.gridData, this.borderData, this.rangeAnnotations, this.backgroundColor]);
    }
  };
  (bar_chart_data.BarChartData.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6;
    let barGroups = opts && 'barGroups' in opts ? opts.barGroups : null;
    let groupsSpace = opts && 'groupsSpace' in opts ? opts.groupsSpace : null;
    let alignment = opts && 'alignment' in opts ? opts.alignment : null;
    let titlesData = opts && 'titlesData' in opts ? opts.titlesData : null;
    let barTouchData = opts && 'barTouchData' in opts ? opts.barTouchData : null;
    let axisTitleData = opts && 'axisTitleData' in opts ? opts.axisTitleData : null;
    let maxY = opts && 'maxY' in opts ? opts.maxY : null;
    let minY = opts && 'minY' in opts ? opts.minY : null;
    let gridData = opts && 'gridData' in opts ? opts.gridData : null;
    let borderData = opts && 'borderData' in opts ? opts.borderData : null;
    let rangeAnnotations = opts && 'rangeAnnotations' in opts ? opts.rangeAnnotations : null;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    this[barGroups$] = (t2 = barGroups, t2 == null ? C[139] || CT.C139 : t2);
    this[groupsSpace$] = (t2$ = groupsSpace, t2$ == null ? 16.0 : t2$);
    this[alignment$1] = (t2$0 = alignment, t2$0 == null ? bar_chart_data.BarChartAlignment.spaceBetween : t2$0);
    this[titlesData$1] = (t2$1 = titlesData, t2$1 == null ? new axis_chart_data.FlTitlesData.new() : t2$1);
    this[barTouchData$] = (t2$2 = barTouchData, t2$2 == null ? new bar_chart_data.BarTouchData.new() : t2$2);
    bar_chart_data.BarChartData.__proto__.new.call(this, {axisTitleData: (t2$3 = axisTitleData, t2$3 == null ? new axis_chart_data.FlAxisTitleData.new() : t2$3), gridData: (t2$4 = gridData, t2$4 == null ? new axis_chart_data.FlGridData.new({show: false}) : t2$4), borderData: borderData, rangeAnnotations: (t2$5 = rangeAnnotations, t2$5 == null ? new axis_chart_data.RangeAnnotations.new() : t2$5), backgroundColor: backgroundColor, touchData: (t2$6 = barTouchData, t2$6 == null ? new bar_chart_data.BarTouchData.new() : t2$6)});
    this.initSuperMinMaxValues(maxY, minY);
  }).prototype = bar_chart_data.BarChartData.prototype;
  dart.addTypeTests(bar_chart_data.BarChartData);
  dart.addTypeCaches(bar_chart_data.BarChartData);
  dart.setMethodSignature(bar_chart_data.BarChartData, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartData.__proto__),
    initSuperMinMaxValues: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    copyWith: dart.fnType(dart.legacy(bar_chart_data.BarChartData), [], {alignment: dart.legacy(bar_chart_data.BarChartAlignment), axisTitleData: dart.legacy(axis_chart_data.FlAxisTitleData), backgroundColor: dart.legacy(ui.Color), barGroups: dart.legacy(core.List$(dart.legacy(bar_chart_data.BarChartGroupData))), barTouchData: dart.legacy(bar_chart_data.BarTouchData), borderData: dart.legacy(base_chart_data.FlBorderData), gridData: dart.legacy(axis_chart_data.FlGridData), groupsSpace: dart.legacy(core.double), maxY: dart.legacy(core.double), minY: dart.legacy(core.double), rangeAnnotations: dart.legacy(axis_chart_data.RangeAnnotations), titlesData: dart.legacy(axis_chart_data.FlTitlesData)}, {}),
    lerp: dart.fnType(dart.legacy(base_chart_data.BaseChartData), [dart.legacy(base_chart_data.BaseChartData), dart.legacy(base_chart_data.BaseChartData), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(bar_chart_data.BarChartData, I[16]);
  dart.setFieldSignature(bar_chart_data.BarChartData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartData.__proto__),
    barGroups: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(bar_chart_data.BarChartGroupData)))),
    groupsSpace: dart.finalFieldType(dart.legacy(core.double)),
    alignment: dart.finalFieldType(dart.legacy(bar_chart_data.BarChartAlignment)),
    titlesData: dart.finalFieldType(dart.legacy(axis_chart_data.FlTitlesData)),
    barTouchData: dart.finalFieldType(dart.legacy(bar_chart_data.BarTouchData))
  }));
  var _name$ = dart.privateName(bar_chart_data, "_name");
  bar_chart_data.BarChartAlignment = class BarChartAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (bar_chart_data.BarChartAlignment.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = bar_chart_data.BarChartAlignment.prototype;
  dart.addTypeTests(bar_chart_data.BarChartAlignment);
  dart.addTypeCaches(bar_chart_data.BarChartAlignment);
  dart.setMethodSignature(bar_chart_data.BarChartAlignment, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartAlignment.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(bar_chart_data.BarChartAlignment, I[16]);
  dart.setFieldSignature(bar_chart_data.BarChartAlignment, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartAlignment.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(bar_chart_data.BarChartAlignment, ['toString']);
  bar_chart_data.BarChartAlignment.start = C[140] || CT.C140;
  bar_chart_data.BarChartAlignment.end = C[141] || CT.C141;
  bar_chart_data.BarChartAlignment.center = C[142] || CT.C142;
  bar_chart_data.BarChartAlignment.spaceEvenly = C[143] || CT.C143;
  bar_chart_data.BarChartAlignment.spaceAround = C[144] || CT.C144;
  bar_chart_data.BarChartAlignment.spaceBetween = C[145] || CT.C145;
  bar_chart_data.BarChartAlignment.values = C[146] || CT.C146;
  var x$1 = dart.privateName(bar_chart_data, "BarChartGroupData.x");
  var barRods$ = dart.privateName(bar_chart_data, "BarChartGroupData.barRods");
  var barsSpace$ = dart.privateName(bar_chart_data, "BarChartGroupData.barsSpace");
  var showingTooltipIndicators$1 = dart.privateName(bar_chart_data, "BarChartGroupData.showingTooltipIndicators");
  const Object_EquatableMixin$36$31 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$31.new = function() {
  }).prototype = Object_EquatableMixin$36$31.prototype;
  dart.applyMixin(Object_EquatableMixin$36$31, equatable_mixin.EquatableMixin);
  bar_chart_data.BarChartGroupData = class BarChartGroupData extends Object_EquatableMixin$36$31 {
    get x() {
      return this[x$1];
    }
    set x(value) {
      super.x = value;
    }
    get barRods() {
      return this[barRods$];
    }
    set barRods(value) {
      super.barRods = value;
    }
    get barsSpace() {
      return this[barsSpace$];
    }
    set barsSpace(value) {
      super.barsSpace = value;
    }
    get showingTooltipIndicators() {
      return this[showingTooltipIndicators$1];
    }
    set showingTooltipIndicators(value) {
      super.showingTooltipIndicators = value;
    }
    get width() {
      if (dart.test(this.barRods[$isEmpty])) {
        return 0.0;
      }
      let sumWidth = this.barRods[$map](T$.doubleL(), dart.fn(rodData => rodData.width, T$.BarChartRodDataLTodoubleL()))[$reduce](dart.fn((first, second) => dart.notNull(first) + dart.notNull(second), T$.doubleLAnddoubleLTodoubleL()));
      let spaces = (dart.notNull(this.barRods[$length]) - 1) * dart.notNull(this.barsSpace);
      return dart.notNull(sumWidth) + spaces;
    }
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1;
      let x = opts && 'x' in opts ? opts.x : null;
      let barRods = opts && 'barRods' in opts ? opts.barRods : null;
      let barsSpace = opts && 'barsSpace' in opts ? opts.barsSpace : null;
      let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
      return new bar_chart_data.BarChartGroupData.new({x: (t2 = x, t2 == null ? this.x : t2), barRods: (t2$ = barRods, t2$ == null ? this.barRods : t2$), barsSpace: (t2$0 = barsSpace, t2$0 == null ? this.barsSpace : t2$0), showingTooltipIndicators: (t2$1 = showingTooltipIndicators, t2$1 == null ? this.showingTooltipIndicators : t2$1)});
    }
    static lerp(a, b, t) {
      return new bar_chart_data.BarChartGroupData.new({x: (dart.notNull(a.x) + (dart.notNull(b.x) - dart.notNull(a.x)) * dart.notNull(t))[$round](), barRods: lerp.lerpBarChartRodDataList(a.barRods, b.barRods, t), barsSpace: ui.lerpDouble(a.barsSpace, b.barsSpace, t), showingTooltipIndicators: lerp.lerpIntList(a.showingTooltipIndicators, b.showingTooltipIndicators, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.x, this.barRods, this.barsSpace, this.showingTooltipIndicators]);
    }
  };
  (bar_chart_data.BarChartGroupData.new = function(opts) {
    let t2, t2$, t2$0;
    let x = opts && 'x' in opts ? opts.x : null;
    let barRods = opts && 'barRods' in opts ? opts.barRods : null;
    let barsSpace = opts && 'barsSpace' in opts ? opts.barsSpace : null;
    let showingTooltipIndicators = opts && 'showingTooltipIndicators' in opts ? opts.showingTooltipIndicators : null;
    this[x$1] = x;
    this[barRods$] = (t2 = barRods, t2 == null ? C[147] || CT.C147 : t2);
    this[barsSpace$] = (t2$ = barsSpace, t2$ == null ? 2.0 : t2$);
    this[showingTooltipIndicators$1] = (t2$0 = showingTooltipIndicators, t2$0 == null ? C[1] || CT.C1 : t2$0);
    if (!(x != null)) dart.assertFailed(null, I[17], 261, 16, "x != null");
    ;
  }).prototype = bar_chart_data.BarChartGroupData.prototype;
  dart.addTypeTests(bar_chart_data.BarChartGroupData);
  dart.addTypeCaches(bar_chart_data.BarChartGroupData);
  dart.setMethodSignature(bar_chart_data.BarChartGroupData, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartGroupData.__proto__),
    copyWith: dart.fnType(dart.legacy(bar_chart_data.BarChartGroupData), [], {barRods: dart.legacy(core.List$(dart.legacy(bar_chart_data.BarChartRodData))), barsSpace: dart.legacy(core.double), showingTooltipIndicators: dart.legacy(core.List$(dart.legacy(core.int))), x: dart.legacy(core.int)}, {})
  }));
  dart.setGetterSignature(bar_chart_data.BarChartGroupData, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarChartGroupData.__proto__),
    width: dart.legacy(core.double),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(bar_chart_data.BarChartGroupData, I[16]);
  dart.setFieldSignature(bar_chart_data.BarChartGroupData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartGroupData.__proto__),
    x: dart.finalFieldType(dart.legacy(core.int)),
    barRods: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(bar_chart_data.BarChartRodData)))),
    barsSpace: dart.finalFieldType(dart.legacy(core.double)),
    showingTooltipIndicators: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  var y$1 = dart.privateName(bar_chart_data, "BarChartRodData.y");
  var colors$3 = dart.privateName(bar_chart_data, "BarChartRodData.colors");
  var gradientFrom$2 = dart.privateName(bar_chart_data, "BarChartRodData.gradientFrom");
  var gradientTo$2 = dart.privateName(bar_chart_data, "BarChartRodData.gradientTo");
  var colorStops = dart.privateName(bar_chart_data, "BarChartRodData.colorStops");
  var width$0 = dart.privateName(bar_chart_data, "BarChartRodData.width");
  var borderRadius$ = dart.privateName(bar_chart_data, "BarChartRodData.borderRadius");
  var backDrawRodData$ = dart.privateName(bar_chart_data, "BarChartRodData.backDrawRodData");
  var rodStackItems$ = dart.privateName(bar_chart_data, "BarChartRodData.rodStackItems");
  const Object_EquatableMixin$36$32 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$32.new = function() {
  }).prototype = Object_EquatableMixin$36$32.prototype;
  dart.applyMixin(Object_EquatableMixin$36$32, equatable_mixin.EquatableMixin);
  bar_chart_data.BarChartRodData = class BarChartRodData extends Object_EquatableMixin$36$32 {
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    get colors() {
      return this[colors$3];
    }
    set colors(value) {
      super.colors = value;
    }
    get gradientFrom() {
      return this[gradientFrom$2];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$2];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get colorStops() {
      return this[colorStops];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get borderRadius() {
      return this[borderRadius$];
    }
    set borderRadius(value) {
      super.borderRadius = value;
    }
    get backDrawRodData() {
      return this[backDrawRodData$];
    }
    set backDrawRodData(value) {
      super.backDrawRodData = value;
    }
    get rodStackItems() {
      return this[rodStackItems$];
    }
    set rodStackItems(value) {
      super.rodStackItems = value;
    }
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5, t2$6;
      let y = opts && 'y' in opts ? opts.y : null;
      let colors = opts && 'colors' in opts ? opts.colors : null;
      let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
      let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
      let colorStops = opts && 'colorStops' in opts ? opts.colorStops : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let backDrawRodData = opts && 'backDrawRodData' in opts ? opts.backDrawRodData : null;
      let rodStackItems = opts && 'rodStackItems' in opts ? opts.rodStackItems : null;
      return new bar_chart_data.BarChartRodData.new({y: (t2 = y, t2 == null ? this.y : t2), colors: (t2$ = colors, t2$ == null ? this.colors : t2$), gradientFrom: (t2$0 = gradientFrom, t2$0 == null ? this.gradientFrom : t2$0), gradientTo: (t2$1 = gradientTo, t2$1 == null ? this.gradientTo : t2$1), gradientColorStops: (t2$2 = colorStops, t2$2 == null ? this.colorStops : t2$2), width: (t2$3 = width, t2$3 == null ? this.width : t2$3), borderRadius: T$.BorderRadiusL().as((t2$4 = borderRadius, t2$4 == null ? this.borderRadius : t2$4)), backDrawRodData: (t2$5 = backDrawRodData, t2$5 == null ? this.backDrawRodData : t2$5), rodStackItems: (t2$6 = rodStackItems, t2$6 == null ? this.rodStackItems : t2$6)});
    }
    static lerp(a, b, t) {
      return new bar_chart_data.BarChartRodData.new({gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), colors: lerp.lerpColorList(a.colors, b.colors, t), gradientColorStops: lerp.lerpDoubleList(a.colorStops, b.colorStops, t), width: ui.lerpDouble(a.width, b.width, t), borderRadius: border_radius.BorderRadius.lerp(a.borderRadius, b.borderRadius, t), y: ui.lerpDouble(a.y, b.y, t), backDrawRodData: bar_chart_data.BackgroundBarChartRodData.lerp(a.backDrawRodData, b.backDrawRodData, t), rodStackItems: lerp.lerpBarChartRodStackList(a.rodStackItems, b.rodStackItems, t)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.y, this.width, this.borderRadius, this.backDrawRodData, this.rodStackItems, this.colors, this.gradientFrom, this.gradientTo, this.colorStops]);
    }
  };
  (bar_chart_data.BarChartRodData.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4;
    let y = opts && 'y' in opts ? opts.y : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let gradientColorStops = opts && 'gradientColorStops' in opts ? opts.gradientColorStops : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
    let backDrawRodData = opts && 'backDrawRodData' in opts ? opts.backDrawRodData : null;
    let rodStackItems = opts && 'rodStackItems' in opts ? opts.rodStackItems : null;
    this[y$1] = y;
    this[colors$3] = (t2 = colors, t2 == null ? T$.JSArrayOfColorL().of([colors$.Colors.blueAccent]) : t2);
    this[gradientFrom$2] = (t2$ = gradientFrom, t2$ == null ? C[148] || CT.C148 : t2$);
    this[gradientTo$2] = (t2$0 = gradientTo, t2$0 == null ? C[149] || CT.C149 : t2$0);
    this[colorStops] = gradientColorStops;
    this[width$0] = (t2$1 = width, t2$1 == null ? 8.0 : t2$1);
    this[borderRadius$] = utils.normalizeBorderRadius(borderRadius, (t2$2 = width, t2$2 == null ? 8.0 : t2$2));
    this[backDrawRodData$] = (t2$3 = backDrawRodData, t2$3 == null ? new bar_chart_data.BackgroundBarChartRodData.new() : t2$3);
    this[rodStackItems$] = (t2$4 = rodStackItems, t2$4 == null ? C[150] || CT.C150 : t2$4);
    ;
  }).prototype = bar_chart_data.BarChartRodData.prototype;
  dart.addTypeTests(bar_chart_data.BarChartRodData);
  dart.addTypeCaches(bar_chart_data.BarChartRodData);
  dart.setMethodSignature(bar_chart_data.BarChartRodData, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartRodData.__proto__),
    copyWith: dart.fnType(dart.legacy(bar_chart_data.BarChartRodData), [], {backDrawRodData: dart.legacy(bar_chart_data.BackgroundBarChartRodData), borderRadius: dart.legacy(ui.Radius), colorStops: dart.legacy(core.List$(dart.legacy(core.double))), colors: dart.legacy(core.List$(dart.legacy(ui.Color))), gradientFrom: dart.legacy(ui.Offset), gradientTo: dart.legacy(ui.Offset), rodStackItems: dart.legacy(core.List$(dart.legacy(bar_chart_data.BarChartRodStackItem))), width: dart.legacy(core.double), y: dart.legacy(core.double)}, {})
  }));
  dart.setGetterSignature(bar_chart_data.BarChartRodData, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarChartRodData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(bar_chart_data.BarChartRodData, I[16]);
  dart.setFieldSignature(bar_chart_data.BarChartRodData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartRodData.__proto__),
    y: dart.finalFieldType(dart.legacy(core.double)),
    colors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Color)))),
    gradientFrom: dart.finalFieldType(dart.legacy(ui.Offset)),
    gradientTo: dart.finalFieldType(dart.legacy(ui.Offset)),
    colorStops: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    width: dart.finalFieldType(dart.legacy(core.double)),
    borderRadius: dart.finalFieldType(dart.legacy(border_radius.BorderRadius)),
    backDrawRodData: dart.finalFieldType(dart.legacy(bar_chart_data.BackgroundBarChartRodData)),
    rodStackItems: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(bar_chart_data.BarChartRodStackItem))))
  }));
  var fromY$ = dart.privateName(bar_chart_data, "BarChartRodStackItem.fromY");
  var toY$ = dart.privateName(bar_chart_data, "BarChartRodStackItem.toY");
  var color$6 = dart.privateName(bar_chart_data, "BarChartRodStackItem.color");
  const Object_EquatableMixin$36$33 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$33.new = function() {
  }).prototype = Object_EquatableMixin$36$33.prototype;
  dart.applyMixin(Object_EquatableMixin$36$33, equatable_mixin.EquatableMixin);
  bar_chart_data.BarChartRodStackItem = class BarChartRodStackItem extends Object_EquatableMixin$36$33 {
    get fromY() {
      return this[fromY$];
    }
    set fromY(value) {
      super.fromY = value;
    }
    get toY() {
      return this[toY$];
    }
    set toY(value) {
      super.toY = value;
    }
    get color() {
      return this[color$6];
    }
    set color(value) {
      super.color = value;
    }
    copyWith(opts) {
      let t2, t2$, t2$0;
      let fromY = opts && 'fromY' in opts ? opts.fromY : null;
      let toY = opts && 'toY' in opts ? opts.toY : null;
      let color = opts && 'color' in opts ? opts.color : null;
      return new bar_chart_data.BarChartRodStackItem.new((t2 = fromY, t2 == null ? this.fromY : t2), (t2$ = toY, t2$ == null ? this.toY : t2$), (t2$0 = color, t2$0 == null ? this.color : t2$0));
    }
    static lerp(a, b, t) {
      return new bar_chart_data.BarChartRodStackItem.new(ui.lerpDouble(a.fromY, b.fromY, t), ui.lerpDouble(a.toY, b.toY, t), ui.Color.lerp(a.color, b.color, t));
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.fromY, this.toY, this.color]);
    }
  };
  (bar_chart_data.BarChartRodStackItem.new = function(fromY, toY, color) {
    this[fromY$] = fromY;
    this[toY$] = toY;
    this[color$6] = color;
    ;
  }).prototype = bar_chart_data.BarChartRodStackItem.prototype;
  dart.addTypeTests(bar_chart_data.BarChartRodStackItem);
  dart.addTypeCaches(bar_chart_data.BarChartRodStackItem);
  dart.setMethodSignature(bar_chart_data.BarChartRodStackItem, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartRodStackItem.__proto__),
    copyWith: dart.fnType(dart.legacy(bar_chart_data.BarChartRodStackItem), [], {color: dart.legacy(ui.Color), fromY: dart.legacy(core.double), toY: dart.legacy(core.double)}, {})
  }));
  dart.setGetterSignature(bar_chart_data.BarChartRodStackItem, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarChartRodStackItem.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(bar_chart_data.BarChartRodStackItem, I[16]);
  dart.setFieldSignature(bar_chart_data.BarChartRodStackItem, () => ({
    __proto__: dart.getFields(bar_chart_data.BarChartRodStackItem.__proto__),
    fromY: dart.finalFieldType(dart.legacy(core.double)),
    toY: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(ui.Color))
  }));
  var show$9 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.show");
  var y$2 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.y");
  var colors$4 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.colors");
  var gradientFrom$3 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.gradientFrom");
  var gradientTo$3 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.gradientTo");
  var colorStops$0 = dart.privateName(bar_chart_data, "BackgroundBarChartRodData.colorStops");
  const Object_EquatableMixin$36$34 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$34.new = function() {
  }).prototype = Object_EquatableMixin$36$34.prototype;
  dart.applyMixin(Object_EquatableMixin$36$34, equatable_mixin.EquatableMixin);
  bar_chart_data.BackgroundBarChartRodData = class BackgroundBarChartRodData extends Object_EquatableMixin$36$34 {
    get show() {
      return this[show$9];
    }
    set show(value) {
      super.show = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    get colors() {
      return this[colors$4];
    }
    set colors(value) {
      super.colors = value;
    }
    get gradientFrom() {
      return this[gradientFrom$3];
    }
    set gradientFrom(value) {
      super.gradientFrom = value;
    }
    get gradientTo() {
      return this[gradientTo$3];
    }
    set gradientTo(value) {
      super.gradientTo = value;
    }
    get colorStops() {
      return this[colorStops$0];
    }
    set colorStops(value) {
      super.colorStops = value;
    }
    static lerp(a, b, t) {
      return new bar_chart_data.BackgroundBarChartRodData.new({y: ui.lerpDouble(a.y, b.y, t), gradientFrom: ui.Offset.lerp(a.gradientFrom, b.gradientFrom, t), gradientTo: ui.Offset.lerp(a.gradientTo, b.gradientTo, t), colors: lerp.lerpColorList(a.colors, b.colors, t), colorStops: lerp.lerpDoubleList(a.colorStops, b.colorStops, t), show: b.show});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.show, this.y, this.colors, this.gradientTo, this.gradientFrom, this.colorStops]);
    }
  };
  (bar_chart_data.BackgroundBarChartRodData.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2;
    let y = opts && 'y' in opts ? opts.y : null;
    let show = opts && 'show' in opts ? opts.show : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let gradientFrom = opts && 'gradientFrom' in opts ? opts.gradientFrom : null;
    let gradientTo = opts && 'gradientTo' in opts ? opts.gradientTo : null;
    let colorStops = opts && 'colorStops' in opts ? opts.colorStops : null;
    this[y$2] = (t2 = y, t2 == null ? 8.0 : t2);
    this[show$9] = (t2$ = show, t2$ == null ? false : t2$);
    this[colors$4] = (t2$0 = colors, t2$0 == null ? T$.JSArrayOfColorL().of([colors$.Colors.blueGrey]) : t2$0);
    this[gradientFrom$3] = (t2$1 = gradientFrom, t2$1 == null ? C[4] || CT.C4 : t2$1);
    this[gradientTo$3] = (t2$2 = gradientTo, t2$2 == null ? C[103] || CT.C103 : t2$2);
    this[colorStops$0] = colorStops;
    ;
  }).prototype = bar_chart_data.BackgroundBarChartRodData.prototype;
  dart.addTypeTests(bar_chart_data.BackgroundBarChartRodData);
  dart.addTypeCaches(bar_chart_data.BackgroundBarChartRodData);
  dart.setGetterSignature(bar_chart_data.BackgroundBarChartRodData, () => ({
    __proto__: dart.getGetters(bar_chart_data.BackgroundBarChartRodData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(bar_chart_data.BackgroundBarChartRodData, I[16]);
  dart.setFieldSignature(bar_chart_data.BackgroundBarChartRodData, () => ({
    __proto__: dart.getFields(bar_chart_data.BackgroundBarChartRodData.__proto__),
    show: dart.finalFieldType(dart.legacy(core.bool)),
    y: dart.finalFieldType(dart.legacy(core.double)),
    colors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Color)))),
    gradientFrom: dart.finalFieldType(dart.legacy(ui.Offset)),
    gradientTo: dart.finalFieldType(dart.legacy(ui.Offset)),
    colorStops: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double))))
  }));
  var touchTooltipData$1 = dart.privateName(bar_chart_data, "BarTouchData.touchTooltipData");
  var touchExtraThreshold$ = dart.privateName(bar_chart_data, "BarTouchData.touchExtraThreshold");
  var allowTouchBarBackDraw$ = dart.privateName(bar_chart_data, "BarTouchData.allowTouchBarBackDraw");
  var handleBuiltInTouches$1 = dart.privateName(bar_chart_data, "BarTouchData.handleBuiltInTouches");
  var touchCallback$2 = dart.privateName(bar_chart_data, "BarTouchData.touchCallback");
  const FlTouchData_EquatableMixin$36$1 = class FlTouchData_EquatableMixin extends base_chart_data.FlTouchData {};
  (FlTouchData_EquatableMixin$36$1.new = function(enabled) {
    FlTouchData_EquatableMixin$36$1.__proto__.new.call(this, enabled);
  }).prototype = FlTouchData_EquatableMixin$36$1.prototype;
  dart.applyMixin(FlTouchData_EquatableMixin$36$1, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTouchData = class BarTouchData extends FlTouchData_EquatableMixin$36$1 {
    get touchTooltipData() {
      return this[touchTooltipData$1];
    }
    set touchTooltipData(value) {
      super.touchTooltipData = value;
    }
    get touchExtraThreshold() {
      return this[touchExtraThreshold$];
    }
    set touchExtraThreshold(value) {
      super.touchExtraThreshold = value;
    }
    get allowTouchBarBackDraw() {
      return this[allowTouchBarBackDraw$];
    }
    set allowTouchBarBackDraw(value) {
      super.allowTouchBarBackDraw = value;
    }
    get handleBuiltInTouches() {
      return this[handleBuiltInTouches$1];
    }
    set handleBuiltInTouches(value) {
      super.handleBuiltInTouches = value;
    }
    get touchCallback() {
      return this[touchCallback$2];
    }
    set touchCallback(value) {
      super.touchCallback = value;
    }
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3;
      let enabled = opts && 'enabled' in opts ? opts.enabled : null;
      let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
      let touchExtraThreshold = opts && 'touchExtraThreshold' in opts ? opts.touchExtraThreshold : null;
      let allowTouchBarBackDraw = opts && 'allowTouchBarBackDraw' in opts ? opts.allowTouchBarBackDraw : null;
      let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
      let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
      return new bar_chart_data.BarTouchData.new({enabled: (t2 = enabled, t2 == null ? this.enabled : t2), touchTooltipData: (t2$ = touchTooltipData, t2$ == null ? this.touchTooltipData : t2$), touchExtraThreshold: (t2$0 = touchExtraThreshold, t2$0 == null ? this.touchExtraThreshold : t2$0), allowTouchBarBackDraw: (t2$1 = allowTouchBarBackDraw, t2$1 == null ? this.allowTouchBarBackDraw : t2$1), handleBuiltInTouches: (t2$2 = handleBuiltInTouches, t2$2 == null ? this.handleBuiltInTouches : t2$2), touchCallback: (t2$3 = touchCallback, t2$3 == null ? this.touchCallback : t2$3)});
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.enabled, this.touchTooltipData, this.touchExtraThreshold, this.allowTouchBarBackDraw, this.handleBuiltInTouches, this.touchCallback]);
    }
  };
  (bar_chart_data.BarTouchData.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2;
    let enabled = opts && 'enabled' in opts ? opts.enabled : null;
    let touchTooltipData = opts && 'touchTooltipData' in opts ? opts.touchTooltipData : null;
    let touchExtraThreshold = opts && 'touchExtraThreshold' in opts ? opts.touchExtraThreshold : null;
    let allowTouchBarBackDraw = opts && 'allowTouchBarBackDraw' in opts ? opts.allowTouchBarBackDraw : null;
    let handleBuiltInTouches = opts && 'handleBuiltInTouches' in opts ? opts.handleBuiltInTouches : null;
    let touchCallback = opts && 'touchCallback' in opts ? opts.touchCallback : null;
    this[touchTooltipData$1] = (t2 = touchTooltipData, t2 == null ? new bar_chart_data.BarTouchTooltipData.new() : t2);
    this[touchExtraThreshold$] = (t2$ = touchExtraThreshold, t2$ == null ? C[151] || CT.C151 : t2$);
    this[allowTouchBarBackDraw$] = (t2$0 = allowTouchBarBackDraw, t2$0 == null ? false : t2$0);
    this[handleBuiltInTouches$1] = (t2$1 = handleBuiltInTouches, t2$1 == null ? true : t2$1);
    this[touchCallback$2] = touchCallback;
    bar_chart_data.BarTouchData.__proto__.new.call(this, (t2$2 = enabled, t2$2 == null ? true : t2$2));
    ;
  }).prototype = bar_chart_data.BarTouchData.prototype;
  dart.addTypeTests(bar_chart_data.BarTouchData);
  dart.addTypeCaches(bar_chart_data.BarTouchData);
  dart.setMethodSignature(bar_chart_data.BarTouchData, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarTouchData.__proto__),
    copyWith: dart.fnType(dart.legacy(bar_chart_data.BarTouchData), [], {allowTouchBarBackDraw: dart.legacy(core.bool), enabled: dart.legacy(core.bool), handleBuiltInTouches: dart.legacy(core.bool), touchCallback: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(bar_chart_data.BarTouchResponse)])), touchExtraThreshold: dart.legacy(edge_insets.EdgeInsets), touchTooltipData: dart.legacy(bar_chart_data.BarTouchTooltipData)}, {})
  }));
  dart.setLibraryUri(bar_chart_data.BarTouchData, I[16]);
  dart.setFieldSignature(bar_chart_data.BarTouchData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTouchData.__proto__),
    touchTooltipData: dart.finalFieldType(dart.legacy(bar_chart_data.BarTouchTooltipData)),
    touchExtraThreshold: dart.finalFieldType(dart.legacy(edge_insets.EdgeInsets)),
    allowTouchBarBackDraw: dart.finalFieldType(dart.legacy(core.bool)),
    handleBuiltInTouches: dart.finalFieldType(dart.legacy(core.bool)),
    touchCallback: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(bar_chart_data.BarTouchResponse)])))
  }));
  var tooltipBgColor$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.tooltipBgColor");
  var tooltipRoundedRadius$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.tooltipRoundedRadius");
  var tooltipPadding$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.tooltipPadding");
  var tooltipBottomMargin$0 = dart.privateName(bar_chart_data, "BarTouchTooltipData.tooltipBottomMargin");
  var maxContentWidth$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.maxContentWidth");
  var getTooltipItem$ = dart.privateName(bar_chart_data, "BarTouchTooltipData.getTooltipItem");
  var fitInsideHorizontally$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.fitInsideHorizontally");
  var fitInsideVertically$1 = dart.privateName(bar_chart_data, "BarTouchTooltipData.fitInsideVertically");
  const Object_EquatableMixin$36$35 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$35.new = function() {
  }).prototype = Object_EquatableMixin$36$35.prototype;
  dart.applyMixin(Object_EquatableMixin$36$35, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTouchTooltipData = class BarTouchTooltipData extends Object_EquatableMixin$36$35 {
    get tooltipBgColor() {
      return this[tooltipBgColor$1];
    }
    set tooltipBgColor(value) {
      super.tooltipBgColor = value;
    }
    get tooltipRoundedRadius() {
      return this[tooltipRoundedRadius$1];
    }
    set tooltipRoundedRadius(value) {
      super.tooltipRoundedRadius = value;
    }
    get tooltipPadding() {
      return this[tooltipPadding$1];
    }
    set tooltipPadding(value) {
      super.tooltipPadding = value;
    }
    get tooltipBottomMargin() {
      return this[tooltipBottomMargin$0];
    }
    set tooltipBottomMargin(value) {
      super.tooltipBottomMargin = value;
    }
    get maxContentWidth() {
      return this[maxContentWidth$1];
    }
    set maxContentWidth(value) {
      super.maxContentWidth = value;
    }
    get getTooltipItem() {
      return this[getTooltipItem$];
    }
    set getTooltipItem(value) {
      super.getTooltipItem = value;
    }
    get fitInsideHorizontally() {
      return this[fitInsideHorizontally$1];
    }
    set fitInsideHorizontally(value) {
      super.fitInsideHorizontally = value;
    }
    get fitInsideVertically() {
      return this[fitInsideVertically$1];
    }
    set fitInsideVertically(value) {
      super.fitInsideVertically = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.tooltipBgColor, this.tooltipRoundedRadius, this.tooltipPadding, this.tooltipBottomMargin, this.maxContentWidth, this.getTooltipItem, this.fitInsideHorizontally, this.fitInsideVertically]);
    }
  };
  (bar_chart_data.BarTouchTooltipData.new = function(opts) {
    let t2, t2$, t2$0, t2$1, t2$2, t2$3, t2$4, t2$5;
    let tooltipBgColor = opts && 'tooltipBgColor' in opts ? opts.tooltipBgColor : null;
    let tooltipRoundedRadius = opts && 'tooltipRoundedRadius' in opts ? opts.tooltipRoundedRadius : null;
    let tooltipPadding = opts && 'tooltipPadding' in opts ? opts.tooltipPadding : null;
    let tooltipBottomMargin = opts && 'tooltipBottomMargin' in opts ? opts.tooltipBottomMargin : null;
    let maxContentWidth = opts && 'maxContentWidth' in opts ? opts.maxContentWidth : null;
    let getTooltipItem = opts && 'getTooltipItem' in opts ? opts.getTooltipItem : null;
    let fitInsideHorizontally = opts && 'fitInsideHorizontally' in opts ? opts.fitInsideHorizontally : null;
    let fitInsideVertically = opts && 'fitInsideVertically' in opts ? opts.fitInsideVertically : null;
    this[tooltipBgColor$1] = (t2 = tooltipBgColor, t2 == null ? colors$.Colors.white : t2);
    this[tooltipRoundedRadius$1] = (t2$ = tooltipRoundedRadius, t2$ == null ? 4.0 : t2$);
    this[tooltipPadding$1] = (t2$0 = tooltipPadding, t2$0 == null ? C[60] || CT.C60 : t2$0);
    this[tooltipBottomMargin$0] = (t2$1 = tooltipBottomMargin, t2$1 == null ? 16.0 : t2$1);
    this[maxContentWidth$1] = (t2$2 = maxContentWidth, t2$2 == null ? 120.0 : t2$2);
    this[getTooltipItem$] = (t2$3 = getTooltipItem, t2$3 == null ? C[152] || CT.C152 : t2$3);
    this[fitInsideHorizontally$1] = (t2$4 = fitInsideHorizontally, t2$4 == null ? false : t2$4);
    this[fitInsideVertically$1] = (t2$5 = fitInsideVertically, t2$5 == null ? false : t2$5);
    ;
  }).prototype = bar_chart_data.BarTouchTooltipData.prototype;
  dart.addTypeTests(bar_chart_data.BarTouchTooltipData);
  dart.addTypeCaches(bar_chart_data.BarTouchTooltipData);
  dart.setGetterSignature(bar_chart_data.BarTouchTooltipData, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarTouchTooltipData.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(bar_chart_data.BarTouchTooltipData, I[16]);
  dart.setFieldSignature(bar_chart_data.BarTouchTooltipData, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTouchTooltipData.__proto__),
    tooltipBgColor: dart.finalFieldType(dart.legacy(ui.Color)),
    tooltipRoundedRadius: dart.finalFieldType(dart.legacy(core.double)),
    tooltipPadding: dart.finalFieldType(dart.legacy(edge_insets.EdgeInsets)),
    tooltipBottomMargin: dart.finalFieldType(dart.legacy(core.double)),
    maxContentWidth: dart.finalFieldType(dart.legacy(core.double)),
    getTooltipItem: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(bar_chart_data.BarTooltipItem), [dart.legacy(bar_chart_data.BarChartGroupData), dart.legacy(core.int), dart.legacy(bar_chart_data.BarChartRodData), dart.legacy(core.int)]))),
    fitInsideHorizontally: dart.finalFieldType(dart.legacy(core.bool)),
    fitInsideVertically: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var text$1 = dart.privateName(bar_chart_data, "BarTooltipItem.text");
  var textStyle$2 = dart.privateName(bar_chart_data, "BarTooltipItem.textStyle");
  const Object_EquatableMixin$36$36 = class Object_EquatableMixin extends core.Object {};
  (Object_EquatableMixin$36$36.new = function() {
  }).prototype = Object_EquatableMixin$36$36.prototype;
  dart.applyMixin(Object_EquatableMixin$36$36, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTooltipItem = class BarTooltipItem extends Object_EquatableMixin$36$36 {
    get text() {
      return this[text$1];
    }
    set text(value) {
      super.text = value;
    }
    get textStyle() {
      return this[textStyle$2];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.text, this.textStyle]);
    }
  };
  (bar_chart_data.BarTooltipItem.new = function(text, textStyle) {
    this[text$1] = text;
    this[textStyle$2] = textStyle;
    ;
  }).prototype = bar_chart_data.BarTooltipItem.prototype;
  dart.addTypeTests(bar_chart_data.BarTooltipItem);
  dart.addTypeCaches(bar_chart_data.BarTooltipItem);
  dart.setGetterSignature(bar_chart_data.BarTooltipItem, () => ({
    __proto__: dart.getGetters(bar_chart_data.BarTooltipItem.__proto__),
    props: dart.legacy(core.List$(dart.legacy(core.Object)))
  }));
  dart.setLibraryUri(bar_chart_data.BarTooltipItem, I[16]);
  dart.setFieldSignature(bar_chart_data.BarTooltipItem, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTooltipItem.__proto__),
    text: dart.finalFieldType(dart.legacy(core.String)),
    textStyle: dart.finalFieldType(dart.legacy(text_style.TextStyle))
  }));
  var spot$0 = dart.privateName(bar_chart_data, "BarTouchResponse.spot");
  const BaseTouchResponse_EquatableMixin$36$1 = class BaseTouchResponse_EquatableMixin extends base_chart_data.BaseTouchResponse {};
  (BaseTouchResponse_EquatableMixin$36$1.new = function(touchInput) {
    BaseTouchResponse_EquatableMixin$36$1.__proto__.new.call(this, touchInput);
  }).prototype = BaseTouchResponse_EquatableMixin$36$1.prototype;
  dart.applyMixin(BaseTouchResponse_EquatableMixin$36$1, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTouchResponse = class BarTouchResponse extends BaseTouchResponse_EquatableMixin$36$1 {
    get spot() {
      return this[spot$0];
    }
    set spot(value) {
      super.spot = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.spot, this.touchInput]);
    }
  };
  (bar_chart_data.BarTouchResponse.new = function(spot, touchInput) {
    this[spot$0] = spot;
    bar_chart_data.BarTouchResponse.__proto__.new.call(this, touchInput);
    ;
  }).prototype = bar_chart_data.BarTouchResponse.prototype;
  dart.addTypeTests(bar_chart_data.BarTouchResponse);
  dart.addTypeCaches(bar_chart_data.BarTouchResponse);
  dart.setLibraryUri(bar_chart_data.BarTouchResponse, I[16]);
  dart.setFieldSignature(bar_chart_data.BarTouchResponse, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTouchResponse.__proto__),
    spot: dart.finalFieldType(dart.legacy(bar_chart_data.BarTouchedSpot))
  }));
  var touchedBarGroup$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedBarGroup");
  var touchedBarGroupIndex$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedBarGroupIndex");
  var touchedRodData$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedRodData");
  var touchedRodDataIndex$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedRodDataIndex");
  var touchedStackItem$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedStackItem");
  var touchedStackItemIndex$ = dart.privateName(bar_chart_data, "BarTouchedSpot.touchedStackItemIndex");
  const TouchedSpot_EquatableMixin$36 = class TouchedSpot_EquatableMixin extends axis_chart_data.TouchedSpot {};
  (TouchedSpot_EquatableMixin$36.new = function(spot, offset) {
    TouchedSpot_EquatableMixin$36.__proto__.new.call(this, spot, offset);
  }).prototype = TouchedSpot_EquatableMixin$36.prototype;
  dart.applyMixin(TouchedSpot_EquatableMixin$36, equatable_mixin.EquatableMixin);
  bar_chart_data.BarTouchedSpot = class BarTouchedSpot extends TouchedSpot_EquatableMixin$36 {
    get touchedBarGroup() {
      return this[touchedBarGroup$];
    }
    set touchedBarGroup(value) {
      super.touchedBarGroup = value;
    }
    get touchedBarGroupIndex() {
      return this[touchedBarGroupIndex$];
    }
    set touchedBarGroupIndex(value) {
      super.touchedBarGroupIndex = value;
    }
    get touchedRodData() {
      return this[touchedRodData$];
    }
    set touchedRodData(value) {
      super.touchedRodData = value;
    }
    get touchedRodDataIndex() {
      return this[touchedRodDataIndex$];
    }
    set touchedRodDataIndex(value) {
      super.touchedRodDataIndex = value;
    }
    get touchedStackItem() {
      return this[touchedStackItem$];
    }
    set touchedStackItem(value) {
      super.touchedStackItem = value;
    }
    get touchedStackItemIndex() {
      return this[touchedStackItemIndex$];
    }
    set touchedStackItemIndex(value) {
      super.touchedStackItemIndex = value;
    }
    get props() {
      return T$.JSArrayOfObjectL().of([this.touchedBarGroup, this.touchedBarGroupIndex, this.touchedRodData, this.touchedRodDataIndex, this.touchedStackItem, this.touchedStackItemIndex, this.spot, this.offset]);
    }
  };
  (bar_chart_data.BarTouchedSpot.new = function(touchedBarGroup, touchedBarGroupIndex, touchedRodData, touchedRodDataIndex, touchedStackItem, touchedStackItemIndex, spot, offset) {
    this[touchedBarGroup$] = touchedBarGroup;
    this[touchedBarGroupIndex$] = touchedBarGroupIndex;
    this[touchedRodData$] = touchedRodData;
    this[touchedRodDataIndex$] = touchedRodDataIndex;
    this[touchedStackItem$] = touchedStackItem;
    this[touchedStackItemIndex$] = touchedStackItemIndex;
    bar_chart_data.BarTouchedSpot.__proto__.new.call(this, spot, offset);
    ;
  }).prototype = bar_chart_data.BarTouchedSpot.prototype;
  dart.addTypeTests(bar_chart_data.BarTouchedSpot);
  dart.addTypeCaches(bar_chart_data.BarTouchedSpot);
  dart.setLibraryUri(bar_chart_data.BarTouchedSpot, I[16]);
  dart.setFieldSignature(bar_chart_data.BarTouchedSpot, () => ({
    __proto__: dart.getFields(bar_chart_data.BarTouchedSpot.__proto__),
    touchedBarGroup: dart.finalFieldType(dart.legacy(bar_chart_data.BarChartGroupData)),
    touchedBarGroupIndex: dart.finalFieldType(dart.legacy(core.int)),
    touchedRodData: dart.finalFieldType(dart.legacy(bar_chart_data.BarChartRodData)),
    touchedRodDataIndex: dart.finalFieldType(dart.legacy(core.int)),
    touchedStackItem: dart.finalFieldType(dart.legacy(bar_chart_data.BarChartRodStackItem)),
    touchedStackItemIndex: dart.finalFieldType(dart.legacy(core.int))
  }));
  bar_chart_data.BarChartDataTween = class BarChartDataTween extends tween.Tween$(dart.legacy(bar_chart_data.BarChartData)) {
    lerp(t) {
      return T$.BarChartDataL().as(this.begin.lerp(this.begin, this.end, t));
    }
  };
  (bar_chart_data.BarChartDataTween.new = function(opts) {
    let begin = opts && 'begin' in opts ? opts.begin : null;
    let end = opts && 'end' in opts ? opts.end : null;
    bar_chart_data.BarChartDataTween.__proto__.new.call(this, {begin: begin, end: end});
    ;
  }).prototype = bar_chart_data.BarChartDataTween.prototype;
  dart.addTypeTests(bar_chart_data.BarChartDataTween);
  dart.addTypeCaches(bar_chart_data.BarChartDataTween);
  dart.setMethodSignature(bar_chart_data.BarChartDataTween, () => ({
    __proto__: dart.getMethods(bar_chart_data.BarChartDataTween.__proto__),
    lerp: dart.fnType(dart.legacy(bar_chart_data.BarChartData), [dart.legacy(core.double)])
  }));
  dart.setLibraryUri(bar_chart_data.BarChartDataTween, I[16]);
  bar_chart_data.defaultBarTooltipItem = function defaultBarTooltipItem(group, groupIndex, rod, rodIndex) {
    let textStyle = C[123] || CT.C123;
    return new bar_chart_data.BarTooltipItem.new(dart.toString(rod.y), textStyle);
  };
  var _barPaint$ = dart.privateName(bar_chart_painter, "_barPaint");
  var _bgTouchTooltipPaint$0 = dart.privateName(bar_chart_painter, "_bgTouchTooltipPaint");
  var _groupBarsPosition = dart.privateName(bar_chart_painter, "_groupBarsPosition");
  var _calculateGroupsX = dart.privateName(bar_chart_painter, "_calculateGroupsX");
  var _calculateGroupAndBarsPosition = dart.privateName(bar_chart_painter, "_calculateGroupAndBarsPosition");
  var _drawBars = dart.privateName(bar_chart_painter, "_drawBars");
  var _drawTitles$0 = dart.privateName(bar_chart_painter, "_drawTitles");
  var _drawTouchTooltip$0 = dart.privateName(bar_chart_painter, "_drawTouchTooltip");
  var _getNearestTouchedSpot$ = dart.privateName(bar_chart_painter, "_getNearestTouchedSpot");
  const AxisChartPainter_TouchHandler$36$0 = class AxisChartPainter_TouchHandler extends axis_chart_painter.AxisChartPainter$(dart.legacy(bar_chart_data.BarChartData)) {};
  (AxisChartPainter_TouchHandler$36$0.new = function(data, targetData, opts) {
    AxisChartPainter_TouchHandler$36$0.__proto__.new.call(this, data, targetData, opts);
  }).prototype = AxisChartPainter_TouchHandler$36$0.prototype;
  dart.applyMixin(AxisChartPainter_TouchHandler$36$0, base_chart_painter.TouchHandler$(dart.legacy(bar_chart_data.BarTouchResponse)));
  bar_chart_painter.BarChartPainter = class BarChartPainter extends AxisChartPainter_TouchHandler$36$0 {
    paint(canvas, size) {
      super.paint(canvas, size);
      let canvasWrapper = new canvas_wrapper.CanvasWrapper.new(canvas, size);
      if (dart.test(this.data.barGroups[$isEmpty])) {
        return;
      }
      let groupsX = this[_calculateGroupsX](size, this.data.barGroups, this.data.alignment);
      this[_groupBarsPosition] = this[_calculateGroupAndBarsPosition](size, groupsX, this.data.barGroups);
      this[_drawBars](canvasWrapper, this[_groupBarsPosition]);
      this.drawAxisTitles(canvasWrapper);
      this[_drawTitles$0](canvasWrapper, this[_groupBarsPosition]);
      for (let i = 0; i < dart.notNull(this.targetData.barGroups[$length]); i = i + 1) {
        let barGroup = this.targetData.barGroups[$_get](i);
        for (let j = 0; j < dart.notNull(barGroup.barRods[$length]); j = j + 1) {
          if (!dart.test(barGroup.showingTooltipIndicators[$contains](j))) {
            continue;
          }
          let barRod = barGroup.barRods[$_get](j);
          this[_drawTouchTooltip$0](canvasWrapper, this[_groupBarsPosition], this.targetData.barTouchData.touchTooltipData, barGroup, i, barRod, j);
        }
      }
    }
    [_calculateGroupsX](viewSize, barGroups, alignment) {
      let drawSize = this.getChartUsableDrawSize(viewSize);
      let groupsX = T$.ListOfdoubleL().new(barGroups[$length]);
      let leftTextsSpace = this.getLeftOffsetDrawSize();
      switch (alignment) {
        case C[140] || CT.C140:
        {
          let tempX = 0.0;
          barGroups[$asMap]()[$forEach](dart.fn((i, group) => {
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + tempX + dart.notNull(group.width) / 2);
            tempX = tempX + dart.notNull(group.width);
          }, T$.intLAndBarChartGroupDataLToNull()));
          break;
        }
        case C[141] || CT.C141:
        {
          let tempX = 0.0;
          for (let i = dart.notNull(barGroups[$length]) - 1; i >= 0; i = i - 1) {
            let group = barGroups[$_get](i);
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + dart.notNull(drawSize.width) - tempX - dart.notNull(group.width) / 2);
            tempX = tempX + dart.notNull(group.width);
          }
          break;
        }
        case C[142] || CT.C142:
        {
          let sumWidth = barGroups[$map](T$.doubleL(), dart.fn(group => group.width, T$.BarChartGroupDataLTodoubleL()))[$reduce](dart.fn((a, b) => dart.notNull(a) + dart.notNull(b), T$.doubleLAnddoubleLTodoubleL()));
          sumWidth = dart.notNull(sumWidth) + dart.notNull(this.data.groupsSpace) * (dart.notNull(barGroups[$length]) - 1);
          let horizontalMargin = (dart.notNull(drawSize.width) - dart.notNull(sumWidth)) / 2;
          let tempX = 0.0;
          for (let i = 0; i < dart.notNull(barGroups[$length]); i = i + 1) {
            let group = barGroups[$_get](i);
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + horizontalMargin + tempX + dart.notNull(group.width) / 2);
            let groupSpace = i === dart.notNull(barGroups[$length]) - 1 ? 0.0 : this.data.groupsSpace;
            tempX = tempX + (dart.notNull(group.width) + dart.notNull(groupSpace));
          }
          break;
        }
        case C[145] || CT.C145:
        {
          let sumWidth = barGroups[$map](T$.doubleL(), dart.fn(group => group.width, T$.BarChartGroupDataLTodoubleL()))[$reduce](dart.fn((a, b) => dart.notNull(a) + dart.notNull(b), T$.doubleLAnddoubleLTodoubleL()));
          let spaceAvailable = dart.notNull(drawSize.width) - dart.notNull(sumWidth);
          let eachSpace = spaceAvailable / (dart.notNull(barGroups[$length]) - 1);
          let tempX = 0.0;
          barGroups[$asMap]()[$forEach](dart.fn((index, group) => {
            tempX = tempX + dart.notNull(group.width) / 2;
            if (index !== 0) {
              tempX = tempX + eachSpace;
            }
            groupsX[$_set](index, dart.notNull(leftTextsSpace) + tempX);
            tempX = tempX + dart.notNull(group.width) / 2;
          }, T$.intLAndBarChartGroupDataLToNull()));
          break;
        }
        case C[144] || CT.C144:
        {
          let sumWidth = barGroups[$map](T$.doubleL(), dart.fn(group => group.width, T$.BarChartGroupDataLTodoubleL()))[$reduce](dart.fn((a, b) => dart.notNull(a) + dart.notNull(b), T$.doubleLAnddoubleLTodoubleL()));
          let spaceAvailable = dart.notNull(drawSize.width) - dart.notNull(sumWidth);
          let eachSpace = spaceAvailable / (dart.notNull(barGroups[$length]) * 2);
          let tempX = 0.0;
          barGroups[$asMap]()[$forEach](dart.fn((i, group) => {
            tempX = tempX + eachSpace;
            tempX = tempX + dart.notNull(group.width) / 2;
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + tempX);
            tempX = tempX + dart.notNull(group.width) / 2;
            tempX = tempX + eachSpace;
          }, T$.intLAndBarChartGroupDataLToNull()));
          break;
        }
        case C[143] || CT.C143:
        {
          let sumWidth = barGroups[$map](T$.doubleL(), dart.fn(group => group.width, T$.BarChartGroupDataLTodoubleL()))[$reduce](dart.fn((a, b) => dart.notNull(a) + dart.notNull(b), T$.doubleLAnddoubleLTodoubleL()));
          let spaceAvailable = dart.notNull(drawSize.width) - dart.notNull(sumWidth);
          let eachSpace = spaceAvailable / (dart.notNull(barGroups[$length]) + 1);
          let tempX = 0.0;
          barGroups[$asMap]()[$forEach](dart.fn((i, group) => {
            tempX = tempX + eachSpace;
            tempX = tempX + dart.notNull(group.width) / 2;
            groupsX[$_set](i, dart.notNull(leftTextsSpace) + tempX);
            tempX = tempX + dart.notNull(group.width) / 2;
          }, T$.intLAndBarChartGroupDataLToNull()));
          break;
        }
      }
      return groupsX;
    }
    [_calculateGroupAndBarsPosition](viewSize, groupsX, barGroups) {
      if (groupsX[$length] != barGroups[$length]) {
        dart.throw(core.Exception.new("inconsistent state groupsX.length != barGroups.length"));
      }
      let groupBarsPosition = T$.JSArrayOf_GroupBarsPositionL().of([]);
      for (let i = 0; i < dart.notNull(barGroups[$length]); i = i + 1) {
        let barGroup = barGroups[$_get](i);
        let groupX = groupsX[$_get](i);
        let tempX = 0.0;
        let barsX = T$.JSArrayOfdoubleL().of([]);
        barGroup.barRods[$asMap]()[$forEach](dart.fn((barIndex, barRod) => {
          let widthHalf = dart.notNull(barRod.width) / 2;
          barsX[$add](dart.notNull(groupX) - dart.notNull(barGroup.width) / 2 + tempX + widthHalf);
          tempX = tempX + (dart.notNull(barRod.width) + dart.notNull(barGroup.barsSpace));
        }, T$.intLAndBarChartRodDataLToNull()));
        groupBarsPosition[$add](new bar_chart_painter._GroupBarsPosition.new(groupX, barsX));
      }
      return groupBarsPosition;
    }
    [_drawBars](canvasWrapper, groupBarsPosition) {
      let t2;
      let viewSize = canvasWrapper.size;
      let drawSize = this.getChartUsableDrawSize(viewSize);
      for (let i = 0; i < dart.notNull(this.data.barGroups[$length]); i = i + 1) {
        let barGroup = this.data.barGroups[$_get](i);
        for (let j = 0; j < dart.notNull(barGroup.barRods[$length]); j = j + 1) {
          let barRod = barGroup.barRods[$_get](j);
          let widthHalf = dart.notNull(barRod.width) / 2;
          let borderRadius = (t2 = barRod.borderRadius, t2 == null ? new border_radius.BorderRadius.circular(dart.notNull(barRod.width) / 2) : t2);
          let x = groupBarsPosition[$_get](i).barsX[$_get](j);
          let left = dart.notNull(x) - widthHalf;
          let right = dart.notNull(x) + widthHalf;
          let cornerHeight = math.max(T$.doubleL(), borderRadius.topLeft.y, borderRadius.topRight.y) + math.max(T$.numL(), borderRadius.bottomLeft.y, borderRadius.bottomRight.y);
          let barRRect = null;
          if (dart.test(barRod.backDrawRodData.show) && barRod.backDrawRodData.y !== 0) {
            if (dart.notNull(barRod.backDrawRodData.y) > 0) {
              let bottom = this.getPixelY(math.max(T$.doubleL(), this.data.minY, 0.0), drawSize);
              let top = math.min(T$.doubleL(), this.getPixelY(barRod.backDrawRodData.y, drawSize), dart.notNull(bottom) - cornerHeight);
              barRRect = new ui.RRect.fromLTRBAndCorners(left, top, right, bottom, {topLeft: borderRadius.topLeft, topRight: borderRadius.topRight, bottomLeft: borderRadius.bottomLeft, bottomRight: borderRadius.bottomRight});
            } else {
              let top = this.getPixelY(math.min(T$.doubleL(), this.data.maxY, 0.0), drawSize);
              let bottom = math.max(T$.doubleL(), this.getPixelY(barRod.backDrawRodData.y, drawSize), dart.notNull(top) + cornerHeight);
              barRRect = new ui.RRect.fromLTRBAndCorners(left, top, right, bottom, {topLeft: borderRadius.topLeft, topRight: borderRadius.topRight, bottomLeft: borderRadius.bottomLeft, bottomRight: borderRadius.bottomRight});
            }
            if (barRod.backDrawRodData.colors[$length] === 1) {
              this[_barPaint$].color = barRod.backDrawRodData.colors[$_get](0);
              this[_barPaint$].shader = null;
            } else {
              let from = barRod.backDrawRodData.gradientFrom;
              let to = barRod.backDrawRodData.gradientTo;
              let stops = T$.JSArrayOfdoubleL().of([]);
              if (barRod.backDrawRodData.colorStops == null || barRod.backDrawRodData.colorStops[$length] != barRod.backDrawRodData.colors[$length]) {
                barRod.backDrawRodData.colors[$asMap]()[$forEach](dart.fn((index, color) => {
                  let percent = 1.0 / dart.notNull(barRod.backDrawRodData.colors[$length]);
                  stops[$add](percent * dart.notNull(index));
                }, T$.intLAndColorLToNull()));
              } else {
                stops = barRod.backDrawRodData.colorStops;
              }
              this[_barPaint$].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(drawSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(drawSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(drawSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(drawSize.height) * dart.notNull(to.dy)), barRod.backDrawRodData.colors, stops);
            }
            canvasWrapper.drawRRect(barRRect, this[_barPaint$]);
          }
          if (barRod.y !== 0) {
            if (dart.notNull(barRod.y) > 0) {
              let bottom = this.getPixelY(math.max(T$.doubleL(), this.data.minY, 0.0), drawSize);
              let top = math.min(T$.doubleL(), this.getPixelY(barRod.y, drawSize), dart.notNull(bottom) - cornerHeight);
              barRRect = new ui.RRect.fromLTRBAndCorners(left, top, right, bottom, {topLeft: borderRadius.topLeft, topRight: borderRadius.topRight, bottomLeft: borderRadius.bottomLeft, bottomRight: borderRadius.bottomRight});
            } else {
              let top = this.getPixelY(math.min(T$.doubleL(), this.data.maxY, 0.0), drawSize);
              let bottom = math.max(T$.doubleL(), this.getPixelY(barRod.y, drawSize), dart.notNull(top) + cornerHeight);
              barRRect = new ui.RRect.fromLTRBAndCorners(left, top, right, bottom, {topLeft: borderRadius.topLeft, topRight: borderRadius.topRight, bottomLeft: borderRadius.bottomLeft, bottomRight: borderRadius.bottomRight});
            }
            if (barRod.colors[$length] === 1) {
              this[_barPaint$].color = barRod.colors[$_get](0);
              this[_barPaint$].shader = null;
            } else {
              let from = barRod.gradientFrom;
              let to = barRod.gradientTo;
              let stops = T$.JSArrayOfdoubleL().of([]);
              if (barRod.colorStops == null || barRod.colorStops[$length] != barRod.colors[$length]) {
                barRod.colors[$asMap]()[$forEach](dart.fn((index, color) => {
                  let percent = 1.0 / dart.notNull(barRod.colors[$length]);
                  stops[$add](percent * dart.notNull(index));
                }, T$.intLAndColorLToNull()));
              } else {
                stops = barRod.colorStops;
              }
              this[_barPaint$].shader = ui.Gradient.linear(new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(drawSize.width) * dart.notNull(from.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(drawSize.height) * dart.notNull(from.dy)), new ui.Offset.new(dart.notNull(this.getLeftOffsetDrawSize()) + dart.notNull(drawSize.width) * dart.notNull(to.dx), dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(drawSize.height) * dart.notNull(to.dy)), barRod.colors, stops);
            }
            canvasWrapper.drawRRect(barRRect, this[_barPaint$]);
            if (barRod.rodStackItems != null && dart.test(barRod.rodStackItems[$isNotEmpty])) {
              for (let i = 0; i < dart.notNull(barRod.rodStackItems[$length]); i = i + 1) {
                let stackItem = barRod.rodStackItems[$_get](i);
                let stackFromY = this.getPixelY(stackItem.fromY, drawSize);
                let stackToY = this.getPixelY(stackItem.toY, drawSize);
                this[_barPaint$].color = stackItem.color;
                canvasWrapper.save();
                canvasWrapper.clipRect(new ui.Rect.fromLTRB(left, stackToY, right, stackFromY));
                canvasWrapper.drawRRect(barRRect, this[_barPaint$]);
                canvasWrapper.restore();
              }
            }
          }
        }
      }
    }
    [_drawTitles$0](canvasWrapper, groupBarsPosition) {
      let t2, t7, t6, t5, t4, t3, t2$, t3$, t2$0, t3$0, t2$1, t3$1, t2$2, t3$2, t2$3, t2$4, t7$, t6$, t5$, t4$, t3$3, t2$5, t3$4, t2$6, t3$5, t2$7, t3$6, t2$8, t3$7, t2$9;
      if (!dart.test(this.targetData.titlesData.show)) {
        return;
      }
      let viewSize = canvasWrapper.size;
      let drawSize = this.getChartUsableDrawSize(viewSize);
      let leftTitles = this.targetData.titlesData.leftTitles;
      let leftInterval = (t2 = leftTitles.interval, t2 == null ? utils.getEfficientInterval(viewSize.height, this.data.verticalDiff) : t2);
      if (dart.test(leftTitles.showTitles)) {
        let verticalSeek = this.data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(this.data.maxY)) {
          if (dart.test((t2$ = leftTitles, t3 = this.data.minY, t4 = this.data.maxY, t5 = leftTitles, t6 = leftInterval, t7 = verticalSeek, t2$.checkToShowTitle(t3, t4, t5, t6, t7)))) {
            let x = 0 + dart.notNull(this.getLeftOffsetDrawSize());
            let y = this.getPixelY(verticalSeek, drawSize);
            let text = (t2$0 = leftTitles, t3$ = verticalSeek, t2$0.getTitles(t3$));
            let span = new text_span.TextSpan.new({style: (t2$1 = leftTitles, t3$0 = verticalSeek, t2$1.getTextStyles(t3$0)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace()});
            x = x - (dart.notNull(tp.width) + dart.notNull(leftTitles.margin));
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(leftTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) - dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxY) - dart.notNull(verticalSeek) < dart.notNull(leftInterval) && this.data.maxY != verticalSeek) {
            verticalSeek = this.data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(leftInterval);
          }
        }
      }
      let topTitles = this.targetData.titlesData.topTitles;
      if (dart.test(topTitles.showTitles)) {
        for (let index = 0; index < dart.notNull(groupBarsPosition[$length]); index = index + 1) {
          let groupBarPos = groupBarsPosition[$_get](index);
          let xValue = this.data.barGroups[$_get](index).x[$toDouble]();
          let text = (t2$2 = topTitles, t3$1 = xValue, t2$2.getTitles(t3$1));
          let span = new text_span.TextSpan.new({style: (t2$3 = topTitles, t3$2 = xValue, t2$3.getTextStyles(t3$2)), text: text});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
          tp.layout();
          let x = groupBarPos.groupX;
          x = dart.notNull(x) - dart.notNull(tp.width) / 2;
          canvasWrapper.save();
          canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, 0 + dart.notNull(tp.height) / 2);
          canvasWrapper.rotate(utils.radians(topTitles.rotateAngle));
          canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(0 + dart.notNull(tp.height) / 2));
          x = dart.notNull(x) + dart.notNull(utils.translateRotatedPosition(tp.width, topTitles.rotateAngle));
          canvasWrapper.drawText(tp, new ui.Offset.new(x, 0));
          canvasWrapper.restore();
        }
      }
      let rightTitles = this.targetData.titlesData.rightTitles;
      let rightInterval = (t2$4 = rightTitles.interval, t2$4 == null ? utils.getEfficientInterval(viewSize.height, this.data.verticalDiff) : t2$4);
      if (dart.test(rightTitles.showTitles)) {
        let verticalSeek = this.data.minY;
        while (dart.notNull(verticalSeek) <= dart.notNull(this.data.maxY)) {
          if (dart.test((t2$5 = rightTitles, t3$3 = this.data.minY, t4$ = this.data.maxY, t5$ = rightTitles, t6$ = rightInterval, t7$ = verticalSeek, t2$5.checkToShowTitle(t3$3, t4$, t5$, t6$, t7$)))) {
            let x = dart.notNull(drawSize.width) + dart.notNull(this.getLeftOffsetDrawSize());
            let y = this.getPixelY(verticalSeek, drawSize);
            let text = (t2$6 = rightTitles, t3$4 = verticalSeek, t2$6.getTitles(t3$4));
            let span = new text_span.TextSpan.new({style: (t2$7 = rightTitles, t3$5 = verticalSeek, t2$7.getTextStyles(t3$5)), text: text});
            let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
            tp.layout({maxWidth: this.getExtraNeededHorizontalSpace()});
            x = x + dart.notNull(rightTitles.margin);
            y = dart.notNull(y) - dart.notNull(tp.height) / 2;
            canvasWrapper.save();
            canvasWrapper.translate(x + dart.notNull(tp.width) / 2, dart.notNull(y) + dart.notNull(tp.height) / 2);
            canvasWrapper.rotate(utils.radians(rightTitles.rotateAngle));
            canvasWrapper.translate(-(x + dart.notNull(tp.width) / 2), -(dart.notNull(y) + dart.notNull(tp.height) / 2));
            y = dart.notNull(y) + dart.notNull(utils.translateRotatedPosition(tp.width, leftTitles.rotateAngle));
            canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
            canvasWrapper.restore();
          }
          if (dart.notNull(this.data.maxY) - dart.notNull(verticalSeek) < dart.notNull(rightInterval) && this.data.maxY != verticalSeek) {
            verticalSeek = this.data.maxY;
          } else {
            verticalSeek = dart.notNull(verticalSeek) + dart.notNull(rightInterval);
          }
        }
      }
      let bottomTitles = this.targetData.titlesData.bottomTitles;
      if (dart.test(bottomTitles.showTitles)) {
        for (let index = 0; index < dart.notNull(groupBarsPosition[$length]); index = index + 1) {
          let groupBarPos = groupBarsPosition[$_get](index);
          let xValue = this.data.barGroups[$_get](index).x[$toDouble]();
          let text = (t2$8 = bottomTitles, t3$6 = xValue, t2$8.getTitles(t3$6));
          let span = new text_span.TextSpan.new({style: (t2$9 = bottomTitles, t3$7 = xValue, t2$9.getTextStyles(t3$7)), text: text});
          let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
          tp.layout();
          let x = groupBarPos.groupX;
          let y = dart.notNull(drawSize.height) + dart.notNull(this.getTopOffsetDrawSize()) + dart.notNull(bottomTitles.margin);
          x = dart.notNull(x) - dart.notNull(tp.width) / 2;
          canvasWrapper.save();
          canvasWrapper.translate(dart.notNull(x) + dart.notNull(tp.width) / 2, y + dart.notNull(tp.height) / 2);
          canvasWrapper.rotate(utils.radians(bottomTitles.rotateAngle));
          canvasWrapper.translate(-(dart.notNull(x) + dart.notNull(tp.width) / 2), -(y + dart.notNull(tp.height) / 2));
          x = dart.notNull(x) + dart.notNull(utils.translateRotatedPosition(tp.width, bottomTitles.rotateAngle));
          canvasWrapper.drawText(tp, new ui.Offset.new(x, y));
          canvasWrapper.restore();
        }
      }
    }
    [_drawTouchTooltip$0](canvasWrapper, groupPositions, tooltipData, showOnBarGroup, barGroupIndex, showOnRodData, barRodIndex) {
      let t6, t5, t4, t3, t2;
      let viewSize = canvasWrapper.size;
      let chartUsableSize = this.getChartUsableDrawSize(viewSize);
      let tooltipItem = (t2 = tooltipData, t3 = showOnBarGroup, t4 = barGroupIndex, t5 = showOnRodData, t6 = barRodIndex, t2.getTooltipItem(t3, t4, t5, t6));
      if (tooltipItem == null) {
        return;
      }
      let span = new text_span.TextSpan.new({style: tooltipItem.textStyle, text: tooltipItem.text});
      let tp = new text_painter.TextPainter.new({text: span, textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, textScaleFactor: this.textScale});
      tp.layout({maxWidth: tooltipData.maxContentWidth});
      let drawingTextPainter = tp;
      let textWidth = drawingTextPainter.width;
      let textHeight = dart.notNull(drawingTextPainter.height) + 4;
      let barOffset = new ui.Offset.new(groupPositions[$_get](barGroupIndex).barsX[$_get](barRodIndex), this.getPixelY(showOnRodData.y, chartUsableSize));
      let isPositive = dart.notNull(showOnRodData.y) > 0;
      let tooltipWidth = dart.notNull(textWidth) + dart.notNull(tooltipData.tooltipPadding.horizontal);
      let tooltipHeight = textHeight + dart.notNull(tooltipData.tooltipPadding.vertical);
      let tooltipTop = isPositive ? dart.notNull(barOffset.dy) - tooltipHeight - dart.notNull(tooltipData.tooltipBottomMargin) : dart.notNull(barOffset.dy) + dart.notNull(tooltipData.tooltipBottomMargin);
      let rect = new ui.Rect.fromLTWH(dart.notNull(barOffset.dx) - tooltipWidth / 2, tooltipTop, tooltipWidth, tooltipHeight);
      if (dart.test(tooltipData.fitInsideHorizontally)) {
        if (dart.notNull(rect.left) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.left);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) + shiftAmount, rect.top, dart.notNull(rect.right) + shiftAmount, rect.bottom);
        }
        if (dart.notNull(rect.right) > dart.notNull(viewSize.width)) {
          let shiftAmount = dart.notNull(rect.right) - dart.notNull(viewSize.width);
          rect = new ui.Rect.fromLTRB(dart.notNull(rect.left) - shiftAmount, rect.top, dart.notNull(rect.right) - shiftAmount, rect.bottom);
        }
      }
      if (dart.test(tooltipData.fitInsideVertically)) {
        if (dart.notNull(rect.top) < 0) {
          let shiftAmount = 0 - dart.notNull(rect.top);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) + shiftAmount, rect.right, dart.notNull(rect.bottom) + shiftAmount);
        }
        if (dart.notNull(rect.bottom) > dart.notNull(viewSize.height)) {
          let shiftAmount = dart.notNull(rect.bottom) - dart.notNull(viewSize.height);
          rect = new ui.Rect.fromLTRB(rect.left, dart.notNull(rect.top) - shiftAmount, rect.right, dart.notNull(rect.bottom) - shiftAmount);
        }
      }
      let radius = new ui.Radius.circular(tooltipData.tooltipRoundedRadius);
      let roundedRect = new ui.RRect.fromRectAndCorners(rect, {topLeft: radius, topRight: radius, bottomLeft: radius, bottomRight: radius});
      this[_bgTouchTooltipPaint$0].color = tooltipData.tooltipBgColor;
      canvasWrapper.drawRRect(roundedRect, this[_bgTouchTooltipPaint$0]);
      let top = tooltipData.tooltipPadding.top;
      let drawOffset = new ui.Offset.new(dart.notNull(rect.center.dx) - dart.notNull(tp.width) / 2, dart.notNull(rect.topCenter.dy) + dart.notNull(top));
      canvasWrapper.drawText(tp, drawOffset);
    }
    getExtraNeededHorizontalSpace() {
      let sum = super.getExtraNeededHorizontalSpace();
      if (dart.test(this.data.titlesData.show)) {
        let leftSide = this.data.titlesData.leftTitles;
        if (dart.test(leftSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(leftSide.reservedSize) + dart.notNull(leftSide.margin));
        }
        let rightSide = this.data.titlesData.rightTitles;
        if (dart.test(rightSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(rightSide.reservedSize) + dart.notNull(rightSide.margin));
        }
      }
      return sum;
    }
    getExtraNeededVerticalSpace() {
      let sum = super.getExtraNeededVerticalSpace();
      if (dart.test(this.data.titlesData.show)) {
        let bottomSide = this.data.titlesData.bottomTitles;
        if (dart.test(bottomSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(bottomSide.reservedSize) + dart.notNull(bottomSide.margin));
        }
        let topSide = this.data.titlesData.topTitles;
        if (dart.test(topSide.showTitles)) {
          sum = dart.notNull(sum) + (dart.notNull(topSide.reservedSize) + dart.notNull(topSide.margin));
        }
      }
      return sum;
    }
    getLeftOffsetDrawSize() {
      let sum = super.getLeftOffsetDrawSize();
      let leftTitles = this.data.titlesData.leftTitles;
      if (dart.test(this.data.titlesData.show) && dart.test(leftTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(leftTitles.reservedSize) + dart.notNull(leftTitles.margin));
      }
      return sum;
    }
    getTopOffsetDrawSize() {
      let sum = super.getTopOffsetDrawSize();
      let topTitles = this.data.titlesData.topTitles;
      if (dart.test(this.data.titlesData.show) && dart.test(topTitles.showTitles)) {
        sum = dart.notNull(sum) + (dart.notNull(topTitles.reservedSize) + dart.notNull(topTitles.margin));
      }
      return sum;
    }
    handleTouch(touchInput, size) {
      let touchedSpot = this[_getNearestTouchedSpot$](size, touchInput.getOffset(), this[_groupBarsPosition]);
      return new bar_chart_data.BarTouchResponse.new(touchedSpot, touchInput);
    }
    [_getNearestTouchedSpot$](viewSize, touchedPoint, groupBarsPosition) {
      if (groupBarsPosition == null) {
        let groupsX = this[_calculateGroupsX](viewSize, this.data.barGroups, this.data.alignment);
        groupBarsPosition = this[_calculateGroupAndBarsPosition](viewSize, groupsX, this.data.barGroups);
      }
      let chartViewSize = this.getChartUsableDrawSize(viewSize);
      for (let i = 0; i < dart.notNull(groupBarsPosition[$length]); i = i + 1) {
        let groupBarPos = groupBarsPosition[$_get](i);
        for (let j = 0; j < dart.notNull(groupBarPos.barsX[$length]); j = j + 1) {
          let barX = groupBarPos.barsX[$_get](j);
          let barWidth = this.targetData.barGroups[$_get](i).barRods[$_get](j).width;
          let halfBarWidth = dart.notNull(barWidth) / 2;
          let barTopY = null;
          let barBotY = null;
          let isPositive = dart.notNull(this.targetData.barGroups[$_get](i).barRods[$_get](j).y) > 0;
          if (isPositive) {
            barTopY = this.getPixelY(this.targetData.barGroups[$_get](i).barRods[$_get](j).y, chartViewSize);
            barBotY = this.getPixelY(0.0, chartViewSize);
          } else {
            barTopY = this.getPixelY(0.0, chartViewSize);
            barBotY = this.getPixelY(this.targetData.barGroups[$_get](i).barRods[$_get](j).y, chartViewSize);
          }
          let backDrawBarY = this.getPixelY(this.targetData.barGroups[$_get](i).barRods[$_get](j).backDrawRodData.y, chartViewSize);
          let touchExtraThreshold = this.targetData.barTouchData.touchExtraThreshold;
          let isXInTouchBounds = dart.notNull(touchedPoint.dx) <= dart.notNull(barX) + halfBarWidth + dart.notNull(touchExtraThreshold.right) && dart.notNull(touchedPoint.dx) >= dart.notNull(barX) - halfBarWidth - dart.notNull(touchExtraThreshold.left);
          let isYInBarBounds = dart.notNull(touchedPoint.dy) <= dart.notNull(barBotY) + dart.notNull(touchExtraThreshold.bottom) && dart.notNull(touchedPoint.dy) >= dart.notNull(barTopY) - dart.notNull(touchExtraThreshold.top);
          let isYInBarBackDrawBounds = null;
          if (isPositive) {
            isYInBarBackDrawBounds = dart.notNull(touchedPoint.dy) <= dart.notNull(barBotY) + dart.notNull(touchExtraThreshold.bottom) && dart.notNull(touchedPoint.dy) >= dart.notNull(backDrawBarY) - dart.notNull(touchExtraThreshold.top);
          } else {
            isYInBarBackDrawBounds = dart.notNull(touchedPoint.dy) >= dart.notNull(barTopY) - dart.notNull(touchExtraThreshold.top) && dart.notNull(touchedPoint.dy) <= dart.notNull(backDrawBarY) + dart.notNull(touchExtraThreshold.bottom);
          }
          let isYInTouchBounds = dart.test(this.targetData.barTouchData.allowTouchBarBackDraw) && dart.test(isYInBarBackDrawBounds) || isYInBarBounds;
          if (isXInTouchBounds && isYInTouchBounds) {
            let nearestGroup = this.targetData.barGroups[$_get](i);
            let nearestBarRod = nearestGroup.barRods[$_get](j);
            let nearestSpot = new axis_chart_data.FlSpot.new(nearestGroup.x[$toDouble](), nearestBarRod.y);
            let nearestSpotPos = new ui.Offset.new(barX, this.getPixelY(nearestSpot.y, chartViewSize));
            let touchedStackIndex = -1;
            let touchedStack = null;
            for (let stackIndex = 0; stackIndex < dart.notNull(nearestBarRod.rodStackItems[$length]); stackIndex = stackIndex + 1) {
              let stackItem = nearestBarRod.rodStackItems[$_get](stackIndex);
              let fromPixel = this.getPixelY(stackItem.fromY, chartViewSize);
              let toPixel = this.getPixelY(stackItem.toY, chartViewSize);
              if (dart.notNull(touchedPoint.dy) <= dart.notNull(fromPixel) && dart.notNull(touchedPoint.dy) >= dart.notNull(toPixel)) {
                touchedStackIndex = stackIndex;
                touchedStack = stackItem;
                break;
              }
            }
            return new bar_chart_data.BarTouchedSpot.new(nearestGroup, i, nearestBarRod, j, touchedStack, touchedStackIndex, nearestSpot, nearestSpotPos);
          }
        }
      }
      return null;
    }
    shouldRepaint(oldDelegate) {
      T$.BarChartPainterL().as(oldDelegate);
      return !dart.equals(oldDelegate.data, this.data);
    }
  };
  (bar_chart_painter.BarChartPainter.new = function(data, targetData, touchHandler, opts) {
    let t2, t2$;
    let textScale = opts && 'textScale' in opts ? opts.textScale : 1;
    this[_barPaint$] = null;
    this[_bgTouchTooltipPaint$0] = null;
    this[_groupBarsPosition] = null;
    bar_chart_painter.BarChartPainter.__proto__.new.call(this, data, targetData, {textScale: textScale});
    touchHandler(this);
    this[_barPaint$] = (t2 = ui.Paint.new(), (() => {
      t2.style = ui.PaintingStyle.fill;
      return t2;
    })());
    this[_bgTouchTooltipPaint$0] = (t2$ = ui.Paint.new(), (() => {
      t2$.style = ui.PaintingStyle.fill;
      t2$.color = colors$.Colors.white;
      return t2$;
    })());
  }).prototype = bar_chart_painter.BarChartPainter.prototype;
  dart.addTypeTests(bar_chart_painter.BarChartPainter);
  dart.addTypeCaches(bar_chart_painter.BarChartPainter);
  dart.setMethodSignature(bar_chart_painter.BarChartPainter, () => ({
    __proto__: dart.getMethods(bar_chart_painter.BarChartPainter.__proto__),
    [_calculateGroupsX]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.double))), [dart.legacy(ui.Size), dart.legacy(core.List$(dart.legacy(bar_chart_data.BarChartGroupData))), dart.legacy(bar_chart_data.BarChartAlignment)]),
    [_calculateGroupAndBarsPosition]: dart.fnType(dart.legacy(core.List$(dart.legacy(bar_chart_painter._GroupBarsPosition))), [dart.legacy(ui.Size), dart.legacy(core.List$(dart.legacy(core.double))), dart.legacy(core.List$(dart.legacy(bar_chart_data.BarChartGroupData)))]),
    [_drawBars]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(core.List$(dart.legacy(bar_chart_painter._GroupBarsPosition)))]),
    [_drawTitles$0]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(core.List$(dart.legacy(bar_chart_painter._GroupBarsPosition)))]),
    [_drawTouchTooltip$0]: dart.fnType(dart.void, [dart.legacy(canvas_wrapper.CanvasWrapper), dart.legacy(core.List$(dart.legacy(bar_chart_painter._GroupBarsPosition))), dart.legacy(bar_chart_data.BarTouchTooltipData), dart.legacy(bar_chart_data.BarChartGroupData), dart.legacy(core.int), dart.legacy(bar_chart_data.BarChartRodData), dart.legacy(core.int)]),
    [_getNearestTouchedSpot$]: dart.fnType(dart.legacy(bar_chart_data.BarTouchedSpot), [dart.legacy(ui.Size), dart.legacy(ui.Offset), dart.legacy(core.List$(dart.legacy(bar_chart_painter._GroupBarsPosition)))]),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(bar_chart_painter.BarChartPainter, I[18]);
  dart.setFieldSignature(bar_chart_painter.BarChartPainter, () => ({
    __proto__: dart.getFields(bar_chart_painter.BarChartPainter.__proto__),
    [_barPaint$]: dart.fieldType(dart.legacy(ui.Paint)),
    [_bgTouchTooltipPaint$0]: dart.fieldType(dart.legacy(ui.Paint)),
    [_groupBarsPosition]: dart.fieldType(dart.legacy(core.List$(dart.legacy(bar_chart_painter._GroupBarsPosition))))
  }));
  bar_chart_painter._GroupBarsPosition = class _GroupBarsPosition extends core.Object {};
  (bar_chart_painter._GroupBarsPosition.new = function(groupX, barsX) {
    this.groupX = groupX;
    this.barsX = barsX;
    ;
  }).prototype = bar_chart_painter._GroupBarsPosition.prototype;
  dart.addTypeTests(bar_chart_painter._GroupBarsPosition);
  dart.addTypeCaches(bar_chart_painter._GroupBarsPosition);
  dart.setLibraryUri(bar_chart_painter._GroupBarsPosition, I[18]);
  dart.setFieldSignature(bar_chart_painter._GroupBarsPosition, () => ({
    __proto__: dart.getFields(bar_chart_painter._GroupBarsPosition.__proto__),
    groupX: dart.finalFieldType(dart.legacy(core.double)),
    barsX: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double))))
  }));
  var data$3 = dart.privateName(bar_chart, "BarChart.data");
  bar_chart.BarChart = class BarChart extends implicit_animations.ImplicitlyAnimatedWidget {
    get data() {
      return this[data$3];
    }
    set data(value) {
      super.data = value;
    }
    createState() {
      return new bar_chart._BarChartState.new();
    }
  };
  (bar_chart.BarChart.new = function(data, opts) {
    let swapAnimationDuration = opts && 'swapAnimationDuration' in opts ? opts.swapAnimationDuration : C[2] || CT.C2;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[data$3] = data;
    bar_chart.BarChart.__proto__.new.call(this, {duration: swapAnimationDuration, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = bar_chart.BarChart.prototype;
  dart.addTypeTests(bar_chart.BarChart);
  dart.addTypeCaches(bar_chart.BarChart);
  dart.setMethodSignature(bar_chart.BarChart, () => ({
    __proto__: dart.getMethods(bar_chart.BarChart.__proto__),
    createState: dart.fnType(dart.legacy(bar_chart._BarChartState), [])
  }));
  dart.setLibraryUri(bar_chart.BarChart, I[19]);
  dart.setFieldSignature(bar_chart.BarChart, () => ({
    __proto__: dart.getFields(bar_chart.BarChart.__proto__),
    data: dart.finalFieldType(dart.legacy(bar_chart_data.BarChartData))
  }));
  var _barChartDataTween = dart.privateName(bar_chart, "_barChartDataTween");
  var _touchHandler$1 = dart.privateName(bar_chart, "_touchHandler");
  var _chartKey$1 = dart.privateName(bar_chart, "_chartKey");
  var _showingTouchedTooltips$ = dart.privateName(bar_chart, "_showingTouchedTooltips");
  var _getData$1 = dart.privateName(bar_chart, "_getData");
  var _getChartSize$1 = dart.privateName(bar_chart, "_getChartSize");
  var _canHandleTouch$1 = dart.privateName(bar_chart, "_canHandleTouch");
  var _withTouchedIndicators$0 = dart.privateName(bar_chart, "_withTouchedIndicators");
  var _handleBuiltInTouch$0 = dart.privateName(bar_chart, "_handleBuiltInTouch");
  bar_chart._BarChartState = class _BarChartState extends implicit_animations.AnimatedWidgetBaseState$(dart.legacy(bar_chart.BarChart)) {
    build(context) {
      let showingData = this[_getData$1]();
      let touchData = showingData.barTouchData;
      return new gesture_detector.GestureDetector.new({onLongPressStart: dart.fn(d => {
          let t2, t3, t2$;
          let chartSize = this[_getChartSize$1]();
          if (chartSize == null) {
            return;
          }
          let response = T$.BarTouchResponseL().as((t2 = this[_touchHandler$1], t2 == null ? null : t2.handleTouch(new touch_input.FlLongPressStart.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$1](response, touchData))) {
            t2$ = touchData;
            t3 = response;
            t2$.touchCallback(t3);
          }
        }, T$.LongPressStartDetailsLToNull()), onLongPressEnd: dart.fn(d => {
          let t2, t3, t2$;
          let chartSize = this[_getChartSize$1]();
          if (chartSize == null) {
            return;
          }
          let response = T$.BarTouchResponseL().as((t2 = this[_touchHandler$1], t2 == null ? null : t2.handleTouch(new touch_input.FlLongPressEnd.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$1](response, touchData))) {
            t2$ = touchData;
            t3 = response;
            t2$.touchCallback(t3);
          }
        }, T$.LongPressEndDetailsLToNull()), onLongPressMoveUpdate: dart.fn(d => {
          let t2, t3, t2$;
          let chartSize = this[_getChartSize$1]();
          if (chartSize == null) {
            return;
          }
          let response = T$.BarTouchResponseL().as((t2 = this[_touchHandler$1], t2 == null ? null : t2.handleTouch(new touch_input.FlLongPressMoveUpdate.new(d.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$1](response, touchData))) {
            t2$ = touchData;
            t3 = response;
            t2$.touchCallback(t3);
          }
        }, T$.LongPressMoveUpdateDetailsLToNull()), onPanCancel: dart.fn(() => {
          let t2, t3, t2$;
          let chartSize = this[_getChartSize$1]();
          if (chartSize == null) {
            return;
          }
          let response = T$.BarTouchResponseL().as((t2 = this[_touchHandler$1], t2 == null ? null : t2.handleTouch(new touch_input.FlPanEnd.new(ui.Offset.zero, C[3] || CT.C3), chartSize)));
          if (dart.test(this[_canHandleTouch$1](response, touchData))) {
            t2$ = touchData;
            t3 = response;
            t2$.touchCallback(t3);
          }
        }, T$.VoidToNull()), onPanEnd: dart.fn(details => {
          let t2, t3, t2$;
          let chartSize = this[_getChartSize$1]();
          if (chartSize == null) {
            return;
          }
          let response = T$.BarTouchResponseL().as((t2 = this[_touchHandler$1], t2 == null ? null : t2.handleTouch(new touch_input.FlPanEnd.new(ui.Offset.zero, details.velocity), chartSize)));
          if (dart.test(this[_canHandleTouch$1](response, touchData))) {
            t2$ = touchData;
            t3 = response;
            t2$.touchCallback(t3);
          }
        }, T$.DragEndDetailsLToNull()), onPanDown: dart.fn(details => {
          let t2, t3, t2$;
          let chartSize = this[_getChartSize$1]();
          if (chartSize == null) {
            return;
          }
          let response = T$.BarTouchResponseL().as((t2 = this[_touchHandler$1], t2 == null ? null : t2.handleTouch(new touch_input.FlPanStart.new(details.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$1](response, touchData))) {
            t2$ = touchData;
            t3 = response;
            t2$.touchCallback(t3);
          }
        }, T$.DragDownDetailsLToNull()), onPanUpdate: dart.fn(details => {
          let t2, t3, t2$;
          let chartSize = this[_getChartSize$1]();
          if (chartSize == null) {
            return;
          }
          let response = T$.BarTouchResponseL().as((t2 = this[_touchHandler$1], t2 == null ? null : t2.handleTouch(new touch_input.FlPanMoveUpdate.new(details.localPosition), chartSize)));
          if (dart.test(this[_canHandleTouch$1](response, touchData))) {
            t2$ = touchData;
            t3 = response;
            t2$.touchCallback(t3);
          }
        }, T$.DragUpdateDetailsLToNull()), child: new basic.CustomPaint.new({key: this[_chartKey$1], size: utils.getDefaultSize(media_query.MediaQuery.of(context).size), painter: new bar_chart_painter.BarChartPainter.new(this[_withTouchedIndicators$0](this[_barChartDataTween].evaluate(this.animation)), this[_withTouchedIndicators$0](showingData), dart.fn(touchHandler => {
            this.setState(dart.fn(() => {
              this[_touchHandler$1] = touchHandler;
            }, T$.VoidToNull()));
          }, T$.TouchHandlerLOfBaseTouchResponseLToNull()), {textScale: media_query.MediaQuery.of(context).textScaleFactor}), $creationLocationd_0dea112b090073317d4: C[153] || CT.C153}), $creationLocationd_0dea112b090073317d4: C[158] || CT.C158});
    }
    [_canHandleTouch$1](response, touchData) {
      return response != null && touchData != null && touchData.touchCallback != null;
    }
    [_withTouchedIndicators$0](barChartData) {
      if (barChartData == null) {
        return barChartData;
      }
      if (!dart.test(barChartData.barTouchData.enabled) || !dart.test(barChartData.barTouchData.handleBuiltInTouches)) {
        return barChartData;
      }
      let newGroups = T$.JSArrayOfBarChartGroupDataL().of([]);
      for (let i = 0; i < dart.notNull(barChartData.barGroups[$length]); i = i + 1) {
        let group = barChartData.barGroups[$_get](i);
        newGroups[$add](group.copyWith({showingTooltipIndicators: this[_showingTouchedTooltips$][$_get](i)}));
      }
      return barChartData.copyWith({barGroups: newGroups});
    }
    [_getChartSize$1]() {
      let t2;
      let containerRenderBox = T$.RenderBoxL().as((t2 = this[_chartKey$1].currentContext, t2 == null ? null : t2.findRenderObject()));
      if (containerRenderBox != null && dart.test(containerRenderBox.hasSize)) {
        return containerRenderBox.size;
      }
      return null;
    }
    [_getData$1]() {
      let barTouchData = this.widget.data.barTouchData;
      if (dart.test(barTouchData.enabled) && dart.test(barTouchData.handleBuiltInTouches)) {
        return this.widget.data.copyWith({barTouchData: this.widget.data.barTouchData.copyWith({touchCallback: dart.bind(this, _handleBuiltInTouch$0)})});
      }
      return this.widget.data;
    }
    [_handleBuiltInTouch$0](touchResponse) {
      let t3, t2;
      if (this.widget.data.barTouchData.touchCallback != null) {
        t2 = this.widget.data.barTouchData;
        t3 = touchResponse;
        t2.touchCallback(t3);
      }
      if (T$.FlPanStartL().is(touchResponse.touchInput) || T$.FlPanMoveUpdateL().is(touchResponse.touchInput) || T$.FlLongPressStartL().is(touchResponse.touchInput) || T$.FlLongPressMoveUpdateL().is(touchResponse.touchInput)) {
        this.setState(dart.fn(() => {
          if (touchResponse.spot == null) {
            this[_showingTouchedTooltips$][$clear]();
            return;
          }
          let groupIndex = touchResponse.spot.touchedBarGroupIndex;
          let rodIndex = touchResponse.spot.touchedRodDataIndex;
          this[_showingTouchedTooltips$][$clear]();
          this[_showingTouchedTooltips$][$_set](groupIndex, T$.JSArrayOfintL().of([rodIndex]));
        }, T$.VoidToNull()));
      } else {
        this.setState(dart.fn(() => {
          this[_showingTouchedTooltips$][$clear]();
        }, T$.VoidToNull()));
      }
    }
    forEachTween(visitor) {
      this[_barChartDataTween] = T$.BarChartDataTweenL().as(visitor(this[_barChartDataTween], this.widget.data, dart.fn(value => new bar_chart_data.BarChartDataTween.new({begin: T$.BarChartDataL().as(value)}), T$.dynamicToBarChartDataTweenL())));
    }
  };
  (bar_chart._BarChartState.new = function() {
    this[_barChartDataTween] = null;
    this[_touchHandler$1] = null;
    this[_chartKey$1] = T$.GlobalKeyOfStateLOfStatefulWidgetL().new();
    this[_showingTouchedTooltips$] = new (T$.IdentityMapOfintL$ListLOfintL()).new();
    bar_chart._BarChartState.__proto__.new.call(this);
    ;
  }).prototype = bar_chart._BarChartState.prototype;
  dart.addTypeTests(bar_chart._BarChartState);
  dart.addTypeCaches(bar_chart._BarChartState);
  dart.setMethodSignature(bar_chart._BarChartState, () => ({
    __proto__: dart.getMethods(bar_chart._BarChartState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_canHandleTouch$1]: dart.fnType(dart.legacy(core.bool), [dart.legacy(bar_chart_data.BarTouchResponse), dart.legacy(bar_chart_data.BarTouchData)]),
    [_withTouchedIndicators$0]: dart.fnType(dart.legacy(bar_chart_data.BarChartData), [dart.legacy(bar_chart_data.BarChartData)]),
    [_getChartSize$1]: dart.fnType(dart.legacy(ui.Size), []),
    [_getData$1]: dart.fnType(dart.legacy(bar_chart_data.BarChartData), []),
    [_handleBuiltInTouch$0]: dart.fnType(dart.void, [dart.legacy(bar_chart_data.BarTouchResponse)]),
    forEachTween: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(tween.Tween), [dart.legacy(tween.Tween), dart.dynamic, dart.legacy(dart.fnType(dart.legacy(tween.Tween), [dart.dynamic]))]))])
  }));
  dart.setLibraryUri(bar_chart._BarChartState, I[19]);
  dart.setFieldSignature(bar_chart._BarChartState, () => ({
    __proto__: dart.getFields(bar_chart._BarChartState.__proto__),
    [_barChartDataTween]: dart.fieldType(dart.legacy(bar_chart_data.BarChartDataTween)),
    [_touchHandler$1]: dart.fieldType(dart.legacy(base_chart_painter.TouchHandler$(dart.legacy(base_chart_data.BaseTouchResponse)))),
    [_chartKey$1]: dart.finalFieldType(dart.legacy(framework.GlobalKey$(framework.State$(framework.StatefulWidget)))),
    [_showingTouchedTooltips$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(core.int))))))
  }));
  dart.trackLibraries("packages/fl_chart/src/chart/scatter_chart/scatter_chart_painter.dart", {
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_painter.dart": scatter_chart_painter,
    "package:fl_chart/src/chart/scatter_chart/scatter_chart.dart": scatter_chart,
    "package:fl_chart/src/chart/pie_chart/pie_chart_data.dart": pie_chart_data,
    "package:fl_chart/src/chart/pie_chart/pie_chart_painter.dart": pie_chart_painter,
    "package:fl_chart/src/chart/pie_chart/pie_chart.dart": pie_chart,
    "package:fl_chart/src/chart/scatter_chart/scatter_chart_data.dart": scatter_chart_data,
    "package:fl_chart/src/utils/lerp.dart": lerp,
    "package:fl_chart/src/chart/line_chart/line_chart.dart": line_chart,
    "package:fl_chart/src/chart/line_chart/line_chart_data.dart": line_chart_data,
    "package:fl_chart/src/extensions/canvas_extension.dart": canvas_extension,
    "package:fl_chart/src/chart/line_chart/line_chart_painter.dart": line_chart_painter,
    "package:fl_chart/src/chart/base/base_chart/base_chart_data.dart": base_chart_data,
    "package:fl_chart/src/utils/canvas_wrapper.dart": canvas_wrapper,
    "package:fl_chart/src/chart/base/base_chart/base_chart_painter.dart": base_chart_painter,
    "package:fl_chart/src/chart/base/axis_chart/axis_chart_painter.dart": axis_chart_painter,
    "package:fl_chart/src/chart/base/axis_chart/axis_chart_data.dart": axis_chart_data,
    "package:fl_chart/src/chart/bar_chart/bar_chart_data.dart": bar_chart_data,
    "package:fl_chart/src/chart/bar_chart/bar_chart_painter.dart": bar_chart_painter,
    "package:fl_chart/src/chart/bar_chart/bar_chart.dart": bar_chart,
    "package:fl_chart/fl_chart.dart": fl_chart
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../base/base_chart/base_chart_painter.dart","../base/axis_chart/axis_chart_painter.dart","../base/base_chart/base_chart_data.dart","../base/axis_chart/axis_chart_data.dart","scatter_chart_data.dart","scatter_chart_painter.dart","scatter_chart.dart","../pie_chart/pie_chart_data.dart","../pie_chart/pie_chart_painter.dart","../pie_chart/pie_chart.dart","../../utils/lerp.dart","../line_chart/line_chart.dart","../line_chart/line_chart_data.dart","../../extensions/canvas_extension.dart","../line_chart/line_chart_painter.dart","../../utils/canvas_wrapper.dart","../bar_chart/bar_chart_data.dart","../bar_chart/bar_chart_painter.dart","../bar_chart/bar_chart.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","file":"../../../../../../../../../../../packages/fl_chart/src/chart/scatter_chart/scatter_chart_painter.dart.lib.js"}');
  // Exports:
  return {
    src__chart__scatter_chart__scatter_chart_painter: scatter_chart_painter,
    src__chart__scatter_chart__scatter_chart: scatter_chart,
    src__chart__pie_chart__pie_chart_data: pie_chart_data,
    src__chart__pie_chart__pie_chart_painter: pie_chart_painter,
    src__chart__pie_chart__pie_chart: pie_chart,
    src__chart__scatter_chart__scatter_chart_data: scatter_chart_data,
    src__utils__lerp: lerp,
    src__chart__line_chart__line_chart: line_chart,
    src__chart__line_chart__line_chart_data: line_chart_data,
    src__extensions__canvas_extension: canvas_extension,
    src__chart__line_chart__line_chart_painter: line_chart_painter,
    src__chart__base__base_chart__base_chart_data: base_chart_data,
    src__utils__canvas_wrapper: canvas_wrapper,
    src__chart__base__base_chart__base_chart_painter: base_chart_painter,
    src__chart__base__axis_chart__axis_chart_painter: axis_chart_painter,
    src__chart__base__axis_chart__axis_chart_data: axis_chart_data,
    src__chart__bar_chart__bar_chart_data: bar_chart_data,
    src__chart__bar_chart__bar_chart_painter: bar_chart_painter,
    src__chart__bar_chart__bar_chart: bar_chart,
    fl_chart: fl_chart
  };
}));

//# sourceMappingURL=scatter_chart_painter.dart.lib.js.map
