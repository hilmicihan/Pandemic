define(['dart_sdk', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/_network_image_web.dart'], (function load__packages__flutter_image__network_dart(dart_sdk, packages__flutter__src__foundation__synchronous_future$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting___network_image_web$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const typed_data = dart_sdk.typed_data;
  const _http = dart_sdk._http;
  const _native_typed_data = dart_sdk._native_typed_data;
  const io = dart_sdk.io;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  var network = Object.create(dart.library);
  var $lengthInBytes = dartx.lengthInBytes;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $toString = dartx.toString;
  var $buffer = dartx.buffer;
  var $length = dartx.length;
  var $setAll = dartx.setAll;
  var $setRange = dartx.setRange;
  var $contains = dartx.contains;
  dart._checkModuleNullSafetyMode(false);
  var T = Object.create({
    FetchInstructionsL: () => (T.FetchInstructionsL = dart.constFn(dart.legacy(network.FetchInstructions)))(),
    FutureOfFetchInstructionsL: () => (T.FutureOfFetchInstructionsL = dart.constFn(async.Future$(T.FetchInstructionsL())))(),
    FutureLOfFetchInstructionsL: () => (T.FutureLOfFetchInstructionsL = dart.constFn(dart.legacy(T.FutureOfFetchInstructionsL())))(),
    UriL: () => (T.UriL = dart.constFn(dart.legacy(core.Uri)))(),
    FetchFailureL: () => (T.FetchFailureL = dart.constFn(dart.legacy(network.FetchFailure)))(),
    UriLAndFetchFailureLToFutureLOfFetchInstructionsL: () => (T.UriLAndFetchFailureLToFutureLOfFetchInstructionsL = dart.constFn(dart.fnType(T.FutureLOfFetchInstructionsL(), [T.UriL(), T.FetchFailureL()])))(),
    NetworkImageWithRetryL: () => (T.NetworkImageWithRetryL = dart.constFn(dart.legacy(network.NetworkImageWithRetry)))(),
    SynchronousFutureOfNetworkImageWithRetryL: () => (T.SynchronousFutureOfNetworkImageWithRetryL = dart.constFn(synchronous_future.SynchronousFuture$(T.NetworkImageWithRetryL())))(),
    DiagnosticsNodeL: () => (T.DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))(),
    SyncIterableOfDiagnosticsNodeL: () => (T.SyncIterableOfDiagnosticsNodeL = dart.constFn(_js_helper.SyncIterable$(T.DiagnosticsNodeL())))(),
    IterableOfDiagnosticsNodeL: () => (T.IterableOfDiagnosticsNodeL = dart.constFn(core.Iterable$(T.DiagnosticsNodeL())))(),
    IterableLOfDiagnosticsNodeL: () => (T.IterableLOfDiagnosticsNodeL = dart.constFn(dart.legacy(T.IterableOfDiagnosticsNodeL())))(),
    VoidToIterableLOfDiagnosticsNodeL: () => (T.VoidToIterableLOfDiagnosticsNodeL = dart.constFn(dart.fnType(T.IterableLOfDiagnosticsNodeL(), [])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    VoidToboolL: () => (T.VoidToboolL = dart.constFn(dart.fnType(T.boolL(), [])))(),
    _Uint8ListBuilderL: () => (T._Uint8ListBuilderL = dart.constFn(dart.legacy(network._Uint8ListBuilder)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    _Uint8ListBuilderLAndListLOfintLTo_Uint8ListBuilderL: () => (T._Uint8ListBuilderLAndListLOfintLTo_Uint8ListBuilderL = dart.constFn(dart.fnType(T._Uint8ListBuilderL(), [T._Uint8ListBuilderL(), T.ListLOfintL()])))(),
    ImageInfoL: () => (T.ImageInfoL = dart.constFn(dart.legacy(image_stream.ImageInfo)))(),
    intLToboolL: () => (T.intLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.intL()])))(),
    SocketExceptionL: () => (T.SocketExceptionL = dart.constFn(dart.legacy(io.SocketException)))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))()
  });
  const CT = Object.create(null);
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(network.NetworkImageWithRetry.defaultFetchStrategy, T.UriLAndFetchFailureLToFutureLOfFetchInstructionsL());
    },
    get C2() {
      return C[2] = dart.fn(network.FetchStrategyBuilder.defaultTransientHttpStatusCodePredicate, T.intLToboolL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 1000000
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 60000000
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 30000000
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: network.FetchStrategyBuilder.prototype,
        [FetchStrategyBuilder_transientHttpStatusCodePredicate]: C[2] || CT.C2,
        [FetchStrategyBuilder_exponentialBackoffMultiplier]: 2,
        [FetchStrategyBuilder_initialPauseBetweenRetries]: C[3] || CT.C3,
        [FetchStrategyBuilder_maxAttempts]: 5,
        [FetchStrategyBuilder_totalFetchTimeout]: C[4] || CT.C4,
        [FetchStrategyBuilder_timeout]: C[5] || CT.C5
      });
    },
    get C6() {
      return C[6] = dart.constList([0, 408, 500, 502, 503, 504], T.intL());
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_image-3.0.0/lib/network.dart",
    "package:flutter_image/network.dart"
  ];
  var url$ = dart.privateName(network, "NetworkImageWithRetry.url");
  var scale$ = dart.privateName(network, "NetworkImageWithRetry.scale");
  var fetchStrategy$ = dart.privateName(network, "NetworkImageWithRetry.fetchStrategy");
  var _loadWithRetry = dart.privateName(network, "_loadWithRetry");
  var _debugCheckInstructions = dart.privateName(network, "_debugCheckInstructions");
  var FetchStrategyBuilder_transientHttpStatusCodePredicate = dart.privateName(network, "FetchStrategyBuilder.transientHttpStatusCodePredicate");
  var FetchStrategyBuilder_exponentialBackoffMultiplier = dart.privateName(network, "FetchStrategyBuilder.exponentialBackoffMultiplier");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var FetchStrategyBuilder_initialPauseBetweenRetries = dart.privateName(network, "FetchStrategyBuilder.initialPauseBetweenRetries");
  var FetchStrategyBuilder_maxAttempts = dart.privateName(network, "FetchStrategyBuilder.maxAttempts");
  var FetchStrategyBuilder_totalFetchTimeout = dart.privateName(network, "FetchStrategyBuilder.totalFetchTimeout");
  var FetchStrategyBuilder_timeout = dart.privateName(network, "FetchStrategyBuilder.timeout");
  network.NetworkImageWithRetry = class NetworkImageWithRetry extends image_provider.ImageProvider {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      super.scale = value;
    }
    get fetchStrategy() {
      return this[fetchStrategy$];
    }
    set fetchStrategy(value) {
      super.fetchStrategy = value;
    }
    static defaultFetchStrategy(uri, failure) {
      return network.NetworkImageWithRetry._defaultFetchStrategyFunction(uri, failure);
    }
    obtainKey(configuration) {
      return new (T.SynchronousFutureOfNetworkImageWithRetryL()).new(this);
    }
    load(key, decode) {
      T.NetworkImageWithRetryL().as(key);
      return new image_stream.OneFrameImageStreamCompleter.new(this[_loadWithRetry](key, decode), {informationCollector: dart.fn(() => new (T.SyncIterableOfDiagnosticsNodeL()).new((function*() {
          yield new assertions.ErrorDescription.new("Image provider: " + dart.str(this));
          yield new assertions.ErrorDescription.new("Image key: " + dart.str(key));
        }).bind(this)), T.VoidToIterableLOfDiagnosticsNodeL())});
    }
    [_debugCheckInstructions](instructions) {
      if (!dart.test(dart.fn(() => {
        if (instructions == null) {
          if (dart.equals(this.fetchStrategy, C[0] || CT.C0)) {
            dart.throw(new core.StateError.new("The default FetchStrategy returned null FetchInstructions. This\n" + "is likely a bug in " + dart.str(this.runtimeType) + ". Please file a bug at\n" + "https://github.com/flutter/flutter/issues."));
          } else {
            dart.throw(new core.StateError.new("The custom FetchStrategy used to fetch " + dart.str(this.url) + " returned null\n" + "FetchInstructions. FetchInstructions must never be null, but\n" + "instead instruct to either make another fetch attempt or give up."));
          }
        }
        return true;
      }, T.VoidToboolL())())) dart.assertFailed(null, I[0], 84, 12, "() {\n      if (instructions == null) {\n        if (fetchStrategy == defaultFetchStrategy) {\n          throw StateError(\n            'The default FetchStrategy returned null FetchInstructions. This\\n'\n            'is likely a bug in $runtimeType. Please file a bug at\\n'\n            'https://github.com/flutter/flutter/issues.'\n          );\n        } else {\n          throw StateError(\n            'The custom FetchStrategy used to fetch $url returned null\\n'\n            'FetchInstructions. FetchInstructions must never be null, but\\n'\n            'instead instruct to either make another fetch attempt or give up.'\n          );\n        }\n      }\n      return true;\n    }()");
    }
    [_loadWithRetry](key, decode) {
      return async.async(T.ImageInfoL(), (function* _loadWithRetry() {
        let t0, t1, t0$, t1$, t2, t1$0;
        if (!dart.equals(key, this)) dart.assertFailed(null, I[0], 105, 12, "key == this");
        let stopwatch = (t0 = new core.Stopwatch.new(), (() => {
          t0.start();
          return t0;
        })());
        let resolved = core.Uri.base.resolve(key.url);
        let instructions = (yield (t0$ = resolved, t1 = null, this.fetchStrategy(t0$, t1)));
        this[_debugCheckInstructions](instructions);
        let attemptCount = 0;
        let lastFailure = null;
        while (!dart.test(instructions.shouldGiveUp)) {
          attemptCount = attemptCount + 1;
          let request = null;
          try {
            request = (yield network.NetworkImageWithRetry._client.getUrl(instructions.uri).timeout(instructions.timeout));
            let response = (yield request.close().timeout(instructions.timeout));
            if (response == null || response.statusCode !== 200) {
              dart.throw(new network.FetchFailure.__({totalDuration: stopwatch.elapsed, attemptCount: attemptCount, httpStatusCode: response.statusCode}));
            }
            let builder = (yield response.fold(T._Uint8ListBuilderL(), new network._Uint8ListBuilder.new(), dart.fn((buffer, bytes) => {
              let t0;
              t0 = buffer;
              return (() => {
                t0.add(bytes);
                return t0;
              })();
            }, T._Uint8ListBuilderLAndListLOfintLTo_Uint8ListBuilderL())).timeout(instructions.timeout));
            let bytes = builder.data;
            if (bytes[$lengthInBytes] === 0) return null;
            let codec = (yield decode(bytes));
            let image = (yield codec.getNextFrame()).image;
            if (image == null) return null;
            return new image_stream.ImageInfo.new({image: image, scale: key.scale});
          } catch (e) {
            let error = dart.getThrown(e);
            t1$ = request;
            t1$ == null ? null : t1$.close();
            lastFailure = T.FetchFailureL().is(error) ? error : new network.FetchFailure.__({totalDuration: stopwatch.elapsed, attemptCount: attemptCount, originalException: error});
            instructions = (yield (t1$0 = instructions.uri, t2 = lastFailure, this.fetchStrategy(t1$0, t2)));
            this[_debugCheckInstructions](instructions);
          }
        }
        if (instructions.alternativeImage != null) return instructions.alternativeImage;
        if (!(lastFailure != null)) dart.assertFailed(null, I[0], 165, 12, "lastFailure != null");
        assertions.FlutterError.onError(new assertions.FlutterErrorDetails.new({exception: lastFailure, library: "package:flutter_image", context: new assertions.ErrorDescription.new(dart.str(this.runtimeType) + " failed to load " + dart.str(instructions.uri))}));
        return null;
      }).bind(this));
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) return false;
      let typedOther = T.NetworkImageWithRetryL().as(other);
      return this.url == typedOther.url && this.scale == typedOther.scale;
    }
    get hashCode() {
      return ui.hashValues(this.url, this.scale);
    }
    toString() {
      return dart.str(this.runtimeType) + "(\"" + dart.str(this.url) + "\", scale: " + dart.str(this.scale) + ")";
    }
  };
  (network.NetworkImageWithRetry.new = function(url, opts) {
    let scale = opts && 'scale' in opts ? opts.scale : 1;
    let fetchStrategy = opts && 'fetchStrategy' in opts ? opts.fetchStrategy : C[0] || CT.C0;
    this[url$] = url;
    this[scale$] = scale;
    this[fetchStrategy$] = fetchStrategy;
    if (!(url != null)) dart.assertFailed(null, I[0], 33, 16, "url != null");
    if (!(scale != null)) dart.assertFailed(null, I[0], 34, 16, "scale != null");
    if (!(fetchStrategy != null)) dart.assertFailed(null, I[0], 35, 16, "fetchStrategy != null");
    network.NetworkImageWithRetry.__proto__.new.call(this);
    ;
  }).prototype = network.NetworkImageWithRetry.prototype;
  dart.addTypeTests(network.NetworkImageWithRetry);
  dart.addTypeCaches(network.NetworkImageWithRetry);
  dart.setMethodSignature(network.NetworkImageWithRetry, () => ({
    __proto__: dart.getMethods(network.NetworkImageWithRetry.__proto__),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(network.NetworkImageWithRetry))), [dart.legacy(image_provider.ImageConfiguration)]),
    load: dart.fnType(dart.legacy(image_stream.ImageStreamCompleter), [dart.legacy(core.Object), dart.legacy(dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {}))]),
    [_debugCheckInstructions]: dart.fnType(dart.void, [dart.legacy(network.FetchInstructions)]),
    [_loadWithRetry]: dart.fnType(dart.legacy(async.Future$(dart.legacy(image_stream.ImageInfo))), [dart.legacy(network.NetworkImageWithRetry), dart.legacy(dart.fnType(async.Future$(ui.Codec), [typed_data.Uint8List], {allowUpscaling: core.bool, cacheHeight: dart.nullable(core.int), cacheWidth: dart.nullable(core.int)}, {}))]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(network.NetworkImageWithRetry, () => ({
    __proto__: dart.getGetters(network.NetworkImageWithRetry.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(network.NetworkImageWithRetry, I[1]);
  dart.setFieldSignature(network.NetworkImageWithRetry, () => ({
    __proto__: dart.getFields(network.NetworkImageWithRetry.__proto__),
    url: dart.finalFieldType(dart.legacy(core.String)),
    scale: dart.finalFieldType(dart.legacy(core.double)),
    fetchStrategy: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(network.FetchInstructions))), [dart.legacy(core.Uri), dart.legacy(network.FetchFailure)])))
  }));
  dart.defineExtensionMethods(network.NetworkImageWithRetry, ['_equals', 'toString']);
  dart.defineExtensionAccessors(network.NetworkImageWithRetry, ['hashCode']);
  dart.defineLazy(network.NetworkImageWithRetry, {
    /*network.NetworkImageWithRetry._client*/get _client() {
      return _http.HttpClient.new();
    },
    /*network.NetworkImageWithRetry._defaultFetchStrategyFunction*/get _defaultFetchStrategyFunction() {
      return (C[1] || CT.C1).build();
    }
  }, true);
  var shouldGiveUp = dart.privateName(network, "FetchInstructions.shouldGiveUp");
  var timeout$ = dart.privateName(network, "FetchInstructions.timeout");
  var uri$ = dart.privateName(network, "FetchInstructions.uri");
  var alternativeImage$ = dart.privateName(network, "FetchInstructions.alternativeImage");
  network.FetchInstructions = class FetchInstructions extends core.Object {
    get shouldGiveUp() {
      return this[shouldGiveUp];
    }
    set shouldGiveUp(value) {
      super.shouldGiveUp = value;
    }
    get timeout() {
      return this[timeout$];
    }
    set timeout(value) {
      super.timeout = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    get alternativeImage() {
      return this[alternativeImage$];
    }
    set alternativeImage(value) {
      super.alternativeImage = value;
    }
    toString() {
      return dart.str(this.runtimeType) + "(\n" + "  shouldGiveUp: " + dart.str(this.shouldGiveUp) + "\n" + "  timeout: " + dart.str(this.timeout) + "\n" + "  uri: " + dart.str(this.uri) + "\n" + "  alternativeImage?: " + (this.alternativeImage != null ? "yes" : "no") + "\n" + ")";
    }
  };
  (network.FetchInstructions.giveUp = function(opts) {
    let uri = opts && 'uri' in opts ? opts.uri : null;
    let alternativeImage = opts && 'alternativeImage' in opts ? opts.alternativeImage : null;
    this[uri$] = uri;
    this[alternativeImage$] = alternativeImage;
    this[shouldGiveUp] = true;
    this[timeout$] = null;
    ;
  }).prototype = network.FetchInstructions.prototype;
  (network.FetchInstructions.attempt = function(opts) {
    let uri = opts && 'uri' in opts ? opts.uri : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    this[uri$] = uri;
    this[timeout$] = timeout;
    this[shouldGiveUp] = false;
    this[alternativeImage$] = null;
    ;
  }).prototype = network.FetchInstructions.prototype;
  dart.addTypeTests(network.FetchInstructions);
  dart.addTypeCaches(network.FetchInstructions);
  dart.setMethodSignature(network.FetchInstructions, () => ({
    __proto__: dart.getMethods(network.FetchInstructions.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(network.FetchInstructions, I[1]);
  dart.setFieldSignature(network.FetchInstructions, () => ({
    __proto__: dart.getFields(network.FetchInstructions.__proto__),
    shouldGiveUp: dart.finalFieldType(dart.legacy(core.bool)),
    timeout: dart.finalFieldType(dart.legacy(core.Duration)),
    uri: dart.finalFieldType(dart.legacy(core.Uri)),
    alternativeImage: dart.finalFieldType(dart.legacy(async.Future$(dart.legacy(image_stream.ImageInfo))))
  }));
  dart.defineExtensionMethods(network.FetchInstructions, ['toString']);
  var totalDuration$ = dart.privateName(network, "FetchFailure.totalDuration");
  var attemptCount$ = dart.privateName(network, "FetchFailure.attemptCount");
  var httpStatusCode$ = dart.privateName(network, "FetchFailure.httpStatusCode");
  var originalException$ = dart.privateName(network, "FetchFailure.originalException");
  network.FetchFailure = class FetchFailure extends core.Object {
    get totalDuration() {
      return this[totalDuration$];
    }
    set totalDuration(value) {
      super.totalDuration = value;
    }
    get attemptCount() {
      return this[attemptCount$];
    }
    set attemptCount(value) {
      super.attemptCount = value;
    }
    get httpStatusCode() {
      return this[httpStatusCode$];
    }
    set httpStatusCode(value) {
      super.httpStatusCode = value;
    }
    get originalException() {
      return this[originalException$];
    }
    set originalException(value) {
      super.originalException = value;
    }
    toString() {
      return dart.str(this.runtimeType) + "(\n" + "  attemptCount: " + dart.str(this.attemptCount) + "\n" + "  httpStatusCode: " + dart.str(this.httpStatusCode) + "\n" + "  totalDuration: " + dart.str(this.totalDuration) + "\n" + "  originalException: " + dart.str(this.originalException) + "\n" + ")";
    }
  };
  (network.FetchFailure.__ = function(opts) {
    let totalDuration = opts && 'totalDuration' in opts ? opts.totalDuration : null;
    let attemptCount = opts && 'attemptCount' in opts ? opts.attemptCount : null;
    let httpStatusCode = opts && 'httpStatusCode' in opts ? opts.httpStatusCode : null;
    let originalException = opts && 'originalException' in opts ? opts.originalException : null;
    this[totalDuration$] = totalDuration;
    this[attemptCount$] = attemptCount;
    this[httpStatusCode$] = httpStatusCode;
    this[originalException$] = originalException;
    if (!(totalDuration != null)) dart.assertFailed(null, I[0], 265, 15, "totalDuration != null");
    if (!(dart.notNull(attemptCount) > 0)) dart.assertFailed(null, I[0], 266, 15, "attemptCount > 0");
    ;
  }).prototype = network.FetchFailure.prototype;
  dart.addTypeTests(network.FetchFailure);
  dart.addTypeCaches(network.FetchFailure);
  network.FetchFailure[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(network.FetchFailure, () => ({
    __proto__: dart.getMethods(network.FetchFailure.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(network.FetchFailure, I[1]);
  dart.setFieldSignature(network.FetchFailure, () => ({
    __proto__: dart.getFields(network.FetchFailure.__proto__),
    totalDuration: dart.finalFieldType(dart.legacy(core.Duration)),
    attemptCount: dart.finalFieldType(dart.legacy(core.int)),
    httpStatusCode: dart.finalFieldType(dart.legacy(core.int)),
    originalException: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(network.FetchFailure, ['toString']);
  var _usedLength = dart.privateName(network, "_usedLength");
  var _buffer = dart.privateName(network, "_buffer");
  var _ensureCanAdd = dart.privateName(network, "_ensureCanAdd");
  network._Uint8ListBuilder = class _Uint8ListBuilder extends core.Object {
    get data() {
      return typed_data.Uint8List.view(this[_buffer][$buffer], 0, this[_usedLength]);
    }
    add(bytes) {
      this[_ensureCanAdd](bytes[$length]);
      this[_buffer][$setAll](this[_usedLength], bytes);
      this[_usedLength] = dart.notNull(this[_usedLength]) + dart.notNull(bytes[$length]);
    }
    [_ensureCanAdd](byteCount) {
      let totalSpaceNeeded = dart.notNull(this[_usedLength]) + dart.notNull(byteCount);
      let newLength = this[_buffer][$length];
      while (totalSpaceNeeded > dart.notNull(newLength)) {
        newLength = dart.notNull(newLength) * 2;
      }
      if (newLength != this[_buffer][$length]) {
        let newBuffer = _native_typed_data.NativeUint8List.new(newLength);
        newBuffer[$setAll](0, this[_buffer]);
        newBuffer[$setRange](0, this[_usedLength], this[_buffer]);
        this[_buffer] = newBuffer;
      }
    }
  };
  (network._Uint8ListBuilder.new = function() {
    this[_usedLength] = 0;
    this[_buffer] = _native_typed_data.NativeUint8List.new(100000);
    ;
  }).prototype = network._Uint8ListBuilder.prototype;
  dart.addTypeTests(network._Uint8ListBuilder);
  dart.addTypeCaches(network._Uint8ListBuilder);
  dart.setMethodSignature(network._Uint8ListBuilder, () => ({
    __proto__: dart.getMethods(network._Uint8ListBuilder.__proto__),
    add: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.int)))]),
    [_ensureCanAdd]: dart.fnType(dart.void, [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(network._Uint8ListBuilder, () => ({
    __proto__: dart.getGetters(network._Uint8ListBuilder.__proto__),
    data: dart.legacy(typed_data.Uint8List)
  }));
  dart.setLibraryUri(network._Uint8ListBuilder, I[1]);
  dart.setFieldSignature(network._Uint8ListBuilder, () => ({
    __proto__: dart.getFields(network._Uint8ListBuilder.__proto__),
    [_usedLength]: dart.fieldType(dart.legacy(core.int)),
    [_buffer]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  dart.defineLazy(network._Uint8ListBuilder, {
    /*network._Uint8ListBuilder._kInitialSize*/get _kInitialSize() {
      return 100000;
    }
  }, true);
  const timeout$0 = FetchStrategyBuilder_timeout;
  const totalFetchTimeout$ = FetchStrategyBuilder_totalFetchTimeout;
  const maxAttempts$ = FetchStrategyBuilder_maxAttempts;
  const initialPauseBetweenRetries$ = FetchStrategyBuilder_initialPauseBetweenRetries;
  const exponentialBackoffMultiplier$ = FetchStrategyBuilder_exponentialBackoffMultiplier;
  const transientHttpStatusCodePredicate$ = FetchStrategyBuilder_transientHttpStatusCodePredicate;
  network.FetchStrategyBuilder = class FetchStrategyBuilder extends core.Object {
    get timeout() {
      return this[timeout$0];
    }
    set timeout(value) {
      super.timeout = value;
    }
    get totalFetchTimeout() {
      return this[totalFetchTimeout$];
    }
    set totalFetchTimeout(value) {
      super.totalFetchTimeout = value;
    }
    get maxAttempts() {
      return this[maxAttempts$];
    }
    set maxAttempts(value) {
      super.maxAttempts = value;
    }
    get initialPauseBetweenRetries() {
      return this[initialPauseBetweenRetries$];
    }
    set initialPauseBetweenRetries(value) {
      super.initialPauseBetweenRetries = value;
    }
    get exponentialBackoffMultiplier() {
      return this[exponentialBackoffMultiplier$];
    }
    set exponentialBackoffMultiplier(value) {
      super.exponentialBackoffMultiplier = value;
    }
    get transientHttpStatusCodePredicate() {
      return this[transientHttpStatusCodePredicate$];
    }
    set transientHttpStatusCodePredicate(value) {
      super.transientHttpStatusCodePredicate = value;
    }
    static defaultTransientHttpStatusCodePredicate(statusCode) {
      return network.FetchStrategyBuilder.defaultTransientHttpStatusCodes[$contains](statusCode);
    }
    build() {
      return dart.fn((uri, failure) => async.async(T.FetchInstructionsL(), (function*() {
        let t1;
        if (failure == null) {
          return new network.FetchInstructions.attempt({uri: uri, timeout: this.timeout});
        }
        let isRetriableFailure = dart.test((t1 = failure.httpStatusCode, this.transientHttpStatusCodePredicate(t1))) || T.SocketExceptionL().is(failure.originalException);
        if (!isRetriableFailure || dart.test(failure.totalDuration['>'](this.totalFetchTimeout)) || dart.notNull(failure.attemptCount) > dart.notNull(this.maxAttempts)) {
          return new network.FetchInstructions.giveUp({uri: uri});
        }
        let pauseBetweenRetries = this.initialPauseBetweenRetries['*'](math.pow(this.exponentialBackoffMultiplier, dart.notNull(failure.attemptCount) - 1));
        yield T.FutureOfvoid().delayed(pauseBetweenRetries);
        return new network.FetchInstructions.attempt({uri: uri, timeout: this.timeout});
      }).bind(this)), T.UriLAndFetchFailureLToFutureLOfFetchInstructionsL());
    }
  };
  (network.FetchStrategyBuilder.new = function(opts) {
    let timeout = opts && 'timeout' in opts ? opts.timeout : C[5] || CT.C5;
    let totalFetchTimeout = opts && 'totalFetchTimeout' in opts ? opts.totalFetchTimeout : C[4] || CT.C4;
    let maxAttempts = opts && 'maxAttempts' in opts ? opts.maxAttempts : 5;
    let initialPauseBetweenRetries = opts && 'initialPauseBetweenRetries' in opts ? opts.initialPauseBetweenRetries : C[3] || CT.C3;
    let exponentialBackoffMultiplier = opts && 'exponentialBackoffMultiplier' in opts ? opts.exponentialBackoffMultiplier : 2;
    let transientHttpStatusCodePredicate = opts && 'transientHttpStatusCodePredicate' in opts ? opts.transientHttpStatusCodePredicate : C[2] || CT.C2;
    this[timeout$0] = timeout;
    this[totalFetchTimeout$] = totalFetchTimeout;
    this[maxAttempts$] = maxAttempts;
    this[initialPauseBetweenRetries$] = initialPauseBetweenRetries;
    this[exponentialBackoffMultiplier$] = exponentialBackoffMultiplier;
    this[transientHttpStatusCodePredicate$] = transientHttpStatusCodePredicate;
    if (!(timeout != null)) dart.assertFailed(null, I[0], 348, 15, "timeout != null");
    if (!(totalFetchTimeout != null)) dart.assertFailed(null, I[0], 349, 15, "totalFetchTimeout != null");
    if (!(maxAttempts != null)) dart.assertFailed(null, I[0], 350, 15, "maxAttempts != null");
    if (!(initialPauseBetweenRetries != null)) dart.assertFailed(null, I[0], 351, 15, "initialPauseBetweenRetries != null");
    if (!(exponentialBackoffMultiplier != null)) dart.assertFailed(null, I[0], 352, 15, "exponentialBackoffMultiplier != null");
    if (!(transientHttpStatusCodePredicate != null)) dart.assertFailed(null, I[0], 353, 15, "transientHttpStatusCodePredicate != null");
    ;
  }).prototype = network.FetchStrategyBuilder.prototype;
  dart.addTypeTests(network.FetchStrategyBuilder);
  dart.addTypeCaches(network.FetchStrategyBuilder);
  dart.setMethodSignature(network.FetchStrategyBuilder, () => ({
    __proto__: dart.getMethods(network.FetchStrategyBuilder.__proto__),
    build: dart.fnType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(network.FetchInstructions))), [dart.legacy(core.Uri), dart.legacy(network.FetchFailure)])), [])
  }));
  dart.setLibraryUri(network.FetchStrategyBuilder, I[1]);
  dart.setFieldSignature(network.FetchStrategyBuilder, () => ({
    __proto__: dart.getFields(network.FetchStrategyBuilder.__proto__),
    timeout: dart.finalFieldType(dart.legacy(core.Duration)),
    totalFetchTimeout: dart.finalFieldType(dart.legacy(core.Duration)),
    maxAttempts: dart.finalFieldType(dart.legacy(core.int)),
    initialPauseBetweenRetries: dart.finalFieldType(dart.legacy(core.Duration)),
    exponentialBackoffMultiplier: dart.finalFieldType(dart.legacy(core.num)),
    transientHttpStatusCodePredicate: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)])))
  }));
  dart.defineLazy(network.FetchStrategyBuilder, {
    /*network.FetchStrategyBuilder.defaultTransientHttpStatusCodes*/get defaultTransientHttpStatusCodes() {
      return C[6] || CT.C6;
    }
  }, true);
  dart.setBaseClass(network.NetworkImageWithRetry, image_provider.ImageProvider$(network.NetworkImageWithRetry));
  dart.trackLibraries("packages/flutter_image/network.dart", {
    "package:flutter_image/network.dart": network
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["network.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/flutter_image/network.dart.lib.js"}');
  // Exports:
  return {
    network: network
  };
}));

//# sourceMappingURL=network.dart.lib.js.map
