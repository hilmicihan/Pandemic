define(['dart_sdk', 'packages/sqflite/src/factory_impl.dart', 'packages/sqflite_common/src/open_options.dart', 'packages/path_provider/path_provider.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter_map/src/core/util.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/painting/binding.dart', 'packages/flutter/src/foundation/synchronous_future.dart', 'packages/cached_network_image/src/image_provider/_load_async_web.dart', 'packages/flutter_image/network.dart', 'packages/flutter/src/painting/image_resolution.dart', 'packages/flutter_map/src/layer/layer.dart', 'packages/flutter_map/src/geo/crs/crs.dart', 'packages/tuple/tuple.dart', 'packages/flutter_map/src/core/point.dart', 'packages/flutter_map/src/core/bounds.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/latlong/latlong.dart', 'packages/flutter/src/foundation/key.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/scheduler/ticker.dart', 'packages/flutter/src/painting/box_fit.dart', 'packages/flutter_map/src/geo/latlng_bounds.dart', 'packages/flutter/src/widgets/layout_builder.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/widgets/async.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter_map/src/core/center_zoom.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter_map/src/gestures/latlng_tween.dart', 'packages/flutter/src/gestures/scale.dart', 'packages/positioned_tap_detector/positioned_tap_detector.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/async/src/stream_group.dart'], (function load__packages__flutter_map__src__layer__tile_provider__mbtiles_image_provider_dart(dart_sdk, packages__sqflite__src__factory_impl$46dart, packages__sqflite_common__src__open_options$46dart, packages__path_provider__path_provider$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter_map__src__core__util$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__painting__binding$46dart, packages__flutter__src__foundation__synchronous_future$46dart, packages__cached_network_image__src__image_provider___load_async_web$46dart, packages__flutter_image__network$46dart, packages__flutter__src__painting__image_resolution$46dart, packages__flutter_map__src__layer__layer$46dart, packages__flutter_map__src__geo__crs__crs$46dart, packages__tuple__tuple$46dart, packages__flutter_map__src__core__point$46dart, packages__flutter_map__src__core__bounds$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__latlong__latlong$46dart, packages__flutter__src__foundation__key$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__scheduler__ticker$46dart, packages__flutter__src__painting__box_fit$46dart, packages__flutter_map__src__geo__latlng_bounds$46dart, packages__flutter__src__widgets__layout_builder$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__widgets__async$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter_map__src__core__center_zoom$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter_map__src__gestures__latlng_tween$46dart, packages__flutter__src__gestures__scale$46dart, packages__positioned_tap_detector__positioned_tap_detector$46dart, packages__flutter__src__gestures__tap$46dart, packages__async__src__stream_group$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const io = dart_sdk.io;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const typed_data = dart_sdk.typed_data;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const sqflite = packages__sqflite__src__factory_impl$46dart.sqflite;
  const sqlite_api = packages__sqflite_common__src__open_options$46dart.sqlite_api;
  const path_provider = packages__path_provider__path_provider$46dart.path_provider;
  const asset_bundle = packages__flutter__src__services__system_channels$46dart.src__services__asset_bundle;
  const util = packages__flutter_map__src__core__util$46dart.src__core__util;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const _network_image_web = packages__flutter__src__painting___network_image_web$46dart.src__painting___network_image_web;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const binding = packages__flutter__src__painting__binding$46dart.src__painting__binding;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  const _image_provider_web = packages__cached_network_image__src__image_provider___load_async_web$46dart.src__image_provider___image_provider_web;
  const network = packages__flutter_image__network$46dart.network;
  const image_resolution = packages__flutter__src__painting__image_resolution$46dart.src__painting__image_resolution;
  const layer = packages__flutter_map__src__layer__layer$46dart.src__layer__layer;
  const crs = packages__flutter_map__src__geo__crs__crs$46dart.src__geo__crs__crs;
  const tuple = packages__tuple__tuple$46dart.tuple;
  const point = packages__flutter_map__src__core__point$46dart.src__core__point;
  const bounds = packages__flutter_map__src__core__bounds$46dart.src__core__bounds;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const image = packages__flutter__src__widgets__widget_span$46dart.src__widgets__image;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const latlong = packages__latlong__latlong$46dart.latlong;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const ticker = packages__flutter__src__scheduler__ticker$46dart.src__scheduler__ticker;
  const box_fit = packages__flutter__src__painting__box_fit$46dart.src__painting__box_fit;
  const latlng_bounds = packages__flutter_map__src__geo__latlng_bounds$46dart.src__geo__latlng_bounds;
  const layout_builder = packages__flutter__src__widgets__layout_builder$46dart.src__widgets__layout_builder;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const async$ = packages__flutter__src__widgets__async$46dart.src__widgets__async;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const center_zoom = packages__flutter_map__src__core__center_zoom$46dart.src__core__center_zoom;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const latlng_tween = packages__flutter_map__src__gestures__latlng_tween$46dart.src__gestures__latlng_tween;
  const scale = packages__flutter__src__gestures__scale$46dart.src__gestures__scale;
  const positioned_tap_detector = packages__positioned_tap_detector__positioned_tap_detector$46dart.positioned_tap_detector;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const stream_group = packages__async__src__stream_group$46dart.src__stream_group;
  var mbtiles_image_provider = Object.create(dart.library);
  var tile_provider = Object.create(dart.library);
  var tile_layer = Object.create(dart.library);
  var polyline_layer = Object.create(dart.library);
  var polygon_layer = Object.create(dart.library);
  var marker_layer = Object.create(dart.library);
  var circle_layer = Object.create(dart.library);
  var plugin = Object.create(dart.library);
  var overlay_image_layer = Object.create(dart.library);
  var group_layer = Object.create(dart.library);
  var map_state_widget = Object.create(dart.library);
  var map = Object.create(dart.library);
  var gestures = Object.create(dart.library);
  var flutter_map_state = Object.create(dart.library);
  var flutter_map = Object.create(dart.library);
  var $last = dartx.last;
  var $split = dartx.split;
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  var $lengthInBytes = dartx.lengthInBytes;
  var $asUint8List = dartx.asUint8List;
  var $round = dartx.round;
  var $toInt = dartx.toInt;
  var $toString = dartx.toString;
  var $_set = dartx._set;
  var $addAll = dartx.addAll;
  var $leftShift = dartx['<<'];
  var $isEmpty = dartx.isEmpty;
  var $modulo = dartx['%'];
  var $length = dartx.length;
  var $_get = dartx._get;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $floorToDouble = dartx.floorToDouble;
  var $take = dartx.take;
  var $join = dartx.join;
  var $map = dartx.map;
  var $forEach = dartx.forEach;
  var $values = dartx.values;
  var $toList = dartx.toList;
  var $sort = dartx.sort;
  var $toDouble = dartx.toDouble;
  var $entries = dartx.entries;
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $abs = dartx.abs;
  var $keys = dartx.keys;
  var $roundToDouble = dartx.roundToDouble;
  var $ceilToDouble = dartx.ceilToDouble;
  var $compareTo = dartx.compareTo;
  var $clear = dartx.clear;
  var $indexOf = dartx.indexOf;
  var $clamp = dartx.clamp;
  dart._checkModuleNullSafetyMode(false);
  var T$ = Object.create({
    DatabaseL: () => (T$.DatabaseL = dart.constFn(dart.legacy(sqlite_api.Database)))(),
    FileL: () => (T$.FileL = dart.constFn(dart.legacy(io.File)))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    CoordsOfintL: () => (T$.CoordsOfintL = dart.constFn(tile_layer.Coords$(T$.intL())))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$StringL: () => (T$.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.StringL())))(),
    LinkedHashMapOfStringL$StringL: () => (T$.LinkedHashMapOfStringL$StringL = dart.constFn(collection.LinkedHashMap$(T$.StringL(), T$.StringL())))(),
    MBTileImageL: () => (T$.MBTileImageL = dart.constFn(dart.legacy(mbtiles_image_provider.MBTileImage)))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    ImageProviderOfObjectL: () => (T$.ImageProviderOfObjectL = dart.constFn(image_provider.ImageProvider$(T$.ObjectL())))(),
    ImageProviderLOfObjectL: () => (T$.ImageProviderLOfObjectL = dart.constFn(dart.legacy(T$.ImageProviderOfObjectL())))(),
    DiagnosticsPropertyOfImageProviderLOfObjectL: () => (T$.DiagnosticsPropertyOfImageProviderLOfObjectL = dart.constFn(diagnostics.DiagnosticsProperty$(T$.ImageProviderLOfObjectL())))(),
    DiagnosticsNodeL: () => (T$.DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))(),
    SyncIterableOfDiagnosticsNodeL: () => (T$.SyncIterableOfDiagnosticsNodeL = dart.constFn(_js_helper.SyncIterable$(T$.DiagnosticsNodeL())))(),
    IterableOfDiagnosticsNodeL: () => (T$.IterableOfDiagnosticsNodeL = dart.constFn(core.Iterable$(T$.DiagnosticsNodeL())))(),
    IterableLOfDiagnosticsNodeL: () => (T$.IterableLOfDiagnosticsNodeL = dart.constFn(dart.legacy(T$.IterableOfDiagnosticsNodeL())))(),
    VoidToIterableLOfDiagnosticsNodeL: () => (T$.VoidToIterableLOfDiagnosticsNodeL = dart.constFn(dart.fnType(T$.IterableLOfDiagnosticsNodeL(), [])))(),
    Uint8ListL: () => (T$.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    CodecL: () => (T$.CodecL = dart.constFn(dart.legacy(ui.Codec)))(),
    FutureOfCodecL: () => (T$.FutureOfCodecL = dart.constFn(async.Future$(T$.CodecL())))(),
    SynchronousFutureOfMBTileImageL: () => (T$.SynchronousFutureOfMBTileImageL = dart.constFn(synchronous_future.SynchronousFuture$(T$.MBTileImageL())))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    StreamOfNull: () => (T$.StreamOfNull = dart.constFn(async.Stream$(core.Null)))(),
    StreamLOfNull: () => (T$.StreamLOfNull = dart.constFn(dart.legacy(T$.StreamOfNull())))(),
    Tuple2OfdoubleL$doubleL: () => (T$.Tuple2OfdoubleL$doubleL = dart.constFn(tuple.Tuple2$(T$.doubleL(), T$.doubleL())))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    StringLAndStringLTovoid: () => (T$.StringLAndStringLTovoid = dart.constFn(dart.fnType(dart.void, [T$.StringL(), T$.StringL()])))(),
    numL: () => (T$.numL = dart.constFn(dart.legacy(core.num)))(),
    CustomPointOfnumL: () => (T$.CustomPointOfnumL = dart.constFn(point.CustomPoint$(T$.numL())))(),
    BoundsOfnumL: () => (T$.BoundsOfnumL = dart.constFn(bounds.Bounds$(T$.numL())))(),
    Epsg4326L: () => (T$.Epsg4326L = dart.constFn(dart.legacy(crs.Epsg4326)))(),
    JSArrayOfnumL: () => (T$.JSArrayOfnumL = dart.constFn(_interceptors.JSArray$(T$.numL())))(),
    _LocationL: () => (T$._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    TileL: () => (T$.TileL = dart.constFn(dart.legacy(tile_layer.Tile)))(),
    IdentityMapOfStringL$TileL: () => (T$.IdentityMapOfStringL$TileL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.TileL())))(),
    LevelL: () => (T$.LevelL = dart.constFn(dart.legacy(tile_layer.Level)))(),
    IdentityMapOfdoubleL$LevelL: () => (T$.IdentityMapOfdoubleL$LevelL = dart.constFn(_js_helper.IdentityMap$(T$.doubleL(), T$.LevelL())))(),
    ObjectLTovoid: () => (T$.ObjectLTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectL()])))(),
    TileLayerL: () => (T$.TileLayerL = dart.constFn(dart.legacy(tile_layer.TileLayer)))(),
    LatLngL: () => (T$.LatLngL = dart.constFn(dart.legacy(latlong.LatLng)))(),
    StreamControllerOfLatLngL: () => (T$.StreamControllerOfLatLngL = dart.constFn(async.StreamController$(T$.LatLngL())))(),
    WidgetL: () => (T$.WidgetL = dart.constFn(dart.legacy(framework.Widget)))(),
    JSArrayOfWidgetL: () => (T$.JSArrayOfWidgetL = dart.constFn(_interceptors.JSArray$(T$.WidgetL())))(),
    ValueKeyOfStringL: () => (T$.ValueKeyOfStringL = dart.constFn(key.ValueKey$(T$.StringL())))(),
    JSArrayOfStringL: () => (T$.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T$.StringL())))(),
    JSArrayOfdoubleL: () => (T$.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T$.doubleL())))(),
    LinkedHashMapOfStringL$TileL: () => (T$.LinkedHashMapOfStringL$TileL = dart.constFn(collection.LinkedHashMap$(T$.StringL(), T$.TileL())))(),
    CoordsOfdoubleL: () => (T$.CoordsOfdoubleL = dart.constFn(tile_layer.Coords$(T$.doubleL())))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    CoordsOfnumL: () => (T$.CoordsOfnumL = dart.constFn(tile_layer.Coords$(T$.numL())))(),
    CoordsLOfnumL: () => (T$.CoordsLOfnumL = dart.constFn(dart.legacy(T$.CoordsOfnumL())))(),
    JSArrayOfCoordsLOfnumL: () => (T$.JSArrayOfCoordsLOfnumL = dart.constFn(_interceptors.JSArray$(T$.CoordsLOfnumL())))(),
    CoordsLOfnumLAndCoordsLOfnumLTointL: () => (T$.CoordsLOfnumLAndCoordsLOfnumLTointL = dart.constFn(dart.fnType(T$.intL(), [T$.CoordsLOfnumL(), T$.CoordsLOfnumL()])))(),
    CoordsLOfdoubleL: () => (T$.CoordsLOfdoubleL = dart.constFn(dart.legacy(T$.CoordsOfdoubleL())))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    boolLTovoid: () => (T$.boolLTovoid = dart.constFn(dart.fnType(dart.void, [T$.boolL()])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    AnimatedTileL: () => (T$.AnimatedTileL = dart.constFn(dart.legacy(tile_layer.AnimatedTile)))(),
    PolylineL: () => (T$.PolylineL = dart.constFn(dart.legacy(polyline_layer.Polyline)))(),
    OffsetL: () => (T$.OffsetL = dart.constFn(dart.legacy(ui.Offset)))(),
    JSArrayOfOffsetL: () => (T$.JSArrayOfOffsetL = dart.constFn(_interceptors.JSArray$(T$.OffsetL())))(),
    BuildContextL: () => (T$.BuildContextL = dart.constFn(dart.legacy(framework.BuildContext)))(),
    BoxConstraintsL: () => (T$.BoxConstraintsL = dart.constFn(dart.legacy(box.BoxConstraints)))(),
    BuildContextLAndBoxConstraintsLToWidgetL: () => (T$.BuildContextLAndBoxConstraintsLToWidgetL = dart.constFn(dart.fnType(T$.WidgetL(), [T$.BuildContextL(), T$.BoxConstraintsL()])))(),
    StreamBuilderOfvoid: () => (T$.StreamBuilderOfvoid = dart.constFn(async$.StreamBuilder$(dart.void)))(),
    ContainerL: () => (T$.ContainerL = dart.constFn(dart.legacy(container.Container)))(),
    AsyncSnapshotOfvoid: () => (T$.AsyncSnapshotOfvoid = dart.constFn(async$.AsyncSnapshot$(dart.void)))(),
    AsyncSnapshotLOfvoid: () => (T$.AsyncSnapshotLOfvoid = dart.constFn(dart.legacy(T$.AsyncSnapshotOfvoid())))(),
    BuildContextLAndAsyncSnapshotLOfvoidToContainerL: () => (T$.BuildContextLAndAsyncSnapshotLOfvoidToContainerL = dart.constFn(dart.fnType(T$.ContainerL(), [T$.BuildContextL(), T$.AsyncSnapshotLOfvoid()])))(),
    ColorL: () => (T$.ColorL = dart.constFn(dart.legacy(ui.Color)))(),
    ColorLTodoubleL: () => (T$.ColorLTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [T$.ColorL()])))(),
    PolylinePainterL: () => (T$.PolylinePainterL = dart.constFn(dart.legacy(polyline_layer.PolylinePainter)))(),
    PolygonL: () => (T$.PolygonL = dart.constFn(dart.legacy(polygon_layer.Polygon)))(),
    ListOfOffsetL: () => (T$.ListOfOffsetL = dart.constFn(core.List$(T$.OffsetL())))(),
    ListLOfOffsetL: () => (T$.ListLOfOffsetL = dart.constFn(dart.legacy(T$.ListOfOffsetL())))(),
    ListOfListLOfOffsetL: () => (T$.ListOfListLOfOffsetL = dart.constFn(core.List$(T$.ListLOfOffsetL())))(),
    intLToListLOfOffsetL: () => (T$.intLToListLOfOffsetL = dart.constFn(dart.fnType(T$.ListLOfOffsetL(), [T$.intL()])))(),
    AsyncSnapshotL: () => (T$.AsyncSnapshotL = dart.constFn(dart.legacy(async$.AsyncSnapshot)))(),
    BuildContextLAndAsyncSnapshotLToContainerL: () => (T$.BuildContextLAndAsyncSnapshotLToContainerL = dart.constFn(dart.fnType(T$.ContainerL(), [T$.BuildContextL(), T$.AsyncSnapshotL()])))(),
    PolygonPainterL: () => (T$.PolygonPainterL = dart.constFn(dart.legacy(polygon_layer.PolygonPainter)))(),
    MarkerL: () => (T$.MarkerL = dart.constFn(dart.legacy(marker_layer.Marker)))(),
    AnchorAlignL: () => (T$.AnchorAlignL = dart.constFn(dart.legacy(marker_layer.AnchorAlign)))(),
    AnchorL: () => (T$.AnchorL = dart.constFn(dart.legacy(marker_layer.Anchor)))(),
    StreamBuilderOfintL: () => (T$.StreamBuilderOfintL = dart.constFn(async$.StreamBuilder$(T$.intL())))(),
    AsyncSnapshotOfintL: () => (T$.AsyncSnapshotOfintL = dart.constFn(async$.AsyncSnapshot$(T$.intL())))(),
    AsyncSnapshotLOfintL: () => (T$.AsyncSnapshotLOfintL = dart.constFn(dart.legacy(T$.AsyncSnapshotOfintL())))(),
    BuildContextLAndAsyncSnapshotLOfintLToContainerL: () => (T$.BuildContextLAndAsyncSnapshotLOfintLToContainerL = dart.constFn(dart.fnType(T$.ContainerL(), [T$.BuildContextL(), T$.AsyncSnapshotLOfintL()])))(),
    CircleMarkerL: () => (T$.CircleMarkerL = dart.constFn(dart.legacy(circle_layer.CircleMarker)))(),
    CirclePainterL: () => (T$.CirclePainterL = dart.constFn(dart.legacy(circle_layer.CirclePainter)))(),
    OverlayImageL: () => (T$.OverlayImageL = dart.constFn(dart.legacy(overlay_image_layer.OverlayImage)))(),
    ClipRectL: () => (T$.ClipRectL = dart.constFn(dart.legacy(basic.ClipRect)))(),
    BuildContextLAndAsyncSnapshotLOfvoidToClipRectL: () => (T$.BuildContextLAndAsyncSnapshotLOfvoidToClipRectL = dart.constFn(dart.fnType(T$.ClipRectL(), [T$.BuildContextL(), T$.AsyncSnapshotLOfvoid()])))(),
    LayerOptionsL: () => (T$.LayerOptionsL = dart.constFn(dart.legacy(layer.LayerOptions)))(),
    JSArrayOfLayerOptionsL: () => (T$.JSArrayOfLayerOptionsL = dart.constFn(_interceptors.JSArray$(T$.LayerOptionsL())))(),
    StreamBuilderOfNull: () => (T$.StreamBuilderOfNull = dart.constFn(async$.StreamBuilder$(core.Null)))(),
    MarkerLayerOptionsL: () => (T$.MarkerLayerOptionsL = dart.constFn(dart.legacy(marker_layer.MarkerLayerOptions)))(),
    CircleLayerOptionsL: () => (T$.CircleLayerOptionsL = dart.constFn(dart.legacy(circle_layer.CircleLayerOptions)))(),
    PolylineLayerOptionsL: () => (T$.PolylineLayerOptionsL = dart.constFn(dart.legacy(polyline_layer.PolylineLayerOptions)))(),
    PolygonLayerOptionsL: () => (T$.PolygonLayerOptionsL = dart.constFn(dart.legacy(polygon_layer.PolygonLayerOptions)))(),
    OverlayImageLayerOptionsL: () => (T$.OverlayImageLayerOptionsL = dart.constFn(dart.legacy(overlay_image_layer.OverlayImageLayerOptions)))(),
    MapStateInheritedWidgetL: () => (T$.MapStateInheritedWidgetL = dart.constFn(dart.legacy(map_state_widget.MapStateInheritedWidget)))(),
    CompleterOfNull: () => (T$.CompleterOfNull = dart.constFn(async.Completer$(core.Null)))(),
    StreamControllerOfNull: () => (T$.StreamControllerOfNull = dart.constFn(async.StreamController$(core.Null)))(),
    MapPositionL: () => (T$.MapPositionL = dart.constFn(dart.legacy(flutter_map.MapPosition)))(),
    StreamControllerOfMapPositionL: () => (T$.StreamControllerOfMapPositionL = dart.constFn(async.StreamController$(T$.MapPositionL())))(),
    CustomPointOfdoubleL: () => (T$.CustomPointOfdoubleL = dart.constFn(point.CustomPoint$(T$.doubleL())))(),
    TweenOfOffsetL: () => (T$.TweenOfOffsetL = dart.constFn(tween.Tween$(T$.OffsetL())))(),
    RenderBoxL: () => (T$.RenderBoxL = dart.constFn(dart.legacy(box.RenderBox)))(),
    TweenOfdoubleL: () => (T$.TweenOfdoubleL = dart.constFn(tween.Tween$(T$.doubleL())))(),
    MapControllerImplL: () => (T$.MapControllerImplL = dart.constFn(dart.legacy(map.MapControllerImpl)))(),
    StatefulWidgetL: () => (T$.StatefulWidgetL = dart.constFn(dart.legacy(framework.StatefulWidget)))(),
    StateOfStatefulWidgetL: () => (T$.StateOfStatefulWidgetL = dart.constFn(framework.State$(T$.StatefulWidgetL())))(),
    StateLOfStatefulWidgetL: () => (T$.StateLOfStatefulWidgetL = dart.constFn(dart.legacy(T$.StateOfStatefulWidgetL())))(),
    GlobalKeyOfStateLOfStatefulWidgetL: () => (T$.GlobalKeyOfStateLOfStatefulWidgetL = dart.constFn(framework.GlobalKey$(T$.StateLOfStatefulWidgetL())))(),
    StreamGroupOfNull: () => (T$.StreamGroupOfNull = dart.constFn(stream_group.StreamGroup$(core.Null)))(),
    StreamGroupLOfNull: () => (T$.StreamGroupLOfNull = dart.constFn(dart.legacy(T$.StreamGroupOfNull())))(),
    JSArrayOfStreamGroupLOfNull: () => (T$.JSArrayOfStreamGroupLOfNull = dart.constFn(_interceptors.JSArray$(T$.StreamGroupLOfNull())))(),
    FlutterMapL: () => (T$.FlutterMapL = dart.constFn(dart.legacy(flutter_map.FlutterMap)))(),
    VoidTodoubleL: () => (T$.VoidTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [])))(),
    doubleLTovoid: () => (T$.doubleLTovoid = dart.constFn(dart.fnType(dart.void, [T$.doubleL()])))(),
    ListOfWidgetL: () => (T$.ListOfWidgetL = dart.constFn(core.List$(T$.WidgetL())))(),
    LayerOptionsLToWidgetL: () => (T$.LayerOptionsLToWidgetL = dart.constFn(dart.fnType(T$.WidgetL(), [T$.LayerOptionsL()])))(),
    BuildContextLAndBoxConstraintsLToMapStateInheritedWidgetL: () => (T$.BuildContextLAndBoxConstraintsLToMapStateInheritedWidgetL = dart.constFn(dart.fnType(T$.MapStateInheritedWidgetL(), [T$.BuildContextL(), T$.BoxConstraintsL()])))(),
    TileLayerOptionsL: () => (T$.TileLayerOptionsL = dart.constFn(dart.legacy(tile_layer.TileLayerOptions)))(),
    GroupLayerOptionsL: () => (T$.GroupLayerOptionsL = dart.constFn(dart.legacy(group_layer.GroupLayerOptions)))(),
    MapPluginL: () => (T$.MapPluginL = dart.constFn(dart.legacy(plugin.MapPlugin)))()
  });
  const CT = Object.create(null);
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constMap(T$.StringL(), T$.StringL(), []);
    },
    get C1() {
      return C[1] = dart.constList([], T$.StringL());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292927712.0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: tile_provider.CachedNetworkTileProvider.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: T$.Tuple2OfdoubleL$doubleL().prototype,
        [Tuple2_item2]: 180,
        [Tuple2_item1]: -180
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: crs.Transformation.prototype,
        [Transformation_d]: 0.5,
        [Transformation_c]: -2.495320233665337e-8,
        [Transformation_b]: 0.5,
        [Transformation_a]: 2.495320233665337e-8
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: crs.SphericalMercator.prototype
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: crs.Epsg3857.prototype,
        [Earth_wrapLat]: null,
        [Earth_wrapLng]: C[5] || CT.C5,
        [Epsg3857_transformation]: C[6] || CT.C6,
        [Epsg3857_projection]: C[7] || CT.C7,
        [Epsg3857_code]: "EPSG:3857"
      });
    },
    get C8() {
      return C[8] = dart.fn(core.Uri.encodeComponent, T$.StringToString());
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mapState",
        [_Location_column]: 7,
        [_Location_line]: 352,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 353,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "options",
        [_Location_column]: 7,
        [_Location_line]: 354,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.constList([C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13], T$._LocationL());
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[10] || CT.C10,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 351,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 11,
        [_Location_line]: 483,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.constList([C[16] || CT.C16], T$._LocationL());
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[15] || CT.C15,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 482,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 481,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 482,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.constList([C[19] || CT.C19, C[20] || CT.C20], T$._LocationL());
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[18] || CT.C18,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 480,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 7,
        [_Location_line]: 479,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 480,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.constList([C[23] || CT.C23, C[24] || CT.C24], T$._LocationL());
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[22] || CT.C22,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 478,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tile",
        [_Location_column]: 7,
        [_Location_line]: 498,
        [_Location_file]: null
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "errorImage",
        [_Location_column]: 7,
        [_Location_line]: 499,
        [_Location_file]: null
      });
    },
    get C26() {
      return C[26] = dart.constList([C[27] || CT.C27, C[28] || CT.C28], T$._LocationL());
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[26] || CT.C26,
        [_Location_name]: null,
        [_Location_column]: 28,
        [_Location_line]: 497,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 7,
        [_Location_line]: 503,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 504,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 505,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 506,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 507,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 508,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.constList([C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36], T$._LocationL());
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[30] || CT.C30,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 502,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 50000
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: T$.CustomPointOfnumL().prototype,
        [Point_y]: 1,
        [Point_x]: 1
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "image",
        [_Location_column]: 15,
        [_Location_line]: 1187,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 15,
        [_Location_line]: 1188,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.constList([C[41] || CT.C41, C[42] || CT.C42], T$._LocationL());
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[40] || CT.C40,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 1186,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "image",
        [_Location_column]: 15,
        [_Location_line]: 1191,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 15,
        [_Location_line]: 1192,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.constList([C[45] || CT.C45, C[46] || CT.C46], T$._LocationL());
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[44] || CT.C44,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 1190,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "opacity",
        [_Location_column]: 7,
        [_Location_line]: 1184,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1185,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.constList([C[49] || CT.C49, C[50] || CT.C50], T$._LocationL());
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[48] || CT.C48,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1183,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart"
      });
    },
    get C51() {
      return C[51] = dart.constList([], T$.PolylineL());
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278255360.0
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967040.0
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polylineOpts",
        [_Location_column]: 26,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 54,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.constList([C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58], T$._LocationL());
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[55] || CT.C55,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 58,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 73,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.constList([C[61] || CT.C61], T$._LocationL());
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[60] || CT.C60,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 72,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 13,
        [_Location_line]: 98,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 13,
        [_Location_line]: 99,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.constList([C[64] || CT.C64, C[65] || CT.C65], T$._LocationL());
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[63] || CT.C63,
        [_Location_name]: null,
        [_Location_column]: 25,
        [_Location_line]: 97,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 105,
        [_Location_file]: null
      });
    },
    get C67() {
      return C[67] = dart.constList([C[68] || CT.C68], T$._LocationL());
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[67] || CT.C67,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 104,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 104,
        [_Location_file]: null
      });
    },
    get C70() {
      return C[70] = dart.constList([C[71] || CT.C71], T$._LocationL());
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[70] || CT.C70,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 103,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.constList([C[74] || CT.C74, C[75] || CT.C75], T$._LocationL());
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[73] || CT.C73,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 81,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polyline_layer.dart"
      });
    },
    get C76() {
      return C[76] = dart.constList([], T$.PolygonL());
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polygonOpts",
        [_Location_column]: 25,
        [_Location_line]: 60,
        [_Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 34,
        [_Location_line]: 60,
        [_Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 53,
        [_Location_line]: 60,
        [_Location_file]: null
      });
    },
    get C78() {
      return C[78] = dart.constList([C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81], T$._LocationL());
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[78] || CT.C78,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 60,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 75,
        [_Location_file]: null
      });
    },
    get C83() {
      return C[83] = dart.constList([C[84] || CT.C84], T$._LocationL());
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[83] || CT.C83,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 74,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 15,
        [_Location_line]: 115,
        [_Location_file]: null
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 15,
        [_Location_line]: 116,
        [_Location_file]: null
      });
    },
    get C86() {
      return C[86] = dart.constList([C[87] || CT.C87, C[88] || CT.C88], T$._LocationL());
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[86] || CT.C86,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 114,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C90() {
      return C[90] = dart.constList([C[91] || CT.C91], T$._LocationL());
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[90] || CT.C90,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 122,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 122,
        [_Location_file]: null
      });
    },
    get C93() {
      return C[93] = dart.constList([C[94] || CT.C94], T$._LocationL());
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[93] || CT.C93,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 121,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 85,
        [_Location_file]: null
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C96() {
      return C[96] = dart.constList([C[97] || CT.C97, C[98] || CT.C98], T$._LocationL());
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[96] || CT.C96,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 84,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/polygon_layer.dart"
      });
    },
    get C99() {
      return C[99] = dart.constList([], T$.MarkerL());
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$]: "AnchorAlign.left",
        index: 0
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$]: "AnchorAlign.right",
        index: 1
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$]: "AnchorAlign.top",
        index: 2
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$]: "AnchorAlign.bottom",
        index: 3
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: marker_layer.AnchorAlign.prototype,
        [_name$]: "AnchorAlign.center",
        index: 4
      });
    },
    get C105() {
      return C[105] = dart.constList([C[100] || CT.C100, C[101] || CT.C101, C[102] || CT.C102, C[103] || CT.C103, C[104] || CT.C104], T$.AnchorAlignL());
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "markerOpts",
        [_Location_column]: 24,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 33,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 52,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.constList([C[108] || CT.C108, C[109] || CT.C109, C[110] || CT.C110], T$._LocationL());
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[107] || CT.C107,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 101,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/marker_layer.dart"
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 15,
        [_Location_line]: 146,
        [_Location_file]: null
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 15,
        [_Location_line]: 147,
        [_Location_file]: null
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 15,
        [_Location_line]: 148,
        [_Location_file]: null
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 15,
        [_Location_line]: 149,
        [_Location_file]: null
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 150,
        [_Location_file]: null
      });
    },
    get C112() {
      return C[112] = dart.constList([C[113] || CT.C113, C[114] || CT.C114, C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117], T$._LocationL());
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[112] || CT.C112,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 145,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/marker_layer.dart"
      });
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 156,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.constList([C[120] || CT.C120], T$._LocationL());
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[119] || CT.C119,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 155,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/marker_layer.dart"
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 155,
        [_Location_file]: null
      });
    },
    get C122() {
      return C[122] = dart.constList([C[123] || CT.C123], T$._LocationL());
    },
    get C121() {
      return C[121] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[122] || CT.C122,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 154,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/marker_layer.dart"
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 127,
        [_Location_file]: null
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 128,
        [_Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.constList([C[126] || CT.C126, C[127] || CT.C127], T$._LocationL());
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[125] || CT.C125,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 126,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/marker_layer.dart"
      });
    },
    get C128() {
      return C[128] = dart.constList([], T$.CircleMarkerL());
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "circleOpts",
        [_Location_column]: 24,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 33,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 52,
        [_Location_line]: 44,
        [_Location_file]: null
      });
    },
    get C130() {
      return C[130] = dart.constList([C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133], T$._LocationL());
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[130] || CT.C130,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 44,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/circle_layer.dart"
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C135() {
      return C[135] = dart.constList([C[136] || CT.C136], T$._LocationL());
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[135] || CT.C135,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 57,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/circle_layer.dart"
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "painter",
        [_Location_column]: 15,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 15,
        [_Location_line]: 88,
        [_Location_file]: null
      });
    },
    get C138() {
      return C[138] = dart.constList([C[139] || CT.C139, C[140] || CT.C140], T$._LocationL());
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[138] || CT.C138,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 86,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/circle_layer.dart"
      });
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 95,
        [_Location_file]: null
      });
    },
    get C142() {
      return C[142] = dart.constList([C[143] || CT.C143], T$._LocationL());
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[142] || CT.C142,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 94,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/circle_layer.dart"
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 94,
        [_Location_file]: null
      });
    },
    get C145() {
      return C[145] = dart.constList([C[146] || CT.C146], T$._LocationL());
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[145] || CT.C145,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 93,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/circle_layer.dart"
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 68,
        [_Location_file]: null
      });
    },
    get C148() {
      return C[148] = dart.constList([C[149] || CT.C149, C[150] || CT.C150], T$._LocationL());
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[148] || CT.C148,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 66,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/circle_layer.dart"
      });
    },
    get C151() {
      return C[151] = dart.constList([], T$.OverlayImageL());
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overlayImageOpts",
        [_Location_column]: 30,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 39,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 58,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C153() {
      return C[153] = dart.constList([C[154] || CT.C154, C[155] || CT.C155, C[156] || CT.C156], T$._LocationL());
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[153] || CT.C153,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 40,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 59,
        [_Location_file]: null
      });
    },
    get C158() {
      return C[158] = dart.constList([C[159] || CT.C159], T$._LocationL());
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[158] || CT.C158,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 58,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 58,
        [_Location_file]: null
      });
    },
    get C161() {
      return C[161] = dart.constList([C[162] || CT.C162], T$._LocationL());
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[161] || CT.C161,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 57,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 55,
        [_Location_file]: null
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 56,
        [_Location_file]: null
      });
    },
    get C164() {
      return C[164] = dart.constList([C[165] || CT.C165, C[166] || CT.C166], T$._LocationL());
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[164] || CT.C164,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 54,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "image",
        [_Location_column]: 9,
        [_Location_line]: 85,
        [_Location_file]: null
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "fit",
        [_Location_column]: 9,
        [_Location_line]: 86,
        [_Location_file]: null
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "color",
        [_Location_column]: 9,
        [_Location_line]: 87,
        [_Location_file]: null
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "colorBlendMode",
        [_Location_column]: 9,
        [_Location_line]: 88,
        [_Location_file]: null
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "gaplessPlayback",
        [_Location_column]: 9,
        [_Location_line]: 89,
        [_Location_file]: null
      });
    },
    get C168() {
      return C[168] = dart.constList([C[169] || CT.C169, C[170] || CT.C170, C[171] || CT.C171, C[172] || CT.C172, C[173] || CT.C173], T$._LocationL());
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[168] || CT.C168,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 84,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "left",
        [_Location_column]: 7,
        [_Location_line]: 80,
        [_Location_file]: null
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "top",
        [_Location_column]: 7,
        [_Location_line]: 81,
        [_Location_file]: null
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "width",
        [_Location_column]: 7,
        [_Location_line]: 82,
        [_Location_file]: null
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "height",
        [_Location_column]: 7,
        [_Location_line]: 83,
        [_Location_file]: null
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 84,
        [_Location_file]: null
      });
    },
    get C175() {
      return C[175] = dart.constList([C[176] || CT.C176, C[177] || CT.C177, C[178] || CT.C178, C[179] || CT.C179, C[180] || CT.C180], T$._LocationL());
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[175] || CT.C175,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 79,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/overlay_image_layer.dart"
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "groupOpts",
        [_Location_column]: 23,
        [_Location_line]: 24,
        [_Location_file]: null
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 32,
        [_Location_line]: 24,
        [_Location_file]: null
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 51,
        [_Location_line]: 24,
        [_Location_file]: null
      });
    },
    get C182() {
      return C[182] = dart.constList([C[183] || CT.C183, C[184] || CT.C184, C[185] || CT.C185], T$._LocationL());
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[182] || CT.C182,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 24,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 39,
        [_Location_file]: null
      });
    },
    get C187() {
      return C[187] = dart.constList([C[188] || CT.C188], T$._LocationL());
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[187] || CT.C187,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 37,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 13,
        [_Location_line]: 55,
        [_Location_file]: null
      });
    },
    get C190() {
      return C[190] = dart.constList([C[191] || CT.C191], T$._LocationL());
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[190] || CT.C190,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 54,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 54,
        [_Location_file]: null
      });
    },
    get C193() {
      return C[193] = dart.constList([C[194] || CT.C194], T$._LocationL());
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[193] || CT.C193,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 53,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 7,
        [_Location_line]: 47,
        [_Location_file]: null
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 48,
        [_Location_file]: null
      });
    },
    get C196() {
      return C[196] = dart.constList([C[197] || CT.C197, C[198] || CT.C198], T$._LocationL());
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[196] || CT.C196,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 46,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "markerOpts",
        [_Location_column]: 26,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 48,
        [_Location_line]: 64,
        [_Location_file]: null
      });
    },
    get C200() {
      return C[200] = dart.constList([C[201] || CT.C201, C[202] || CT.C202, C[203] || CT.C203], T$._LocationL());
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[200] || CT.C200,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 64,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "circleOpts",
        [_Location_column]: 26,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 48,
        [_Location_line]: 67,
        [_Location_file]: null
      });
    },
    get C205() {
      return C[205] = dart.constList([C[206] || CT.C206, C[207] || CT.C207, C[208] || CT.C208], T$._LocationL());
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[205] || CT.C205,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 67,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polylineOpts",
        [_Location_column]: 28,
        [_Location_line]: 70,
        [_Location_file]: null
      });
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 37,
        [_Location_line]: 70,
        [_Location_file]: null
      });
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 50,
        [_Location_line]: 70,
        [_Location_file]: null
      });
    },
    get C210() {
      return C[210] = dart.constList([C[211] || CT.C211, C[212] || CT.C212, C[213] || CT.C213], T$._LocationL());
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[210] || CT.C210,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 70,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polygonOpts",
        [_Location_column]: 27,
        [_Location_line]: 73,
        [_Location_file]: null
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 36,
        [_Location_line]: 73,
        [_Location_file]: null
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 49,
        [_Location_line]: 73,
        [_Location_file]: null
      });
    },
    get C215() {
      return C[215] = dart.constList([C[216] || CT.C216, C[217] || CT.C217, C[218] || CT.C218], T$._LocationL());
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[215] || CT.C215,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 73,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overlayImageOpts",
        [_Location_column]: 32,
        [_Location_line]: 76,
        [_Location_file]: null
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 41,
        [_Location_line]: 76,
        [_Location_file]: null
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 54,
        [_Location_line]: 76,
        [_Location_file]: null
      });
    },
    get C220() {
      return C[220] = dart.constList([C[221] || CT.C221, C[222] || CT.C222, C[223] || CT.C223], T$._LocationL());
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[220] || CT.C220,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 76,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/group_layer.dart"
      });
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 12,
        [EdgeInsets_right]: 12,
        [EdgeInsets_top]: 12,
        [EdgeInsets_left]: 12
      });
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: flutter_map.FitBoundsOptions.prototype,
        [FitBoundsOptions_zoom]: null,
        [FitBoundsOptions_maxZoom]: 17,
        [FitBoundsOptions_padding]: C[225] || CT.C225
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 350000
      });
    },
    get C227() {
      return C[227] = dart.constList([], T$.LayerOptionsL());
    },
    get C228() {
      return C[228] = dart.constList([], T$.WidgetL());
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 9,
        [_Location_line]: 102,
        [_Location_file]: null
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "children",
        [_Location_column]: 9,
        [_Location_line]: 103,
        [_Location_file]: null
      });
    },
    get C230() {
      return C[230] = dart.constList([C[231] || CT.C231, C[232] || CT.C232], T$._LocationL());
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[230] || CT.C230,
        [_Location_name]: null,
        [_Location_column]: 24,
        [_Location_line]: 101,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleStart",
        [_Location_column]: 13,
        [_Location_line]: 123,
        [_Location_file]: null
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleUpdate",
        [_Location_column]: 13,
        [_Location_line]: 124,
        [_Location_file]: null
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onScaleEnd",
        [_Location_column]: 13,
        [_Location_line]: 125,
        [_Location_file]: null
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 13,
        [_Location_line]: 126,
        [_Location_file]: null
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPress",
        [_Location_column]: 13,
        [_Location_line]: 127,
        [_Location_file]: null
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapDown",
        [_Location_column]: 13,
        [_Location_line]: 128,
        [_Location_file]: null
      });
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapUp",
        [_Location_column]: 13,
        [_Location_line]: 129,
        [_Location_file]: null
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 130,
        [_Location_file]: null
      });
    },
    get C234() {
      return C[234] = dart.constList([C[235] || CT.C235, C[236] || CT.C236, C[237] || CT.C237, C[238] || CT.C238, C[239] || CT.C239, C[240] || CT.C240, C[241] || CT.C241, C[242] || CT.C242], T$._LocationL());
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[234] || CT.C234,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 122,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 11,
        [_Location_line]: 117,
        [_Location_file]: null
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 11,
        [_Location_line]: 118,
        [_Location_file]: null
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 11,
        [_Location_line]: 119,
        [_Location_file]: null
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onLongPress",
        [_Location_column]: 11,
        [_Location_line]: 120,
        [_Location_file]: null
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onDoubleTap",
        [_Location_column]: 11,
        [_Location_line]: 121,
        [_Location_file]: null
      });
    },
    get C244() {
      return C[244] = dart.constList([C[245] || CT.C245, C[246] || CT.C246, C[247] || CT.C247, C[248] || CT.C248, C[249] || CT.C249, C[94] || CT.C94], T$._LocationL());
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[244] || CT.C244,
        [_Location_name]: null,
        [_Location_column]: 19,
        [_Location_line]: 116,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minWidth",
        [_Location_column]: 17,
        [_Location_line]: 145,
        [_Location_file]: null
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxWidth",
        [_Location_column]: 17,
        [_Location_line]: 146,
        [_Location_file]: null
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "minHeight",
        [_Location_column]: 17,
        [_Location_line]: 147,
        [_Location_file]: null
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxHeight",
        [_Location_column]: 17,
        [_Location_line]: 148,
        [_Location_file]: null
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 17,
        [_Location_line]: 149,
        [_Location_file]: null
      });
    },
    get C251() {
      return C[251] = dart.constList([C[252] || CT.C252, C[253] || CT.C253, C[254] || CT.C254, C[255] || CT.C255, C[256] || CT.C256], T$._LocationL());
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[251] || CT.C251,
        [_Location_name]: null,
        [_Location_column]: 22,
        [_Location_line]: 144,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "angle",
        [_Location_column]: 15,
        [_Location_line]: 143,
        [_Location_file]: null
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 144,
        [_Location_file]: null
      });
    },
    get C258() {
      return C[258] = dart.constList([C[259] || CT.C259, C[260] || CT.C260], T$._LocationL());
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[258] || CT.C258,
        [_Location_name]: null,
        [_Location_column]: 30,
        [_Location_line]: 142,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 142,
        [_Location_file]: null
      });
    },
    get C262() {
      return C[262] = dart.constList([C[263] || CT.C263], T$._LocationL());
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[262] || CT.C262,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 141,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mapState",
        [_Location_column]: 11,
        [_Location_line]: 140,
        [_Location_file]: null
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 141,
        [_Location_file]: null
      });
    },
    get C265() {
      return C[265] = dart.constList([C[266] || CT.C266, C[267] || CT.C267], T$._LocationL());
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[265] || CT.C265,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 139,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mapState",
        [_Location_column]: 11,
        [_Location_line]: 156,
        [_Location_file]: null
      });
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 157,
        [_Location_file]: null
      });
    },
    get C269() {
      return C[269] = dart.constList([C[270] || CT.C270, C[271] || CT.C271], T$._LocationL());
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[269] || CT.C269,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 155,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 9,
        [_Location_line]: 78,
        [_Location_file]: null
      });
    },
    get C273() {
      return C[273] = dart.constList([C[274] || CT.C274], T$._LocationL());
    },
    get C272() {
      return C[272] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[273] || CT.C273,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 77,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "options",
        [_Location_column]: 11,
        [_Location_line]: 171,
        [_Location_file]: null
      });
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "mapState",
        [_Location_column]: 29,
        [_Location_line]: 171,
        [_Location_file]: null
      });
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 49,
        [_Location_line]: 171,
        [_Location_file]: null
      });
    },
    get C276() {
      return C[276] = dart.constList([C[277] || CT.C277, C[278] || CT.C278, C[279] || CT.C279], T$._LocationL());
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[276] || CT.C276,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 170,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C282() {
      return C[282] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "markerOpts",
        [_Location_column]: 26,
        [_Location_line]: 174,
        [_Location_file]: null
      });
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 174,
        [_Location_file]: null
      });
    },
    get C284() {
      return C[284] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 45,
        [_Location_line]: 174,
        [_Location_file]: null
      });
    },
    get C281() {
      return C[281] = dart.constList([C[282] || CT.C282, C[283] || CT.C283, C[284] || CT.C284], T$._LocationL());
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[281] || CT.C281,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 174,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C287() {
      return C[287] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polylineOpts",
        [_Location_column]: 28,
        [_Location_line]: 177,
        [_Location_file]: null
      });
    },
    get C288() {
      return C[288] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 37,
        [_Location_line]: 177,
        [_Location_file]: null
      });
    },
    get C289() {
      return C[289] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 47,
        [_Location_line]: 177,
        [_Location_file]: null
      });
    },
    get C286() {
      return C[286] = dart.constList([C[287] || CT.C287, C[288] || CT.C288, C[289] || CT.C289], T$._LocationL());
    },
    get C285() {
      return C[285] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[286] || CT.C286,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 177,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C292() {
      return C[292] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "polygonOpts",
        [_Location_column]: 27,
        [_Location_line]: 180,
        [_Location_file]: null
      });
    },
    get C293() {
      return C[293] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 36,
        [_Location_line]: 180,
        [_Location_file]: null
      });
    },
    get C294() {
      return C[294] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 46,
        [_Location_line]: 180,
        [_Location_file]: null
      });
    },
    get C291() {
      return C[291] = dart.constList([C[292] || CT.C292, C[293] || CT.C293, C[294] || CT.C294], T$._LocationL());
    },
    get C290() {
      return C[290] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[291] || CT.C291,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 180,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C297() {
      return C[297] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "circleOpts",
        [_Location_column]: 26,
        [_Location_line]: 183,
        [_Location_file]: null
      });
    },
    get C298() {
      return C[298] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 35,
        [_Location_line]: 183,
        [_Location_file]: null
      });
    },
    get C299() {
      return C[299] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 45,
        [_Location_line]: 183,
        [_Location_file]: null
      });
    },
    get C296() {
      return C[296] = dart.constList([C[297] || CT.C297, C[298] || CT.C298, C[299] || CT.C299], T$._LocationL());
    },
    get C295() {
      return C[295] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[296] || CT.C296,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 183,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C302() {
      return C[302] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "groupOpts",
        [_Location_column]: 25,
        [_Location_line]: 186,
        [_Location_file]: null
      });
    },
    get C303() {
      return C[303] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 34,
        [_Location_line]: 186,
        [_Location_file]: null
      });
    },
    get C304() {
      return C[304] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 44,
        [_Location_line]: 186,
        [_Location_file]: null
      });
    },
    get C301() {
      return C[301] = dart.constList([C[302] || CT.C302, C[303] || CT.C303, C[304] || CT.C304], T$._LocationL());
    },
    get C300() {
      return C[300] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[301] || CT.C301,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 186,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C307() {
      return C[307] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overlayImageOpts",
        [_Location_column]: 32,
        [_Location_line]: 189,
        [_Location_file]: null
      });
    },
    get C308() {
      return C[308] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "map",
        [_Location_column]: 41,
        [_Location_line]: 189,
        [_Location_file]: null
      });
    },
    get C309() {
      return C[309] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "stream",
        [_Location_column]: 51,
        [_Location_line]: 189,
        [_Location_file]: null
      });
    },
    get C306() {
      return C[306] = dart.constList([C[307] || CT.C307, C[308] || CT.C308, C[309] || CT.C309], T$._LocationL());
    },
    get C305() {
      return C[305] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[306] || CT.C306,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 189,
        [_Location_file]: "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart"
      });
    },
    get C311() {
      return C[311] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 0,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 0
      });
    },
    get C310() {
      return C[310] = dart.const({
        __proto__: flutter_map.FitBoundsOptions.prototype,
        [FitBoundsOptions_zoom]: null,
        [FitBoundsOptions_maxZoom]: 17,
        [FitBoundsOptions_padding]: C[311] || CT.C311
      });
    },
    get C312() {
      return C[312] = dart.constList([], T$.MapPluginL());
    }
  }, false);
  var C = Array(313).fill(void 0);
  var I = [
    "package:flutter_map/src/layer/tile_provider/tile_provider.dart",
    "package:flutter_map/src/layer/tile_provider/mbtiles_image_provider.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_provider/mbtiles_image_provider.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/layer/tile_layer.dart",
    "package:flutter_map/src/layer/tile_layer.dart",
    "package:flutter_map/src/layer/polyline_layer.dart",
    "package:flutter_map/src/layer/polygon_layer.dart",
    "package:flutter_map/src/layer/marker_layer.dart",
    "package:flutter_map/src/layer/circle_layer.dart",
    "package:flutter_map/src/plugins/plugin.dart",
    "package:flutter_map/src/layer/overlay_image_layer.dart",
    "package:flutter_map/src/layer/group_layer.dart",
    "package:flutter_map/src/map/map_state_widget.dart",
    "package:flutter_map/src/map/map.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/map.dart",
    "package:flutter_map/flutter_map.dart",
    "package:flutter_map/src/gestures/gestures.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/src/map/flutter_map_state.dart",
    "package:flutter_map/src/map/flutter_map_state.dart",
    "file:///C:/src/flutter/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_map-0.10.1+1/lib/flutter_map.dart"
  ];
  var asset$ = dart.privateName(mbtiles_image_provider, "MBTilesImageProvider.asset");
  var mbtilesFile$ = dart.privateName(mbtiles_image_provider, "MBTilesImageProvider.mbtilesFile");
  var database = dart.privateName(mbtiles_image_provider, "MBTilesImageProvider.database");
  var isDisposed = dart.privateName(mbtiles_image_provider, "MBTilesImageProvider.isDisposed");
  var _loadedDb = dart.privateName(mbtiles_image_provider, "_loadedDb");
  var _loadMBTilesDatabase = dart.privateName(mbtiles_image_provider, "_loadMBTilesDatabase");
  var _getZoomForUrl = dart.privateName(tile_provider, "_getZoomForUrl");
  tile_provider.TileProvider = class TileProvider extends core.Object {
    dispose() {
    }
    getTileUrl(coords, options) {
      let t0;
      let urlTemplate = options.wmsOptions != null ? options.wmsOptions.getUrl(coords, options.tileSize[$toInt](), options.retinaMode) : options.urlTemplate;
      let z = this[_getZoomForUrl](coords, options);
      let data = new (T$.IdentityMapOfStringL$StringL()).from(["x", coords.x[$round]()[$toString](), "y", coords.y[$round]()[$toString](), "z", z[$round]()[$toString](), "s", this.getSubdomain(coords, options), "r", "@2x"]);
      if (dart.test(options.tms)) {
        data[$_set]("y", dart.toString(this.invertY(coords.y[$round](), z[$round]())));
      }
      let allOpts = (t0 = T$.LinkedHashMapOfStringL$StringL().from(data), (() => {
        t0[$addAll](options.additionalOptions);
        return t0;
      })());
      return util.template(urlTemplate, allOpts);
    }
    [_getZoomForUrl](coords, options) {
      let zoom = coords.z;
      if (dart.test(options.zoomReverse)) {
        zoom = dart.notNull(options.maxZoom) - dart.notNull(zoom);
      }
      return zoom = dart.notNull(zoom) + dart.notNull(options.zoomOffset);
    }
    invertY(y, z) {
      return (1)[$leftShift](z) - 1 - dart.notNull(y);
    }
    getSubdomain(coords, options) {
      if (dart.test(options.subdomains[$isEmpty])) {
        return "";
      }
      let index = (dart.notNull(coords.x) + dart.notNull(coords.y))[$round]()[$modulo](options.subdomains[$length]);
      return options.subdomains[$_get](index);
    }
  };
  (tile_provider.TileProvider.new = function() {
    ;
  }).prototype = tile_provider.TileProvider.prototype;
  dart.addTypeTests(tile_provider.TileProvider);
  dart.addTypeCaches(tile_provider.TileProvider);
  dart.setMethodSignature(tile_provider.TileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.TileProvider.__proto__),
    dispose: dart.fnType(dart.void, []),
    getTileUrl: dart.fnType(dart.legacy(core.String), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)]),
    [_getZoomForUrl]: dart.fnType(dart.legacy(core.double), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)]),
    invertY: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int), dart.legacy(core.int)]),
    getSubdomain: dart.fnType(dart.legacy(core.String), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])
  }));
  dart.setLibraryUri(tile_provider.TileProvider, I[0]);
  mbtiles_image_provider.MBTilesImageProvider = class MBTilesImageProvider extends tile_provider.TileProvider {
    get asset() {
      return this[asset$];
    }
    set asset(value) {
      super.asset = value;
    }
    get mbtilesFile() {
      return this[mbtilesFile$];
    }
    set mbtilesFile(value) {
      super.mbtilesFile = value;
    }
    get database() {
      return this[database];
    }
    set database(value) {
      this[database] = value;
    }
    get isDisposed() {
      return this[isDisposed];
    }
    set isDisposed(value) {
      this[isDisposed] = value;
    }
    static fromAsset(asset) {
      return new mbtiles_image_provider.MBTilesImageProvider.__({asset: asset});
    }
    static fromFile(mbtilesFile) {
      return new mbtiles_image_provider.MBTilesImageProvider.__({mbtilesFile: mbtilesFile});
    }
    [_loadMBTilesDatabase]() {
      return async.async(T$.DatabaseL(), (function* _loadMBTilesDatabase() {
        let t0;
        if (this[_loadedDb] == null) {
          let file = (t0 = this.mbtilesFile, t0 == null ? (yield this.copyFileFromAssets()) : t0);
          this[_loadedDb] = (yield sqflite.openDatabase(file.path));
          if (dart.test(this.isDisposed)) {
            yield this[_loadedDb].close();
            this[_loadedDb] = null;
            dart.throw(core.Exception.new("Tileprovider is already disposed"));
          }
        }
        return this[_loadedDb];
      }).bind(this));
    }
    dispose() {
      if (this[_loadedDb] != null) {
        this[_loadedDb].close();
        this[_loadedDb] = null;
      }
      this.isDisposed = true;
    }
    copyFileFromAssets() {
      return async.async(T$.FileL(), (function* copyFileFromAssets() {
        let tempDir = (yield path_provider.getTemporaryDirectory());
        let filename = this.asset[$split]("/")[$last];
        let file = io.File.new(dart.str(tempDir.path) + "/" + dart.str(filename));
        let data = (yield asset_bundle.rootBundle.load(this.asset));
        file.writeAsBytesSync(data[$buffer][$asUint8List](data[$offsetInBytes], data[$lengthInBytes]), {flush: true});
        return file;
      }).bind(this));
    }
    getImage(coords, options) {
      let t0, t0$, t0$0;
      let x = coords.x[$round]();
      let y = dart.test(options.tms) ? this.invertY(coords.y[$round](), coords.z[$round]()) : coords.y[$round]();
      let z = coords.z[$round]();
      return new mbtiles_image_provider.MBTileImage.new(this.database, (t0 = new (T$.CoordsOfintL()).new(x, y), (() => {
        t0.z = z;
        return t0;
      })()), (t0$0 = (t0$ = this.mbtilesFile, t0$ == null ? null : t0$.path), t0$0 == null ? this.asset : t0$0));
    }
  };
  (mbtiles_image_provider.MBTilesImageProvider.__ = function(opts) {
    let asset = opts && 'asset' in opts ? opts.asset : null;
    let mbtilesFile = opts && 'mbtilesFile' in opts ? opts.mbtilesFile : null;
    this[database] = null;
    this[_loadedDb] = null;
    this[isDisposed] = false;
    this[asset$] = asset;
    this[mbtilesFile$] = mbtilesFile;
    mbtiles_image_provider.MBTilesImageProvider.__proto__.new.call(this);
    this.database = this[_loadMBTilesDatabase]();
  }).prototype = mbtiles_image_provider.MBTilesImageProvider.prototype;
  dart.addTypeTests(mbtiles_image_provider.MBTilesImageProvider);
  dart.addTypeCaches(mbtiles_image_provider.MBTilesImageProvider);
  dart.setMethodSignature(mbtiles_image_provider.MBTilesImageProvider, () => ({
    __proto__: dart.getMethods(mbtiles_image_provider.MBTilesImageProvider.__proto__),
    [_loadMBTilesDatabase]: dart.fnType(dart.legacy(async.Future$(dart.legacy(sqlite_api.Database))), []),
    copyFileFromAssets: dart.fnType(dart.legacy(async.Future$(dart.legacy(io.File))), []),
    getImage: dart.fnType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])
  }));
  dart.setLibraryUri(mbtiles_image_provider.MBTilesImageProvider, I[1]);
  dart.setFieldSignature(mbtiles_image_provider.MBTilesImageProvider, () => ({
    __proto__: dart.getFields(mbtiles_image_provider.MBTilesImageProvider.__proto__),
    asset: dart.finalFieldType(dart.legacy(core.String)),
    mbtilesFile: dart.finalFieldType(dart.legacy(io.File)),
    database: dart.fieldType(dart.legacy(async.Future$(dart.legacy(sqlite_api.Database)))),
    [_loadedDb]: dart.fieldType(dart.legacy(sqlite_api.Database)),
    isDisposed: dart.fieldType(dart.legacy(core.bool))
  }));
  var database$ = dart.privateName(mbtiles_image_provider, "MBTileImage.database");
  var coords$ = dart.privateName(mbtiles_image_provider, "MBTileImage.coords");
  var filePath$ = dart.privateName(mbtiles_image_provider, "MBTileImage.filePath");
  var _loadAsync = dart.privateName(mbtiles_image_provider, "_loadAsync");
  mbtiles_image_provider.MBTileImage = class MBTileImage extends image_provider.ImageProvider {
    get database() {
      return this[database$];
    }
    set database(value) {
      super.database = value;
    }
    get coords() {
      return this[coords$];
    }
    set coords(value) {
      super.coords = value;
    }
    get filePath() {
      return this[filePath$];
    }
    set filePath(value) {
      super.filePath = value;
    }
    load(key, decode) {
      T$.MBTileImageL().as(key);
      return new image_stream.MultiFrameImageStreamCompleter.new({codec: this[_loadAsync](key), scale: 1.0, informationCollector: dart.fn(() => new (T$.SyncIterableOfDiagnosticsNodeL()).new((function*() {
          yield new (T$.DiagnosticsPropertyOfImageProviderLOfObjectL()).new("Image provider", this);
          yield new (T$.DiagnosticsPropertyOfImageProviderLOfObjectL()).new("Image key", key);
        }).bind(this)), T$.VoidToIterableLOfDiagnosticsNodeL())});
    }
    [_loadAsync](key) {
      return async.async(T$.CodecL(), (function* _loadAsync() {
        if (!dart.equals(key, this)) dart.assertFailed(null, I[2], 103, 12, "key == this");
        let db = (yield key.database);
        let result = (yield db.rawQuery("select tile_data from tiles " + "where zoom_level = " + dart.str(this.coords.z) + " AND " + "tile_column = " + dart.str(this.coords.x) + " AND " + "tile_row = " + dart.str(this.coords.y) + " limit 1"));
        let bytes = T$.Uint8ListL().as(dart.test(result[$isNotEmpty]) ? result[$first][$_get]("tile_data") : null);
        if (bytes == null) {
          return T$.FutureOfCodecL().error("Failed to load tile for coords: " + dart.str(this.coords));
        }
        return yield binding.PaintingBinding.instance.instantiateImageCodec(bytes);
      }).bind(this));
    }
    obtainKey(configuration) {
      return new (T$.SynchronousFutureOfMBTileImageL()).new(this);
    }
    get hashCode() {
      return dart.hashCode(this.coords);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.MBTileImageL().is(other) && dart.equals(this.coords, other.coords) && this.filePath == other.filePath;
    }
  };
  (mbtiles_image_provider.MBTileImage.new = function(database, coords, filePath) {
    this[database$] = database;
    this[coords$] = coords;
    this[filePath$] = filePath;
    mbtiles_image_provider.MBTileImage.__proto__.new.call(this);
    ;
  }).prototype = mbtiles_image_provider.MBTileImage.prototype;
  dart.addTypeTests(mbtiles_image_provider.MBTileImage);
  dart.addTypeCaches(mbtiles_image_provider.MBTileImage);
  dart.setMethodSignature(mbtiles_image_provider.MBTileImage, () => ({
    __proto__: dart.getMethods(mbtiles_image_provider.MBTileImage.__proto__),
    load: dart.fnType(dart.legacy(image_stream.ImageStreamCompleter), [dart.legacy(core.Object), dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(typed_data.Uint8List)], {allowUpscaling: dart.legacy(core.bool), cacheHeight: dart.legacy(core.int), cacheWidth: dart.legacy(core.int)}, {}))]),
    [_loadAsync]: dart.fnType(dart.legacy(async.Future$(dart.legacy(ui.Codec))), [dart.legacy(mbtiles_image_provider.MBTileImage)]),
    obtainKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(mbtiles_image_provider.MBTileImage))), [dart.legacy(image_provider.ImageConfiguration)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(mbtiles_image_provider.MBTileImage, () => ({
    __proto__: dart.getGetters(mbtiles_image_provider.MBTileImage.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(mbtiles_image_provider.MBTileImage, I[1]);
  dart.setFieldSignature(mbtiles_image_provider.MBTileImage, () => ({
    __proto__: dart.getFields(mbtiles_image_provider.MBTileImage.__proto__),
    database: dart.finalFieldType(dart.legacy(async.Future$(dart.legacy(sqlite_api.Database)))),
    coords: dart.finalFieldType(dart.legacy(tile_layer.Coords$(dart.legacy(core.int)))),
    filePath: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(mbtiles_image_provider.MBTileImage, ['_equals']);
  dart.defineExtensionAccessors(mbtiles_image_provider.MBTileImage, ['hashCode']);
  tile_provider.CachedNetworkTileProvider = class CachedNetworkTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new _image_provider_web.CachedNetworkImageProvider.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.CachedNetworkTileProvider.new = function() {
    tile_provider.CachedNetworkTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.CachedNetworkTileProvider.prototype;
  dart.addTypeTests(tile_provider.CachedNetworkTileProvider);
  dart.addTypeCaches(tile_provider.CachedNetworkTileProvider);
  dart.setMethodSignature(tile_provider.CachedNetworkTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.CachedNetworkTileProvider.__proto__),
    getImage: dart.fnType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])
  }));
  dart.setLibraryUri(tile_provider.CachedNetworkTileProvider, I[0]);
  tile_provider.NetworkTileProvider = class NetworkTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new network.NetworkImageWithRetry.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.NetworkTileProvider.new = function() {
    tile_provider.NetworkTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.NetworkTileProvider.prototype;
  dart.addTypeTests(tile_provider.NetworkTileProvider);
  dart.addTypeCaches(tile_provider.NetworkTileProvider);
  dart.setMethodSignature(tile_provider.NetworkTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.NetworkTileProvider.__proto__),
    getImage: dart.fnType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])
  }));
  dart.setLibraryUri(tile_provider.NetworkTileProvider, I[0]);
  tile_provider.NonCachingNetworkTileProvider = class NonCachingNetworkTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new _network_image_web.NetworkImage.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.NonCachingNetworkTileProvider.new = function() {
    tile_provider.NonCachingNetworkTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.NonCachingNetworkTileProvider.prototype;
  dart.addTypeTests(tile_provider.NonCachingNetworkTileProvider);
  dart.addTypeCaches(tile_provider.NonCachingNetworkTileProvider);
  dart.setMethodSignature(tile_provider.NonCachingNetworkTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.NonCachingNetworkTileProvider.__proto__),
    getImage: dart.fnType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])
  }));
  dart.setLibraryUri(tile_provider.NonCachingNetworkTileProvider, I[0]);
  tile_provider.AssetTileProvider = class AssetTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new image_resolution.AssetImage.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.AssetTileProvider.new = function() {
    tile_provider.AssetTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.AssetTileProvider.prototype;
  dart.addTypeTests(tile_provider.AssetTileProvider);
  dart.addTypeCaches(tile_provider.AssetTileProvider);
  dart.setMethodSignature(tile_provider.AssetTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.AssetTileProvider.__proto__),
    getImage: dart.fnType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])
  }));
  dart.setLibraryUri(tile_provider.AssetTileProvider, I[0]);
  tile_provider.FileTileProvider = class FileTileProvider extends tile_provider.TileProvider {
    getImage(coords, options) {
      return new image_provider.FileImage.new(io.File.new(this.getTileUrl(coords, options)));
    }
  };
  (tile_provider.FileTileProvider.new = function() {
    tile_provider.FileTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.FileTileProvider.prototype;
  dart.addTypeTests(tile_provider.FileTileProvider);
  dart.addTypeCaches(tile_provider.FileTileProvider);
  dart.setMethodSignature(tile_provider.FileTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.FileTileProvider.__proto__),
    getImage: dart.fnType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])
  }));
  dart.setLibraryUri(tile_provider.FileTileProvider, I[0]);
  var customTileUrl$ = dart.privateName(tile_provider, "CustomTileProvider.customTileUrl");
  tile_provider.CustomTileProvider = class CustomTileProvider extends tile_provider.TileProvider {
    get customTileUrl() {
      return this[customTileUrl$];
    }
    set customTileUrl(value) {
      this[customTileUrl$] = value;
    }
    getTileUrl(coords, options) {
      let t1, t0;
      t0 = coords;
      t1 = options;
      return this.customTileUrl(t0, t1);
    }
    getImage(coords, options) {
      return new image_resolution.AssetImage.new(this.getTileUrl(coords, options));
    }
  };
  (tile_provider.CustomTileProvider.new = function(opts) {
    let customTileUrl = opts && 'customTileUrl' in opts ? opts.customTileUrl : null;
    this[customTileUrl$] = customTileUrl;
    tile_provider.CustomTileProvider.__proto__.new.call(this);
    ;
  }).prototype = tile_provider.CustomTileProvider.prototype;
  dart.addTypeTests(tile_provider.CustomTileProvider);
  dart.addTypeCaches(tile_provider.CustomTileProvider);
  dart.setMethodSignature(tile_provider.CustomTileProvider, () => ({
    __proto__: dart.getMethods(tile_provider.CustomTileProvider.__proto__),
    getImage: dart.fnType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])
  }));
  dart.setLibraryUri(tile_provider.CustomTileProvider, I[0]);
  dart.setFieldSignature(tile_provider.CustomTileProvider, () => ({
    __proto__: dart.getFields(tile_provider.CustomTileProvider.__proto__),
    customTileUrl: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(tile_layer.TileLayerOptions)])))
  }));
  var urlTemplate$ = dart.privateName(tile_layer, "TileLayerOptions.urlTemplate");
  var tms$ = dart.privateName(tile_layer, "TileLayerOptions.tms");
  var wmsOptions$ = dart.privateName(tile_layer, "TileLayerOptions.wmsOptions");
  var tileSize$ = dart.privateName(tile_layer, "TileLayerOptions.tileSize");
  var minZoom$ = dart.privateName(tile_layer, "TileLayerOptions.minZoom");
  var maxZoom$ = dart.privateName(tile_layer, "TileLayerOptions.maxZoom");
  var minNativeZoom$ = dart.privateName(tile_layer, "TileLayerOptions.minNativeZoom");
  var maxNativeZoom$ = dart.privateName(tile_layer, "TileLayerOptions.maxNativeZoom");
  var zoomReverse$ = dart.privateName(tile_layer, "TileLayerOptions.zoomReverse");
  var zoomOffset$ = dart.privateName(tile_layer, "TileLayerOptions.zoomOffset");
  var subdomains$ = dart.privateName(tile_layer, "TileLayerOptions.subdomains");
  var backgroundColor$ = dart.privateName(tile_layer, "TileLayerOptions.backgroundColor");
  var opacity$ = dart.privateName(tile_layer, "TileLayerOptions.opacity");
  var tileProvider$ = dart.privateName(tile_layer, "TileLayerOptions.tileProvider");
  var keepBuffer$ = dart.privateName(tile_layer, "TileLayerOptions.keepBuffer");
  var placeholderImage$ = dart.privateName(tile_layer, "TileLayerOptions.placeholderImage");
  var errorImage$ = dart.privateName(tile_layer, "TileLayerOptions.errorImage");
  var additionalOptions$ = dart.privateName(tile_layer, "TileLayerOptions.additionalOptions");
  var updateInterval$ = dart.privateName(tile_layer, "TileLayerOptions.updateInterval");
  var tileFadeInDuration$ = dart.privateName(tile_layer, "TileLayerOptions.tileFadeInDuration");
  var tileFadeInStart$ = dart.privateName(tile_layer, "TileLayerOptions.tileFadeInStart");
  var tileFadeInStartWhenOverride$ = dart.privateName(tile_layer, "TileLayerOptions.tileFadeInStartWhenOverride");
  var overrideTilesWhenUrlChanges$ = dart.privateName(tile_layer, "TileLayerOptions.overrideTilesWhenUrlChanges");
  var retinaMode$ = dart.privateName(tile_layer, "TileLayerOptions.retinaMode");
  var errorTileCallback$ = dart.privateName(tile_layer, "TileLayerOptions.errorTileCallback");
  var Color_value = dart.privateName(ui, "Color.value");
  tile_layer.TileLayerOptions = class TileLayerOptions extends layer.LayerOptions {
    get urlTemplate() {
      return this[urlTemplate$];
    }
    set urlTemplate(value) {
      super.urlTemplate = value;
    }
    get tms() {
      return this[tms$];
    }
    set tms(value) {
      super.tms = value;
    }
    get wmsOptions() {
      return this[wmsOptions$];
    }
    set wmsOptions(value) {
      super.wmsOptions = value;
    }
    get tileSize() {
      return this[tileSize$];
    }
    set tileSize(value) {
      super.tileSize = value;
    }
    get minZoom() {
      return this[minZoom$];
    }
    set minZoom(value) {
      super.minZoom = value;
    }
    get maxZoom() {
      return this[maxZoom$];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    get minNativeZoom() {
      return this[minNativeZoom$];
    }
    set minNativeZoom(value) {
      super.minNativeZoom = value;
    }
    get maxNativeZoom() {
      return this[maxNativeZoom$];
    }
    set maxNativeZoom(value) {
      super.maxNativeZoom = value;
    }
    get zoomReverse() {
      return this[zoomReverse$];
    }
    set zoomReverse(value) {
      super.zoomReverse = value;
    }
    get zoomOffset() {
      return this[zoomOffset$];
    }
    set zoomOffset(value) {
      super.zoomOffset = value;
    }
    get subdomains() {
      return this[subdomains$];
    }
    set subdomains(value) {
      super.subdomains = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get opacity() {
      return this[opacity$];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get tileProvider() {
      return this[tileProvider$];
    }
    set tileProvider(value) {
      super.tileProvider = value;
    }
    get keepBuffer() {
      return this[keepBuffer$];
    }
    set keepBuffer(value) {
      super.keepBuffer = value;
    }
    get placeholderImage() {
      return this[placeholderImage$];
    }
    set placeholderImage(value) {
      super.placeholderImage = value;
    }
    get errorImage() {
      return this[errorImage$];
    }
    set errorImage(value) {
      super.errorImage = value;
    }
    get additionalOptions() {
      return this[additionalOptions$];
    }
    set additionalOptions(value) {
      super.additionalOptions = value;
    }
    get updateInterval() {
      return this[updateInterval$];
    }
    set updateInterval(value) {
      super.updateInterval = value;
    }
    get tileFadeInDuration() {
      return this[tileFadeInDuration$];
    }
    set tileFadeInDuration(value) {
      super.tileFadeInDuration = value;
    }
    get tileFadeInStart() {
      return this[tileFadeInStart$];
    }
    set tileFadeInStart(value) {
      super.tileFadeInStart = value;
    }
    get tileFadeInStartWhenOverride() {
      return this[tileFadeInStartWhenOverride$];
    }
    set tileFadeInStartWhenOverride(value) {
      super.tileFadeInStartWhenOverride = value;
    }
    get overrideTilesWhenUrlChanges() {
      return this[overrideTilesWhenUrlChanges$];
    }
    set overrideTilesWhenUrlChanges(value) {
      super.overrideTilesWhenUrlChanges = value;
    }
    get retinaMode() {
      return this[retinaMode$];
    }
    set retinaMode(value) {
      super.retinaMode = value;
    }
    get errorTileCallback() {
      return this[errorTileCallback$];
    }
    set errorTileCallback(value) {
      super.errorTileCallback = value;
    }
  };
  (tile_layer.TileLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let urlTemplate = opts && 'urlTemplate' in opts ? opts.urlTemplate : null;
    let tileSize = opts && 'tileSize' in opts ? opts.tileSize : 256;
    let minZoom = opts && 'minZoom' in opts ? opts.minZoom : 0;
    let maxZoom = opts && 'maxZoom' in opts ? opts.maxZoom : 18;
    let minNativeZoom = opts && 'minNativeZoom' in opts ? opts.minNativeZoom : null;
    let maxNativeZoom = opts && 'maxNativeZoom' in opts ? opts.maxNativeZoom : null;
    let zoomReverse = opts && 'zoomReverse' in opts ? opts.zoomReverse : false;
    let zoomOffset = opts && 'zoomOffset' in opts ? opts.zoomOffset : 0;
    let additionalOptions = opts && 'additionalOptions' in opts ? opts.additionalOptions : C[0] || CT.C0;
    let subdomains = opts && 'subdomains' in opts ? opts.subdomains : C[1] || CT.C1;
    let keepBuffer = opts && 'keepBuffer' in opts ? opts.keepBuffer : 2;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : C[2] || CT.C2;
    let placeholderImage = opts && 'placeholderImage' in opts ? opts.placeholderImage : null;
    let errorImage = opts && 'errorImage' in opts ? opts.errorImage : null;
    let tileProvider = opts && 'tileProvider' in opts ? opts.tileProvider : C[3] || CT.C3;
    let tms = opts && 'tms' in opts ? opts.tms : false;
    let wmsOptions = opts && 'wmsOptions' in opts ? opts.wmsOptions : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
    let updateInterval = opts && 'updateInterval' in opts ? opts.updateInterval : 200;
    let tileFadeInDuration = opts && 'tileFadeInDuration' in opts ? opts.tileFadeInDuration : 100;
    let tileFadeInStart = opts && 'tileFadeInStart' in opts ? opts.tileFadeInStart : 0;
    let tileFadeInStartWhenOverride = opts && 'tileFadeInStartWhenOverride' in opts ? opts.tileFadeInStartWhenOverride : 0;
    let overrideTilesWhenUrlChanges = opts && 'overrideTilesWhenUrlChanges' in opts ? opts.overrideTilesWhenUrlChanges : false;
    let retinaMode = opts && 'retinaMode' in opts ? opts.retinaMode : false;
    let errorTileCallback = opts && 'errorTileCallback' in opts ? opts.errorTileCallback : null;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[urlTemplate$] = urlTemplate;
    this[minNativeZoom$] = minNativeZoom;
    this[maxNativeZoom$] = maxNativeZoom;
    this[zoomReverse$] = zoomReverse;
    this[additionalOptions$] = additionalOptions;
    this[subdomains$] = subdomains;
    this[keepBuffer$] = keepBuffer;
    this[backgroundColor$] = backgroundColor;
    this[placeholderImage$] = placeholderImage;
    this[errorImage$] = errorImage;
    this[tileProvider$] = tileProvider;
    this[tms$] = tms;
    this[wmsOptions$] = wmsOptions;
    this[opacity$] = opacity;
    this[tileFadeInStart$] = tileFadeInStart;
    this[tileFadeInStartWhenOverride$] = tileFadeInStartWhenOverride;
    this[overrideTilesWhenUrlChanges$] = overrideTilesWhenUrlChanges;
    this[retinaMode$] = retinaMode;
    this[errorTileCallback$] = errorTileCallback;
    this[updateInterval$] = dart.notNull(updateInterval) <= 0 ? null : new core.Duration.new({milliseconds: updateInterval});
    this[tileFadeInDuration$] = dart.notNull(tileFadeInDuration) <= 0 ? null : new core.Duration.new({milliseconds: tileFadeInDuration});
    if (!(dart.notNull(tileFadeInStart) >= 0.0 && dart.notNull(tileFadeInStart) <= 1.0)) dart.assertFailed(null, I[3], 233, 16, "tileFadeInStart >= 0.0 && tileFadeInStart <= 1.0");
    if (!(dart.notNull(tileFadeInStartWhenOverride) >= 0.0 && dart.notNull(tileFadeInStartWhenOverride) <= 1.0)) dart.assertFailed(null, I[3], 234, 16, "tileFadeInStartWhenOverride >= 0.0 &&\n            tileFadeInStartWhenOverride <= 1.0");
    this[maxZoom$] = wmsOptions == null && dart.test(retinaMode) && dart.notNull(maxZoom) > 0.0 && !dart.test(zoomReverse) ? dart.notNull(maxZoom) - 1.0 : maxZoom;
    this[minZoom$] = wmsOptions == null && dart.test(retinaMode) && dart.notNull(maxZoom) > 0.0 && dart.test(zoomReverse) ? math.max(T$.doubleL(), dart.notNull(minZoom) + 1.0, 0.0) : minZoom;
    this[zoomOffset$] = wmsOptions == null && dart.test(retinaMode) && dart.notNull(maxZoom) > 0.0 ? dart.test(zoomReverse) ? dart.notNull(zoomOffset) - 1.0 : dart.notNull(zoomOffset) + 1.0 : zoomOffset;
    this[tileSize$] = wmsOptions == null && dart.test(retinaMode) && dart.notNull(maxZoom) > 0.0 ? (dart.notNull(tileSize) / 2.0)[$floorToDouble]() : tileSize;
    tile_layer.TileLayerOptions.__proto__.new.call(this, {key: key, rebuild: T$.StreamLOfNull().as(rebuild)});
    ;
  }).prototype = tile_layer.TileLayerOptions.prototype;
  dart.addTypeTests(tile_layer.TileLayerOptions);
  dart.addTypeCaches(tile_layer.TileLayerOptions);
  dart.setLibraryUri(tile_layer.TileLayerOptions, I[4]);
  dart.setFieldSignature(tile_layer.TileLayerOptions, () => ({
    __proto__: dart.getFields(tile_layer.TileLayerOptions.__proto__),
    urlTemplate: dart.finalFieldType(dart.legacy(core.String)),
    tms: dart.finalFieldType(dart.legacy(core.bool)),
    wmsOptions: dart.finalFieldType(dart.legacy(tile_layer.WMSTileLayerOptions)),
    tileSize: dart.finalFieldType(dart.legacy(core.double)),
    minZoom: dart.finalFieldType(dart.legacy(core.double)),
    maxZoom: dart.finalFieldType(dart.legacy(core.double)),
    minNativeZoom: dart.finalFieldType(dart.legacy(core.double)),
    maxNativeZoom: dart.finalFieldType(dart.legacy(core.double)),
    zoomReverse: dart.finalFieldType(dart.legacy(core.bool)),
    zoomOffset: dart.finalFieldType(dart.legacy(core.double)),
    subdomains: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    backgroundColor: dart.finalFieldType(dart.legacy(ui.Color)),
    opacity: dart.finalFieldType(dart.legacy(core.double)),
    tileProvider: dart.finalFieldType(dart.legacy(tile_provider.TileProvider)),
    keepBuffer: dart.finalFieldType(dart.legacy(core.int)),
    placeholderImage: dart.finalFieldType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object)))),
    errorImage: dart.finalFieldType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object)))),
    additionalOptions: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    updateInterval: dart.finalFieldType(dart.legacy(core.Duration)),
    tileFadeInDuration: dart.finalFieldType(dart.legacy(core.Duration)),
    tileFadeInStart: dart.finalFieldType(dart.legacy(core.double)),
    tileFadeInStartWhenOverride: dart.finalFieldType(dart.legacy(core.double)),
    overrideTilesWhenUrlChanges: dart.finalFieldType(dart.legacy(core.bool)),
    retinaMode: dart.finalFieldType(dart.legacy(core.bool)),
    errorTileCallback: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(tile_layer.Tile), dart.dynamic])))
  }));
  var service = dart.privateName(tile_layer, "WMSTileLayerOptions.service");
  var request = dart.privateName(tile_layer, "WMSTileLayerOptions.request");
  var baseUrl$ = dart.privateName(tile_layer, "WMSTileLayerOptions.baseUrl");
  var layers$ = dart.privateName(tile_layer, "WMSTileLayerOptions.layers");
  var styles$ = dart.privateName(tile_layer, "WMSTileLayerOptions.styles");
  var format$ = dart.privateName(tile_layer, "WMSTileLayerOptions.format");
  var version$ = dart.privateName(tile_layer, "WMSTileLayerOptions.version");
  var transparent$ = dart.privateName(tile_layer, "WMSTileLayerOptions.transparent");
  var crs$ = dart.privateName(tile_layer, "WMSTileLayerOptions.crs");
  var otherParameters$ = dart.privateName(tile_layer, "WMSTileLayerOptions.otherParameters");
  var Earth_wrapLat = dart.privateName(crs, "Earth.wrapLat");
  var Tuple2_item2 = dart.privateName(tuple, "Tuple2.item2");
  var Tuple2_item1 = dart.privateName(tuple, "Tuple2.item1");
  var Earth_wrapLng = dart.privateName(crs, "Earth.wrapLng");
  var Transformation_d = dart.privateName(crs, "Transformation.d");
  var Transformation_c = dart.privateName(crs, "Transformation.c");
  var Transformation_b = dart.privateName(crs, "Transformation.b");
  var Transformation_a = dart.privateName(crs, "Transformation.a");
  var Epsg3857_transformation = dart.privateName(crs, "Epsg3857.transformation");
  var Epsg3857_projection = dart.privateName(crs, "Epsg3857.projection");
  var Epsg3857_code = dart.privateName(crs, "Epsg3857.code");
  var _encodedBaseUrl = dart.privateName(tile_layer, "_encodedBaseUrl");
  var _versionNumber = dart.privateName(tile_layer, "_versionNumber");
  var _buildEncodedBaseUrl = dart.privateName(tile_layer, "_buildEncodedBaseUrl");
  tile_layer.WMSTileLayerOptions = class WMSTileLayerOptions extends core.Object {
    get service() {
      return this[service];
    }
    set service(value) {
      super.service = value;
    }
    get request() {
      return this[request];
    }
    set request(value) {
      super.request = value;
    }
    get baseUrl() {
      return this[baseUrl$];
    }
    set baseUrl(value) {
      super.baseUrl = value;
    }
    get layers() {
      return this[layers$];
    }
    set layers(value) {
      super.layers = value;
    }
    get styles() {
      return this[styles$];
    }
    set styles(value) {
      super.styles = value;
    }
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    get version() {
      return this[version$];
    }
    set version(value) {
      super.version = value;
    }
    get transparent() {
      return this[transparent$];
    }
    set transparent(value) {
      super.transparent = value;
    }
    get crs() {
      return this[crs$];
    }
    set crs(value) {
      super.crs = value;
    }
    get otherParameters() {
      return this[otherParameters$];
    }
    set otherParameters(value) {
      super.otherParameters = value;
    }
    [_buildEncodedBaseUrl]() {
      let t0;
      let projectionKey = dart.notNull(this[_versionNumber]) >= 1.3 ? "crs" : "srs";
      let buffer = (t0 = new core.StringBuffer.new(this.baseUrl), (() => {
        t0.write("&service=" + dart.str(this.service));
        t0.write("&request=" + dart.str(this.request));
        t0.write("&layers=" + dart.str(this.layers[$map](T$.StringL(), C[8] || CT.C8)[$join](",")));
        t0.write("&styles=" + dart.str(this.styles[$map](T$.StringL(), C[8] || CT.C8)[$join](",")));
        t0.write("&format=" + dart.str(core.Uri.encodeComponent(this.format)));
        t0.write("&" + projectionKey + "=" + dart.str(core.Uri.encodeComponent(this.crs.code)));
        t0.write("&version=" + dart.str(core.Uri.encodeComponent(this.version)));
        t0.write("&transparent=" + dart.str(this.transparent));
        return t0;
      })());
      this.otherParameters[$forEach](dart.fn((k, v) => buffer.write("&" + dart.str(k) + "=" + dart.str(core.Uri.encodeComponent(v))), T$.StringLAndStringLTovoid()));
      return dart.toString(buffer);
    }
    getUrl(coords, tileSize, retinaMode) {
      let tileSizePoint = new (T$.CustomPointOfnumL()).new(tileSize, tileSize);
      let nvPoint = coords.scaleBy(tileSizePoint);
      let sePoint = nvPoint['+'](tileSizePoint);
      let nvCoords = this.crs.pointToLatLng(nvPoint, coords.z);
      let seCoords = this.crs.pointToLatLng(sePoint, coords.z);
      let nv = this.crs.projection.project(nvCoords);
      let se = this.crs.projection.project(seCoords);
      let bounds = T$.BoundsOfnumL().new(nv, se);
      let bbox = dart.notNull(this[_versionNumber]) >= 1.3 && T$.Epsg4326L().is(this.crs) ? T$.JSArrayOfnumL().of([bounds.min.y, bounds.min.x, bounds.max.y, bounds.max.x]) : T$.JSArrayOfnumL().of([bounds.min.x, bounds.min.y, bounds.max.x, bounds.max.y]);
      let buffer = new core.StringBuffer.new(this[_encodedBaseUrl]);
      buffer.write("&width=" + dart.str(dart.test(retinaMode) ? dart.notNull(tileSize) * 2 : tileSize));
      buffer.write("&height=" + dart.str(dart.test(retinaMode) ? dart.notNull(tileSize) * 2 : tileSize));
      buffer.write("&bbox=" + dart.str(bbox[$join](",")));
      return buffer.toString();
    }
  };
  (tile_layer.WMSTileLayerOptions.new = function(opts) {
    let t0;
    let baseUrl = opts && 'baseUrl' in opts ? opts.baseUrl : null;
    let layers = opts && 'layers' in opts ? opts.layers : C[1] || CT.C1;
    let styles = opts && 'styles' in opts ? opts.styles : C[1] || CT.C1;
    let format = opts && 'format' in opts ? opts.format : "image/png";
    let version = opts && 'version' in opts ? opts.version : "1.1.1";
    let transparent = opts && 'transparent' in opts ? opts.transparent : true;
    let crs = opts && 'crs' in opts ? opts.crs : C[4] || CT.C4;
    let otherParameters = opts && 'otherParameters' in opts ? opts.otherParameters : C[0] || CT.C0;
    this[service] = "WMS";
    this[request] = "GetMap";
    this[_encodedBaseUrl] = null;
    this[_versionNumber] = null;
    this[baseUrl$] = baseUrl;
    this[layers$] = layers;
    this[styles$] = styles;
    this[format$] = format;
    this[version$] = version;
    this[transparent$] = transparent;
    this[crs$] = crs;
    this[otherParameters$] = otherParameters;
    this[_versionNumber] = (t0 = core.double.tryParse(this.version[$split](".")[$take](2)[$join](".")), t0 == null ? 0.0 : t0);
    this[_encodedBaseUrl] = this[_buildEncodedBaseUrl]();
  }).prototype = tile_layer.WMSTileLayerOptions.prototype;
  dart.addTypeTests(tile_layer.WMSTileLayerOptions);
  dart.addTypeCaches(tile_layer.WMSTileLayerOptions);
  dart.setMethodSignature(tile_layer.WMSTileLayerOptions, () => ({
    __proto__: dart.getMethods(tile_layer.WMSTileLayerOptions.__proto__),
    [_buildEncodedBaseUrl]: dart.fnType(dart.legacy(core.String), []),
    getUrl: dart.fnType(dart.legacy(core.String), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), dart.legacy(core.int), dart.legacy(core.bool)])
  }));
  dart.setLibraryUri(tile_layer.WMSTileLayerOptions, I[4]);
  dart.setFieldSignature(tile_layer.WMSTileLayerOptions, () => ({
    __proto__: dart.getFields(tile_layer.WMSTileLayerOptions.__proto__),
    service: dart.finalFieldType(dart.legacy(core.String)),
    request: dart.finalFieldType(dart.legacy(core.String)),
    baseUrl: dart.finalFieldType(dart.legacy(core.String)),
    layers: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    styles: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    format: dart.finalFieldType(dart.legacy(core.String)),
    version: dart.finalFieldType(dart.legacy(core.String)),
    transparent: dart.finalFieldType(dart.legacy(core.bool)),
    crs: dart.finalFieldType(dart.legacy(crs.Crs)),
    otherParameters: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    [_encodedBaseUrl]: dart.fieldType(dart.legacy(core.String)),
    [_versionNumber]: dart.fieldType(dart.legacy(core.double))
  }));
  var options$ = dart.privateName(tile_layer, "TileLayerWidget.options");
  tile_layer.TileLayerWidget = class TileLayerWidget extends framework.StatefulWidget {
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    createState() {
      return new tile_layer._TileLayerWidgetState.new();
    }
  };
  (tile_layer.TileLayerWidget.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$] = options;
    tile_layer.TileLayerWidget.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tile_layer.TileLayerWidget.prototype;
  dart.addTypeTests(tile_layer.TileLayerWidget);
  dart.addTypeCaches(tile_layer.TileLayerWidget);
  dart.setMethodSignature(tile_layer.TileLayerWidget, () => ({
    __proto__: dart.getMethods(tile_layer.TileLayerWidget.__proto__),
    createState: dart.fnType(dart.legacy(framework.State$(dart.legacy(framework.StatefulWidget))), [])
  }));
  dart.setLibraryUri(tile_layer.TileLayerWidget, I[4]);
  dart.setFieldSignature(tile_layer.TileLayerWidget, () => ({
    __proto__: dart.getFields(tile_layer.TileLayerWidget.__proto__),
    options: dart.finalFieldType(dart.legacy(tile_layer.TileLayerOptions))
  }));
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  tile_layer._TileLayerWidgetState = class _TileLayerWidgetState extends framework.State$(dart.legacy(tile_layer.TileLayerWidget)) {
    build(context) {
      let mapState = map.MapState.of(context);
      return new tile_layer.TileLayer.new({mapState: mapState, stream: mapState.onMoved, options: this.widget.options, $creationLocationd_0dea112b090073317d4: C[9] || CT.C9});
    }
  };
  (tile_layer._TileLayerWidgetState.new = function() {
    tile_layer._TileLayerWidgetState.__proto__.new.call(this);
    ;
  }).prototype = tile_layer._TileLayerWidgetState.prototype;
  dart.addTypeTests(tile_layer._TileLayerWidgetState);
  dart.addTypeCaches(tile_layer._TileLayerWidgetState);
  dart.setMethodSignature(tile_layer._TileLayerWidgetState, () => ({
    __proto__: dart.getMethods(tile_layer._TileLayerWidgetState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(tile_layer._TileLayerWidgetState, I[4]);
  var options$0 = dart.privateName(tile_layer, "TileLayer.options");
  var mapState$ = dart.privateName(tile_layer, "TileLayer.mapState");
  var stream$ = dart.privateName(tile_layer, "TileLayer.stream");
  tile_layer.TileLayer = class TileLayer extends framework.StatefulWidget {
    get options() {
      return this[options$0];
    }
    set options(value) {
      super.options = value;
    }
    get mapState() {
      return this[mapState$];
    }
    set mapState(value) {
      super.mapState = value;
    }
    get stream() {
      return this[stream$];
    }
    set stream(value) {
      super.stream = value;
    }
    createState() {
      return new tile_layer._TileLayerState.new();
    }
  };
  (tile_layer.TileLayer.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let mapState = opts && 'mapState' in opts ? opts.mapState : null;
    let stream = opts && 'stream' in opts ? opts.stream : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$0] = options;
    this[mapState$] = mapState;
    this[stream$] = stream;
    tile_layer.TileLayer.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tile_layer.TileLayer.prototype;
  dart.addTypeTests(tile_layer.TileLayer);
  dart.addTypeCaches(tile_layer.TileLayer);
  dart.setMethodSignature(tile_layer.TileLayer, () => ({
    __proto__: dart.getMethods(tile_layer.TileLayer.__proto__),
    createState: dart.fnType(dart.legacy(framework.State$(dart.legacy(framework.StatefulWidget))), [])
  }));
  dart.setLibraryUri(tile_layer.TileLayer, I[4]);
  dart.setFieldSignature(tile_layer.TileLayer, () => ({
    __proto__: dart.getFields(tile_layer.TileLayer.__proto__),
    options: dart.finalFieldType(dart.legacy(tile_layer.TileLayerOptions)),
    mapState: dart.finalFieldType(dart.legacy(map.MapState)),
    stream: dart.finalFieldType(dart.legacy(async.Stream$(core.Null)))
  }));
  var _globalTileRange = dart.privateName(tile_layer, "_globalTileRange");
  var _wrapX = dart.privateName(tile_layer, "_wrapX");
  var _wrapY = dart.privateName(tile_layer, "_wrapY");
  var _tileZoom = dart.privateName(tile_layer, "_tileZoom");
  var _level = dart.privateName(tile_layer, "_level");
  var _moveSub = dart.privateName(tile_layer, "_moveSub");
  var _throttleUpdate = dart.privateName(tile_layer, "_throttleUpdate");
  var _tileSize = dart.privateName(tile_layer, "_tileSize");
  var _tiles = dart.privateName(tile_layer, "_tiles");
  var _levels = dart.privateName(tile_layer, "_levels");
  var _resetView = dart.privateName(tile_layer, "_resetView");
  var _update = dart.privateName(tile_layer, "_update");
  var _handleMove = dart.privateName(tile_layer, "_handleMove");
  var _initThrottleUpdate = dart.privateName(tile_layer, "_initThrottleUpdate");
  var _wrapCoords = dart.privateName(tile_layer, "_wrapCoords");
  var _removeAllTiles = dart.privateName(tile_layer, "_removeAllTiles");
  var _createTileWidget = dart.privateName(tile_layer, "_createTileWidget");
  var _abortLoading = dart.privateName(tile_layer, "_abortLoading");
  var _hasLevelChildren = dart.privateName(tile_layer, "_hasLevelChildren");
  var _removeTilesAtZoom = dart.privateName(tile_layer, "_removeTilesAtZoom");
  var _setZoomTransform = dart.privateName(tile_layer, "_setZoomTransform");
  var _updateLevels = dart.privateName(tile_layer, "_updateLevels");
  var _retainParent = dart.privateName(tile_layer, "_retainParent");
  var _retainChildren = dart.privateName(tile_layer, "_retainChildren");
  var _removeTile = dart.privateName(tile_layer, "_removeTile");
  var _pruneTiles = dart.privateName(tile_layer, "_pruneTiles");
  var _tileCoordsToKey = dart.privateName(tile_layer, "_tileCoordsToKey");
  var _setView = dart.privateName(tile_layer, "_setView");
  var _clampZoom = dart.privateName(tile_layer, "_clampZoom");
  var _resetGrid = dart.privateName(tile_layer, "_resetGrid");
  var _setZoomTransforms = dart.privateName(tile_layer, "_setZoomTransforms");
  var _pxBoundsToTileRange = dart.privateName(tile_layer, "_pxBoundsToTileRange");
  var _getTiledPixelBounds = dart.privateName(tile_layer, "_getTiledPixelBounds");
  var _isValidTile = dart.privateName(tile_layer, "_isValidTile");
  var _addTile = dart.privateName(tile_layer, "_addTile");
  var _keyToTileCoords = dart.privateName(tile_layer, "_keyToTileCoords");
  var _getTilePos = dart.privateName(tile_layer, "_getTilePos");
  var _tileReady = dart.privateName(tile_layer, "_tileReady");
  var _noTilesToLoad = dart.privateName(tile_layer, "_noTilesToLoad");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var Point_y = dart.privateName(math, "Point.y");
  var Point_x = dart.privateName(math, "Point.x");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(dart.legacy(tile_layer.TileLayer)) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(dart.legacy(tile_layer.TileLayer))[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(dart.legacy(tile_layer.TileLayer)));
  tile_layer._TileLayerState = class _TileLayerState extends State_TickerProviderStateMixin$36 {
    get map() {
      return this.widget.mapState;
    }
    get options() {
      return this.widget.options;
    }
    initState() {
      super.initState();
      this[_tileSize] = new (T$.CustomPointOfnumL()).new(this.options.tileSize, this.options.tileSize);
      this[_resetView]();
      this[_update](null);
      this[_moveSub] = this.widget.stream.listen(dart.fn(_ => this[_handleMove](), T$.ObjectLTovoid()));
      this[_initThrottleUpdate]();
    }
    didUpdateWidget(oldWidget) {
      let t0, t0$, t0$0, t0$1, t0$2;
      T$.TileLayerL().as(oldWidget);
      super.didUpdateWidget(oldWidget);
      let reloadTiles = false;
      if (oldWidget.options.tileSize != this.options.tileSize) {
        this[_tileSize] = new (T$.CustomPointOfnumL()).new(this.options.tileSize, this.options.tileSize);
        reloadTiles = true;
      }
      if (!dart.equals(oldWidget.options.retinaMode, this.options.retinaMode)) {
        reloadTiles = true;
      }
      if (!dart.equals(oldWidget.options.updateInterval, this.options.updateInterval)) {
        t0 = this[_throttleUpdate];
        t0 == null ? null : t0.close();
        this[_initThrottleUpdate]();
      }
      if (!reloadTiles) {
        let oldUrl = (t0$0 = (t0$ = oldWidget.options.wmsOptions, t0$ == null ? null : t0$[_encodedBaseUrl]), t0$0 == null ? oldWidget.options.urlTemplate : t0$0);
        let newUrl = (t0$2 = (t0$1 = this.options.wmsOptions, t0$1 == null ? null : t0$1[_encodedBaseUrl]), t0$2 == null ? this.options.urlTemplate : t0$2);
        if (oldUrl != newUrl) {
          if (dart.test(this.options.overrideTilesWhenUrlChanges)) {
            for (let tile of this[_tiles][$values]) {
              tile.imageProvider = this.options.tileProvider.getImage(this[_wrapCoords](tile.coords), this.options);
              tile.loadTileImage();
            }
          } else {
            reloadTiles = true;
          }
        }
      }
      if (reloadTiles) {
        this[_removeAllTiles]();
        this[_resetView]();
        this[_update](null);
      }
    }
    [_initThrottleUpdate]() {
      let t0;
      if (this.options.updateInterval == null) {
        this[_throttleUpdate] = null;
      } else {
        this[_throttleUpdate] = T$.StreamControllerOfLatLngL().new({sync: true});
        t0 = this[_throttleUpdate].stream.transform(T$.LatLngL(), util.throttleStreamTransformerWithTrailingCall(T$.LatLngL(), this.options.updateInterval));
        (() => {
          t0.listen(dart.bind(this, _update));
          return t0;
        })();
      }
    }
    dispose() {
      let t0, t0$;
      this[_removeAllTiles]();
      t0 = this[_moveSub];
      t0 == null ? null : t0.cancel();
      this.options.tileProvider.dispose();
      t0$ = this[_throttleUpdate];
      t0$ == null ? null : t0$.close();
      super.dispose();
    }
    build(context) {
      let t0;
      let tilesToRender = (t0 = this[_tiles][$values][$toList](), (() => {
        t0[$sort]();
        return t0;
      })());
      let tileWidgets = (() => {
        let t0 = T$.JSArrayOfWidgetL().of([]);
        for (let tile of tilesToRender)
          t0.push(this[_createTileWidget](tile));
        return t0;
      })();
      return new basic.Opacity.new({opacity: this.options.opacity, child: new container.Container.new({color: this.options.backgroundColor, child: new basic.Stack.new({children: tileWidgets, $creationLocationd_0dea112b090073317d4: C[14] || CT.C14}), $creationLocationd_0dea112b090073317d4: C[17] || CT.C17}), $creationLocationd_0dea112b090073317d4: C[21] || CT.C21});
    }
    [_createTileWidget](tile) {
      let tilePos = tile.tilePos;
      let level = tile.level;
      let tileSize = this.getTileSize();
      let pos = tilePos.multiplyBy(level.scale)['+'](level.translatePoint);
      let width = dart.notNull(tileSize.x) * dart.notNull(level.scale);
      let height = dart.notNull(tileSize.y) * dart.notNull(level.scale);
      let content = new tile_layer.AnimatedTile.new({tile: tile, errorImage: this.options.errorImage, $creationLocationd_0dea112b090073317d4: C[25] || CT.C25});
      return new basic.Positioned.new({key: new (T$.ValueKeyOfStringL()).new(tile.coordsKey), left: pos.x[$toDouble](), top: pos.y[$toDouble](), width: width[$toDouble](), height: height[$toDouble](), child: content, $creationLocationd_0dea112b090073317d4: C[29] || CT.C29});
    }
    [_abortLoading]() {
      let toRemove = T$.JSArrayOfStringL().of([]);
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        if (tile.coords.z != this[_tileZoom]) {
          if (tile.loaded == null) {
            toRemove[$add](entry.key);
          }
        }
      }
      for (let key of toRemove) {
        let tile = this[_tiles][$_get](key);
        tile.tileReady = null;
        tile.dispose();
        this[_tiles][$remove](key);
      }
    }
    getTileSize() {
      return this[_tileSize];
    }
    [_hasLevelChildren](lvl) {
      for (let tile of this[_tiles][$values]) {
        if (tile.coords.z == lvl) {
          return true;
        }
      }
      return false;
    }
    [_updateLevels]() {
      let t3, t2, t1, t1$;
      let zoom = this[_tileZoom];
      let maxZoom = this.options.maxZoom;
      if (zoom == null) return null;
      let toRemove = T$.JSArrayOfdoubleL().of([]);
      for (let entry of this[_levels][$entries]) {
        let z = entry.key;
        let lvl = entry.value;
        if (z == zoom || dart.test(this[_hasLevelChildren](z))) {
          lvl.zIndex = dart.notNull(maxZoom) - (dart.notNull(zoom) - dart.notNull(z))[$abs]();
        } else {
          toRemove[$add](z);
        }
      }
      for (let z of toRemove) {
        this[_removeTilesAtZoom](z);
        this[_levels][$remove](z);
      }
      let level = this[_levels][$_get](zoom);
      let map = this.map;
      if (level == null) {
        level = (t1 = this[_levels], t2 = zoom, t3 = new tile_layer.Level.new(), t1[$_set](t2, t3), t3);
        level.zIndex = maxZoom;
        level.origin = (t1$ = map.project(map.unproject(map.getPixelOrigin()), zoom), t1$ == null ? new (T$.CustomPointOfnumL()).new(0.0, 0.0) : t1$);
        level.zoom = zoom;
        this[_setZoomTransform](level, map.center, map.zoom);
      }
      return this[_level] = level;
    }
    [_pruneTiles]() {
      if (this.map == null) {
        return;
      }
      let zoom = this[_tileZoom];
      if (zoom == null) {
        this[_removeAllTiles]();
        return;
      }
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        tile.retain = tile.current;
      }
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        if (dart.test(tile.current) && !dart.test(tile.active)) {
          let coords = tile.coords;
          if (!dart.test(this[_retainParent](coords.x, coords.y, coords.z, dart.notNull(coords.z) - 5))) {
            this[_retainChildren](coords.x, coords.y, coords.z, dart.notNull(coords.z) + 2);
          }
        }
      }
      let toRemove = T$.JSArrayOfStringL().of([]);
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        if (!dart.test(tile.retain)) {
          toRemove[$add](entry.key);
        }
      }
      for (let key of toRemove) {
        this[_removeTile](key);
      }
    }
    [_removeTilesAtZoom](zoom) {
      let toRemove = T$.JSArrayOfStringL().of([]);
      for (let entry of this[_tiles][$entries]) {
        if (entry.value.coords.z != zoom) {
          continue;
        }
        toRemove[$add](entry.key);
      }
      for (let key of toRemove) {
        this[_removeTile](key);
      }
    }
    [_removeAllTiles]() {
      let toRemove = T$.LinkedHashMapOfStringL$TileL().from(this[_tiles]);
      for (let key of toRemove[$keys]) {
        this[_removeTile](key);
      }
    }
    [_retainParent](x, y, z, minZoom) {
      let x2 = (dart.notNull(x) / 2)[$floorToDouble]();
      let y2 = (dart.notNull(y) / 2)[$floorToDouble]();
      let z2 = dart.notNull(z) - 1;
      let coords2 = new (T$.CoordsOfdoubleL()).new(x2, y2);
      coords2.z = z2;
      let key = this[_tileCoordsToKey](coords2);
      let tile = this[_tiles][$_get](key);
      if (tile != null) {
        if (dart.test(tile.active)) {
          tile.retain = true;
          return true;
        } else if (tile.loaded != null) {
          tile.retain = true;
        }
      }
      if (z2 > dart.notNull(minZoom)) {
        return this[_retainParent](x2, y2, z2, minZoom);
      }
      return false;
    }
    [_retainChildren](x, y, z, maxZoom) {
      for (let i = 2 * dart.notNull(x); i < 2 * dart.notNull(x) + 2; i = i + 1) {
        for (let j = 2 * dart.notNull(y); j < 2 * dart.notNull(y) + 2; j = j + 1) {
          let coords = new (T$.CoordsOfdoubleL()).new(i, j);
          coords.z = dart.notNull(z) + 1;
          let key = this[_tileCoordsToKey](coords);
          let tile = this[_tiles][$_get](key);
          if (tile != null) {
            if (dart.test(tile.active)) {
              tile.retain = true;
              continue;
            } else if (tile.loaded != null) {
              tile.retain = true;
            }
          }
          if (dart.notNull(z) + 1 < dart.notNull(maxZoom)) {
            this[_retainChildren](i, j, dart.notNull(z) + 1, maxZoom);
          }
        }
      }
    }
    [_resetView]() {
      this[_setView](this.map.center, this.map.zoom);
    }
    [_clampZoom](zoom) {
      if (null != this.options.minNativeZoom && dart.notNull(zoom) < dart.notNull(this.options.minNativeZoom)) {
        return this.options.minNativeZoom;
      }
      if (null != this.options.maxNativeZoom && dart.notNull(this.options.maxNativeZoom) < dart.notNull(zoom)) {
        return this.options.maxNativeZoom;
      }
      return zoom;
    }
    [_setView](center, zoom) {
      let tileZoom = this[_clampZoom](zoom[$roundToDouble]());
      if (this.options.maxZoom != null && dart.notNull(tileZoom) > dart.notNull(this.options.maxZoom) || this.options.minZoom != null && dart.notNull(tileZoom) < dart.notNull(this.options.minZoom)) {
        tileZoom = null;
      }
      this[_tileZoom] = tileZoom;
      this[_abortLoading]();
      this[_updateLevels]();
      this[_resetGrid]();
      if (this[_tileZoom] != null) {
        this[_update](center);
      }
      this[_pruneTiles]();
    }
    [_setZoomTransforms](center, zoom) {
      for (let i of this[_levels][$keys]) {
        this[_setZoomTransform](this[_levels][$_get](i), center, zoom);
      }
    }
    [_setZoomTransform](level, center, zoom) {
      let scale = this.map.getZoomScale(zoom, level.zoom);
      let pixelOrigin = this.map.getNewPixelOrigin(center, zoom).round();
      if (level.origin == null) {
        return;
      }
      let translate = level.origin.multiplyBy(scale)['-'](pixelOrigin);
      level.translatePoint = translate;
      level.scale = scale;
    }
    [_resetGrid]() {
      let map = this.map;
      let crs = map.options.crs;
      let tileSize = this.getTileSize();
      let tileZoom = this[_tileZoom];
      let bounds = map.getPixelWorldBounds(this[_tileZoom]);
      if (bounds != null) {
        this[_globalTileRange] = this[_pxBoundsToTileRange](bounds);
      }
      this[_wrapX] = crs.wrapLng;
      if (this[_wrapX] != null) {
        let first = (dart.notNull(map.project(new latlong.LatLng.new(0.0, crs.wrapLng.item1), tileZoom).x) / dart.notNull(tileSize.x))[$floorToDouble]();
        let second = (dart.notNull(map.project(new latlong.LatLng.new(0.0, crs.wrapLng.item2), tileZoom).x) / dart.notNull(tileSize.y))[$ceilToDouble]();
        this[_wrapX] = new (T$.Tuple2OfdoubleL$doubleL()).new(first, second);
      }
      this[_wrapY] = crs.wrapLat;
      if (this[_wrapY] != null) {
        let first = (dart.notNull(map.project(new latlong.LatLng.new(crs.wrapLat.item1, 0.0), tileZoom).y) / dart.notNull(tileSize.x))[$floorToDouble]();
        let second = (dart.notNull(map.project(new latlong.LatLng.new(crs.wrapLat.item2, 0.0), tileZoom).y) / dart.notNull(tileSize.y))[$ceilToDouble]();
        this[_wrapY] = new (T$.Tuple2OfdoubleL$doubleL()).new(first, second);
      }
    }
    [_handleMove]() {
      let tileZoom = this[_clampZoom](this.map.zoom[$roundToDouble]());
      if (this[_tileZoom] == null) {
        if (this.options.maxZoom != null && dart.notNull(tileZoom) <= dart.notNull(this.options.maxZoom) && this.options.minZoom != null && dart.notNull(tileZoom) >= dart.notNull(this.options.minZoom)) {
          this[_tileZoom] = tileZoom;
          this.setState(dart.fn(() => {
            this[_setView](this.map.center, tileZoom);
            this[_setZoomTransforms](this.map.center, this.map.zoom);
          }, T$.VoidToNull()));
        }
      } else {
        this.setState(dart.fn(() => {
          if ((dart.notNull(tileZoom) - dart.notNull(this[_tileZoom]))[$abs]() >= 1) {
            this[_setView](this.map.center, tileZoom);
            this[_setZoomTransforms](this.map.center, this.map.zoom);
          } else {
            if (null == this[_throttleUpdate]) {
              this[_update](null);
            } else {
              this[_throttleUpdate].add(null);
            }
            this[_setZoomTransforms](this.map.center, this.map.zoom);
          }
        }, T$.VoidToNull()));
      }
    }
    [_getTiledPixelBounds](center) {
      let scale = this.map.getZoomScale(this.map.zoom, this[_tileZoom]);
      let pixelCenter = this.map.project(center, this[_tileZoom]).floor();
      let halfSize = this.map.size['/'](dart.notNull(scale) * 2);
      return T$.BoundsOfnumL().new(pixelCenter['-'](halfSize), pixelCenter['+'](halfSize));
    }
    [_update](center) {
      if (this.map == null || this[_tileZoom] == null) {
        return;
      }
      let zoom = this[_clampZoom](this.map.zoom);
      center == null ? center = this.map.center : null;
      let pixelBounds = this[_getTiledPixelBounds](center);
      let tileRange = this[_pxBoundsToTileRange](pixelBounds);
      let tileCenter = tileRange.getCenter();
      let queue = T$.JSArrayOfCoordsLOfnumL().of([]);
      let margin = this.options.keepBuffer;
      let noPruneRange = T$.BoundsOfnumL().new(tileRange.bottomLeft['-'](new (T$.CustomPointOfnumL()).new(margin, -dart.notNull(margin))), tileRange.topRight['+'](new (T$.CustomPointOfnumL()).new(margin, -dart.notNull(margin))));
      for (let entry of this[_tiles][$entries]) {
        let tile = entry.value;
        let c = tile.coords;
        if (dart.equals(tile.current, true) && (c.z != this[_tileZoom] || !dart.test(noPruneRange.contains(new (T$.CustomPointOfnumL()).new(c.x, c.y))))) {
          tile.current = false;
        }
      }
      if ((dart.notNull(zoom) - dart.notNull(this[_tileZoom]))[$abs]() > 1) {
        this[_setView](center, zoom);
        return;
      }
      for (let j = tileRange.min.y; dart.notNull(j) <= dart.notNull(tileRange.max.y); j = dart.notNull(j) + 1) {
        for (let i = tileRange.min.x; dart.notNull(i) <= dart.notNull(tileRange.max.x); i = dart.notNull(i) + 1) {
          let coords = new (T$.CoordsOfdoubleL()).new(i[$toDouble](), j[$toDouble]());
          coords.z = this[_tileZoom];
          if (!dart.test(this[_isValidTile](coords))) {
            continue;
          }
          let tile = this[_tiles][$_get](this[_tileCoordsToKey](coords));
          if (tile != null) {
            tile.current = true;
          } else {
            queue[$add](coords);
          }
        }
      }
      queue[$sort](dart.fn((a, b) => (dart.notNull(a.distanceTo(tileCenter)) - dart.notNull(b.distanceTo(tileCenter)))[$toInt](), T$.CoordsLOfnumLAndCoordsLOfnumLTointL()));
      for (let i = 0; i < dart.notNull(queue[$length]); i = i + 1) {
        this[_addTile](T$.CoordsLOfdoubleL().as(queue[$_get](i)));
      }
    }
    [_isValidTile](coords) {
      let crs = this.map.options.crs;
      if (!dart.test(crs.infinite)) {
        let bounds = this[_globalTileRange];
        if (crs.wrapLng == null && (dart.notNull(coords.x) < dart.notNull(bounds.min.x) || dart.notNull(coords.x) > dart.notNull(bounds.max.x)) || crs.wrapLat == null && (dart.notNull(coords.y) < dart.notNull(bounds.min.y) || dart.notNull(coords.y) > dart.notNull(bounds.max.y))) {
          return false;
        }
      }
      return true;
    }
    [_tileCoordsToKey](coords) {
      return dart.str(coords.x) + ":" + dart.str(coords.y) + ":" + dart.str(coords.z);
    }
    [_keyToTileCoords](key) {
      let k = key[$split](":");
      let coords = new (T$.CoordsOfdoubleL()).new(core.double.parse(k[$_get](0)), core.double.parse(k[$_get](1)));
      coords.z = core.double.parse(k[$_get](2));
      return coords;
    }
    [_removeTile](key) {
      let tile = this[_tiles][$_get](key);
      if (tile == null) {
        return;
      }
      tile.dispose();
      this[_tiles][$remove](key);
    }
    [_addTile](coords) {
      let t3, t2, t1;
      let tileCoordsToKey = this[_tileCoordsToKey](coords);
      let tile = (t1 = this[_tiles], t2 = tileCoordsToKey, t3 = new tile_layer.Tile.new({coords: coords, coordsKey: tileCoordsToKey, tilePos: this[_getTilePos](coords), current: true, level: this[_levels][$_get](coords.z), imageProvider: this.options.tileProvider.getImage(this[_wrapCoords](coords), this.options), tileReady: dart.bind(this, _tileReady)}), t1[$_set](t2, t3), t3);
      tile.loadTileImage();
    }
    [_tileReady](coords, error, tile) {
      let t3, t2, t1;
      if (null != error) {
        core.print(error);
        tile.loadError = true;
        if (this.options.errorTileCallback != null) {
          t1 = this.options;
          t2 = tile;
          t3 = error;
          t1.errorTileCallback(t2, t3);
        }
      } else {
        tile.loadError = false;
      }
      let key = this[_tileCoordsToKey](coords);
      tile = this[_tiles][$_get](key);
      if (null == tile) {
        return;
      }
      let fadeInStart = tile.loaded == null ? this.options.tileFadeInStart : this.options.tileFadeInStartWhenOverride;
      tile.loaded = new core.DateTime.now();
      if (this.options.tileFadeInDuration == null || fadeInStart === 1.0 || dart.test(tile.loadError) && null == this.options.errorImage) {
        tile.active = true;
      } else {
        tile.startFadeInAnimation(this.options.tileFadeInDuration, this, {from: fadeInStart});
      }
      if (dart.test(this.mounted)) {
        this.setState(dart.fn(() => {
        }, T$.VoidToNull()));
      }
      if (dart.test(this[_noTilesToLoad]())) {
        T$.FutureOfNull().delayed(this.options.tileFadeInDuration != null ? this.options.tileFadeInDuration['+'](C[37] || CT.C37) : C[37] || CT.C37, dart.fn(() => {
          if (dart.test(this.mounted)) {
            this.setState(dart.bind(this, _pruneTiles));
          }
        }, T$.VoidToNull()));
      }
    }
    [_getTilePos](coords) {
      let level = this[_levels][$_get](coords.z);
      return coords.scaleBy(this.getTileSize())['-'](level.origin);
    }
    [_wrapCoords](coords) {
      let newCoords = new (T$.CoordsOfdoubleL()).new(this[_wrapX] != null ? util.wrapNum(coords.x[$toDouble](), this[_wrapX]) : coords.x[$toDouble](), this[_wrapY] != null ? util.wrapNum(coords.y[$toDouble](), this[_wrapY]) : coords.y[$toDouble]());
      newCoords.z = coords.z[$toDouble]();
      return newCoords;
    }
    [_pxBoundsToTileRange](bounds) {
      let tileSize = this.getTileSize();
      return T$.BoundsOfnumL().new(bounds.min.unscaleBy(tileSize).floor(), bounds.max.unscaleBy(tileSize).ceil()['-'](C[38] || CT.C38));
    }
    [_noTilesToLoad]() {
      for (let entry of this[_tiles][$entries]) {
        if (entry.value.loaded == null) {
          return false;
        }
      }
      return true;
    }
  };
  (tile_layer._TileLayerState.new = function() {
    this[_globalTileRange] = null;
    this[_wrapX] = null;
    this[_wrapY] = null;
    this[_tileZoom] = null;
    this[_level] = null;
    this[_moveSub] = null;
    this[_throttleUpdate] = null;
    this[_tileSize] = null;
    this[_tiles] = new (T$.IdentityMapOfStringL$TileL()).new();
    this[_levels] = new (T$.IdentityMapOfdoubleL$LevelL()).new();
    tile_layer._TileLayerState.__proto__.new.call(this);
    ;
  }).prototype = tile_layer._TileLayerState.prototype;
  dart.addTypeTests(tile_layer._TileLayerState);
  dart.addTypeCaches(tile_layer._TileLayerState);
  dart.setMethodSignature(tile_layer._TileLayerState, () => ({
    __proto__: dart.getMethods(tile_layer._TileLayerState.__proto__),
    didUpdateWidget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_initThrottleUpdate]: dart.fnType(dart.void, []),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_createTileWidget]: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(tile_layer.Tile)]),
    [_abortLoading]: dart.fnType(dart.void, []),
    getTileSize: dart.fnType(dart.legacy(point.CustomPoint$(dart.legacy(core.num))), []),
    [_hasLevelChildren]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    [_updateLevels]: dart.fnType(dart.legacy(tile_layer.Level), []),
    [_pruneTiles]: dart.fnType(dart.void, []),
    [_removeTilesAtZoom]: dart.fnType(dart.void, [dart.legacy(core.double)]),
    [_removeAllTiles]: dart.fnType(dart.void, []),
    [_retainParent]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    [_retainChildren]: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    [_resetView]: dart.fnType(dart.void, []),
    [_clampZoom]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    [_setView]: dart.fnType(dart.void, [dart.legacy(latlong.LatLng), dart.legacy(core.double)]),
    [_setZoomTransforms]: dart.fnType(dart.void, [dart.legacy(latlong.LatLng), dart.legacy(core.double)]),
    [_setZoomTransform]: dart.fnType(dart.void, [dart.legacy(tile_layer.Level), dart.legacy(latlong.LatLng), dart.legacy(core.double)]),
    [_resetGrid]: dart.fnType(dart.void, []),
    [_handleMove]: dart.fnType(dart.void, []),
    [_getTiledPixelBounds]: dart.fnType(dart.legacy(bounds.Bounds$(dart.legacy(core.num))), [dart.legacy(latlong.LatLng)]),
    [_update]: dart.fnType(dart.void, [dart.legacy(latlong.LatLng)]),
    [_isValidTile]: dart.fnType(dart.legacy(core.bool), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num)))]),
    [_tileCoordsToKey]: dart.fnType(dart.legacy(core.String), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num)))]),
    [_keyToTileCoords]: dart.fnType(dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), [dart.legacy(core.String)]),
    [_removeTile]: dart.fnType(dart.void, [dart.legacy(core.String)]),
    [_addTile]: dart.fnType(dart.void, [dart.legacy(tile_layer.Coords$(dart.legacy(core.double)))]),
    [_tileReady]: dart.fnType(dart.void, [dart.legacy(tile_layer.Coords$(dart.legacy(core.double))), dart.dynamic, dart.legacy(tile_layer.Tile)]),
    [_getTilePos]: dart.fnType(dart.legacy(point.CustomPoint$(dart.legacy(core.num))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num)))]),
    [_wrapCoords]: dart.fnType(dart.legacy(tile_layer.Coords$(dart.legacy(core.num))), [dart.legacy(tile_layer.Coords$(dart.legacy(core.num)))]),
    [_pxBoundsToTileRange]: dart.fnType(dart.legacy(bounds.Bounds$(dart.legacy(core.num))), [dart.legacy(bounds.Bounds$(dart.legacy(core.num)))]),
    [_noTilesToLoad]: dart.fnType(dart.legacy(core.bool), [])
  }));
  dart.setGetterSignature(tile_layer._TileLayerState, () => ({
    __proto__: dart.getGetters(tile_layer._TileLayerState.__proto__),
    map: dart.legacy(map.MapState),
    options: dart.legacy(tile_layer.TileLayerOptions)
  }));
  dart.setLibraryUri(tile_layer._TileLayerState, I[4]);
  dart.setFieldSignature(tile_layer._TileLayerState, () => ({
    __proto__: dart.getFields(tile_layer._TileLayerState.__proto__),
    [_globalTileRange]: dart.fieldType(dart.legacy(bounds.Bounds$(dart.legacy(core.num)))),
    [_wrapX]: dart.fieldType(dart.legacy(tuple.Tuple2$(dart.legacy(core.double), dart.legacy(core.double)))),
    [_wrapY]: dart.fieldType(dart.legacy(tuple.Tuple2$(dart.legacy(core.double), dart.legacy(core.double)))),
    [_tileZoom]: dart.fieldType(dart.legacy(core.double)),
    [_level]: dart.fieldType(dart.legacy(tile_layer.Level)),
    [_moveSub]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_throttleUpdate]: dart.fieldType(dart.legacy(async.StreamController$(dart.legacy(latlong.LatLng)))),
    [_tileSize]: dart.fieldType(dart.legacy(point.CustomPoint$(dart.legacy(core.num)))),
    [_tiles]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(tile_layer.Tile)))),
    [_levels]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.double), dart.legacy(tile_layer.Level))))
  }));
  var coordsKey$ = dart.privateName(tile_layer, "Tile.coordsKey");
  var coords$0 = dart.privateName(tile_layer, "Tile.coords");
  var tilePos$ = dart.privateName(tile_layer, "Tile.tilePos");
  var imageProvider$ = dart.privateName(tile_layer, "Tile.imageProvider");
  var level$ = dart.privateName(tile_layer, "Tile.level");
  var current$ = dart.privateName(tile_layer, "Tile.current");
  var retain$ = dart.privateName(tile_layer, "Tile.retain");
  var active$ = dart.privateName(tile_layer, "Tile.active");
  var loadError$ = dart.privateName(tile_layer, "Tile.loadError");
  var loaded = dart.privateName(tile_layer, "Tile.loaded");
  var animationController = dart.privateName(tile_layer, "Tile.animationController");
  var tileReady$ = dart.privateName(tile_layer, "Tile.tileReady");
  var imageInfo = dart.privateName(tile_layer, "Tile.imageInfo");
  var _imageStream = dart.privateName(tile_layer, "_imageStream");
  var _listener = dart.privateName(tile_layer, "_listener");
  var _tileOnLoad = dart.privateName(tile_layer, "_tileOnLoad");
  var _tileOnError = dart.privateName(tile_layer, "_tileOnError");
  var _onAnimateEnd = dart.privateName(tile_layer, "_onAnimateEnd");
  tile_layer.Tile = class Tile extends core.Object {
    get coordsKey() {
      return this[coordsKey$];
    }
    set coordsKey(value) {
      super.coordsKey = value;
    }
    get coords() {
      return this[coords$0];
    }
    set coords(value) {
      super.coords = value;
    }
    get tilePos() {
      return this[tilePos$];
    }
    set tilePos(value) {
      super.tilePos = value;
    }
    get imageProvider() {
      return this[imageProvider$];
    }
    set imageProvider(value) {
      this[imageProvider$] = value;
    }
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get current() {
      return this[current$];
    }
    set current(value) {
      this[current$] = value;
    }
    get retain() {
      return this[retain$];
    }
    set retain(value) {
      this[retain$] = value;
    }
    get active() {
      return this[active$];
    }
    set active(value) {
      this[active$] = value;
    }
    get loadError() {
      return this[loadError$];
    }
    set loadError(value) {
      this[loadError$] = value;
    }
    get loaded() {
      return this[loaded];
    }
    set loaded(value) {
      this[loaded] = value;
    }
    get animationController() {
      return this[animationController];
    }
    set animationController(value) {
      this[animationController] = value;
    }
    get tileReady() {
      return this[tileReady$];
    }
    set tileReady(value) {
      this[tileReady$] = value;
    }
    get imageInfo() {
      return this[imageInfo];
    }
    set imageInfo(value) {
      this[imageInfo] = value;
    }
    get opacity() {
      return this.animationController == null ? dart.test(this.active) ? 1.0 : 0.0 : this.animationController.value;
    }
    loadTileImage() {
      let t1, t1$;
      try {
        let oldImageStream = this[_imageStream];
        this[_imageStream] = this.imageProvider.resolve(new image_provider.ImageConfiguration.new());
        if (!dart.equals(this[_imageStream].key, (t1 = oldImageStream, t1 == null ? null : t1.key))) {
          t1$ = oldImageStream;
          t1$ == null ? null : t1$.removeListener(this[_listener]);
          this[_listener] = new image_stream.ImageStreamListener.new(dart.bind(this, _tileOnLoad), {onError: dart.bind(this, _tileOnError)});
          this[_imageStream].addListener(this[_listener]);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let s = dart.stackTrace(e$);
        this[_tileOnError](e, s);
      }
    }
    dispose(evict = false) {
      let t2, t2$, t2$0;
      if (dart.test(evict) && this.imageProvider != null) {
        this.imageProvider.evict().then(dart.void, dart.fn(succ => core.print("evict tile: " + dart.str(this.coords) + " -> " + dart.str(succ)), T$.boolLTovoid())).catchError(dart.fn(error => core.print("evict tile: " + dart.str(this.coords) + " -> " + dart.str(error)), T$.dynamicTovoid()));
      }
      t2 = this.animationController;
      t2 == null ? null : t2.removeStatusListener(dart.bind(this, _onAnimateEnd));
      t2$ = this.animationController;
      t2$ == null ? null : t2$.dispose();
      t2$0 = this[_imageStream];
      t2$0 == null ? null : t2$0.removeListener(this[_listener]);
    }
    startFadeInAnimation(duration, vsync, opts) {
      let t2, t2$;
      let from = opts && 'from' in opts ? opts.from : null;
      t2 = this.animationController;
      t2 == null ? null : t2.removeStatusListener(dart.bind(this, _onAnimateEnd));
      this.animationController = (t2$ = new animation_controller.AnimationController.new({duration: duration, vsync: vsync}), (() => {
        t2$.addStatusListener(dart.bind(this, _onAnimateEnd));
        return t2$;
      })());
      this.animationController.forward({from: from});
    }
    [_onAnimateEnd](status) {
      if (dart.equals(status, animation.AnimationStatus.completed)) {
        this.active = true;
      }
    }
    [_tileOnLoad](imageInfo, synchronousCall) {
      let t3, t2;
      if (null != this.tileReady) {
        this.imageInfo = imageInfo;
        t2 = this.coords;
        t3 = null;
        this.tileReady(t2, t3, this);
      }
    }
    [_tileOnError](exception, stackTrace) {
      let t2, t3, t2$;
      if (null != this.tileReady) {
        t2$ = this.coords;
        t3 = (t2 = exception, t2 == null ? "Unknown exception during loadTileImage" : t2);
        this.tileReady(t2$, t3, this);
      }
    }
    compareTo(other) {
      T$.TileL().as(other);
      let zIndexA = this.level.zIndex;
      let zIndexB = other.level.zIndex;
      if (zIndexA == zIndexB) {
        return 0;
      } else {
        return zIndexB[$compareTo](zIndexA);
      }
    }
    get hashCode() {
      return dart.hashCode(this.coords);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.TileL().is(other) && dart.equals(this.coords, other.coords);
    }
  };
  (tile_layer.Tile.new = function(opts) {
    let coordsKey = opts && 'coordsKey' in opts ? opts.coordsKey : null;
    let coords = opts && 'coords' in opts ? opts.coords : null;
    let tilePos = opts && 'tilePos' in opts ? opts.tilePos : null;
    let imageProvider = opts && 'imageProvider' in opts ? opts.imageProvider : null;
    let tileReady = opts && 'tileReady' in opts ? opts.tileReady : null;
    let level = opts && 'level' in opts ? opts.level : null;
    let current = opts && 'current' in opts ? opts.current : false;
    let active = opts && 'active' in opts ? opts.active : false;
    let retain = opts && 'retain' in opts ? opts.retain : false;
    let loadError = opts && 'loadError' in opts ? opts.loadError : false;
    this[loaded] = null;
    this[animationController] = null;
    this[imageInfo] = null;
    this[_imageStream] = null;
    this[_listener] = null;
    this[coordsKey$] = coordsKey;
    this[coords$0] = coords;
    this[tilePos$] = tilePos;
    this[imageProvider$] = imageProvider;
    this[tileReady$] = tileReady;
    this[level$] = level;
    this[current$] = current;
    this[active$] = active;
    this[retain$] = retain;
    this[loadError$] = loadError;
    ;
  }).prototype = tile_layer.Tile.prototype;
  dart.addTypeTests(tile_layer.Tile);
  dart.addTypeCaches(tile_layer.Tile);
  tile_layer.Tile[dart.implements] = () => [core.Comparable$(dart.legacy(tile_layer.Tile))];
  dart.setMethodSignature(tile_layer.Tile, () => ({
    __proto__: dart.getMethods(tile_layer.Tile.__proto__),
    loadTileImage: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [], [dart.legacy(core.bool)]),
    startFadeInAnimation: dart.fnType(dart.void, [dart.legacy(core.Duration), dart.legacy(ticker.TickerProvider)], {from: dart.legacy(core.double)}, {}),
    [_onAnimateEnd]: dart.fnType(dart.void, [dart.legacy(animation.AnimationStatus)]),
    [_tileOnLoad]: dart.fnType(dart.void, [dart.legacy(image_stream.ImageInfo), dart.legacy(core.bool)]),
    [_tileOnError]: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]),
    compareTo: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    [$compareTo]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(tile_layer.Tile, () => ({
    __proto__: dart.getGetters(tile_layer.Tile.__proto__),
    opacity: dart.legacy(core.double),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(tile_layer.Tile, I[4]);
  dart.setFieldSignature(tile_layer.Tile, () => ({
    __proto__: dart.getFields(tile_layer.Tile.__proto__),
    coordsKey: dart.finalFieldType(dart.legacy(core.String)),
    coords: dart.finalFieldType(dart.legacy(tile_layer.Coords$(dart.legacy(core.double)))),
    tilePos: dart.finalFieldType(dart.legacy(point.CustomPoint$(dart.legacy(core.num)))),
    imageProvider: dart.fieldType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object)))),
    level: dart.finalFieldType(dart.legacy(tile_layer.Level)),
    current: dart.fieldType(dart.legacy(core.bool)),
    retain: dart.fieldType(dart.legacy(core.bool)),
    active: dart.fieldType(dart.legacy(core.bool)),
    loadError: dart.fieldType(dart.legacy(core.bool)),
    loaded: dart.fieldType(dart.legacy(core.DateTime)),
    animationController: dart.fieldType(dart.legacy(animation_controller.AnimationController)),
    tileReady: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(tile_layer.Coords$(dart.legacy(core.double))), dart.dynamic, dart.legacy(tile_layer.Tile)]))),
    imageInfo: dart.fieldType(dart.legacy(image_stream.ImageInfo)),
    [_imageStream]: dart.fieldType(dart.legacy(image_stream.ImageStream)),
    [_listener]: dart.fieldType(dart.legacy(image_stream.ImageStreamListener))
  }));
  dart.defineExtensionMethods(tile_layer.Tile, ['compareTo', '_equals']);
  dart.defineExtensionAccessors(tile_layer.Tile, ['hashCode']);
  var tile$ = dart.privateName(tile_layer, "AnimatedTile.tile");
  var errorImage$0 = dart.privateName(tile_layer, "AnimatedTile.errorImage");
  tile_layer.AnimatedTile = class AnimatedTile extends framework.StatefulWidget {
    get tile() {
      return this[tile$];
    }
    set tile(value) {
      super.tile = value;
    }
    get errorImage() {
      return this[errorImage$0];
    }
    set errorImage(value) {
      super.errorImage = value;
    }
    createState() {
      return new tile_layer._AnimatedTileState.new();
    }
  };
  (tile_layer.AnimatedTile.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let tile = opts && 'tile' in opts ? opts.tile : null;
    let errorImage = opts && 'errorImage' in opts ? opts.errorImage : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[tile$] = tile;
    this[errorImage$0] = errorImage;
    if (!(null != tile)) dart.assertFailed(null, I[3], 1171, 16, "null != tile");
    tile_layer.AnimatedTile.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tile_layer.AnimatedTile.prototype;
  dart.addTypeTests(tile_layer.AnimatedTile);
  dart.addTypeCaches(tile_layer.AnimatedTile);
  dart.setMethodSignature(tile_layer.AnimatedTile, () => ({
    __proto__: dart.getMethods(tile_layer.AnimatedTile.__proto__),
    createState: dart.fnType(dart.legacy(tile_layer._AnimatedTileState), [])
  }));
  dart.setLibraryUri(tile_layer.AnimatedTile, I[4]);
  dart.setFieldSignature(tile_layer.AnimatedTile, () => ({
    __proto__: dart.getFields(tile_layer.AnimatedTile.__proto__),
    tile: dart.finalFieldType(dart.legacy(tile_layer.Tile)),
    errorImage: dart.finalFieldType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object))))
  }));
  var _handleChange = dart.privateName(tile_layer, "_handleChange");
  tile_layer._AnimatedTileState = class _AnimatedTileState extends framework.State$(dart.legacy(tile_layer.AnimatedTile)) {
    build(context) {
      let t2;
      return new basic.Opacity.new({opacity: this.widget.tile.opacity, child: dart.test(this.widget.tile.loadError) && this.widget.errorImage != null ? new image.Image.new({image: this.widget.errorImage, fit: box_fit.BoxFit.fill, $creationLocationd_0dea112b090073317d4: C[39] || CT.C39}) : new basic.RawImage.new({image: (t2 = this.widget.tile.imageInfo, t2 == null ? null : t2.image), fit: box_fit.BoxFit.fill, $creationLocationd_0dea112b090073317d4: C[43] || CT.C43}), $creationLocationd_0dea112b090073317d4: C[47] || CT.C47});
    }
    initState() {
      super.initState();
      if (null != this.widget.tile.animationController) {
        this.widget.tile.animationController.addListener(dart.bind(this, _handleChange));
        this.listenerAttached = true;
      }
    }
    dispose() {
      let t2;
      if (dart.test(this.listenerAttached)) {
        t2 = this.widget.tile.animationController;
        t2 == null ? null : t2.removeListener(dart.bind(this, _handleChange));
      }
      super.dispose();
    }
    didUpdateWidget(oldWidget) {
      T$.AnimatedTileL().as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (!dart.test(this.listenerAttached) && null != this.widget.tile.animationController) {
        this.widget.tile.animationController.addListener(dart.bind(this, _handleChange));
        this.listenerAttached = true;
      }
    }
    [_handleChange]() {
      if (dart.test(this.mounted)) {
        this.setState(dart.fn(() => {
        }, T$.VoidToNull()));
      }
    }
  };
  (tile_layer._AnimatedTileState.new = function() {
    this.listenerAttached = false;
    tile_layer._AnimatedTileState.__proto__.new.call(this);
    ;
  }).prototype = tile_layer._AnimatedTileState.prototype;
  dart.addTypeTests(tile_layer._AnimatedTileState);
  dart.addTypeCaches(tile_layer._AnimatedTileState);
  dart.setMethodSignature(tile_layer._AnimatedTileState, () => ({
    __proto__: dart.getMethods(tile_layer._AnimatedTileState.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    didUpdateWidget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_handleChange]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(tile_layer._AnimatedTileState, I[4]);
  dart.setFieldSignature(tile_layer._AnimatedTileState, () => ({
    __proto__: dart.getFields(tile_layer._AnimatedTileState.__proto__),
    listenerAttached: dart.fieldType(dart.legacy(core.bool))
  }));
  var zIndex = dart.privateName(tile_layer, "Level.zIndex");
  var origin = dart.privateName(tile_layer, "Level.origin");
  var zoom = dart.privateName(tile_layer, "Level.zoom");
  var translatePoint = dart.privateName(tile_layer, "Level.translatePoint");
  var scale$ = dart.privateName(tile_layer, "Level.scale");
  tile_layer.Level = class Level extends core.Object {
    get zIndex() {
      return this[zIndex];
    }
    set zIndex(value) {
      this[zIndex] = value;
    }
    get origin() {
      return this[origin];
    }
    set origin(value) {
      this[origin] = value;
    }
    get zoom() {
      return this[zoom];
    }
    set zoom(value) {
      this[zoom] = value;
    }
    get translatePoint() {
      return this[translatePoint];
    }
    set translatePoint(value) {
      this[translatePoint] = value;
    }
    get scale() {
      return this[scale$];
    }
    set scale(value) {
      this[scale$] = value;
    }
  };
  (tile_layer.Level.new = function() {
    this[zIndex] = null;
    this[origin] = null;
    this[zoom] = null;
    this[translatePoint] = null;
    this[scale$] = null;
    ;
  }).prototype = tile_layer.Level.prototype;
  dart.addTypeTests(tile_layer.Level);
  dart.addTypeCaches(tile_layer.Level);
  dart.setLibraryUri(tile_layer.Level, I[4]);
  dart.setFieldSignature(tile_layer.Level, () => ({
    __proto__: dart.getFields(tile_layer.Level.__proto__),
    zIndex: dart.fieldType(dart.legacy(core.double)),
    origin: dart.fieldType(dart.legacy(point.CustomPoint$(dart.legacy(core.num)))),
    zoom: dart.fieldType(dart.legacy(core.double)),
    translatePoint: dart.fieldType(dart.legacy(point.CustomPoint$(dart.legacy(core.num)))),
    scale: dart.fieldType(dart.legacy(core.double))
  }));
  var z = dart.privateName(tile_layer, "Coords.z");
  const _is_Coords_default = Symbol('_is_Coords_default');
  tile_layer.Coords$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class Coords extends point.CustomPoint$(dart.legacy(T)) {
      get z() {
        return this[z];
      }
      set z(value) {
        this[z] = TL().as(value);
      }
      toString() {
        return "Coords(" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.z) + ")";
      }
      _equals(other) {
        if (other == null) return false;
        if (T$.CoordsLOfnumL().is(other)) {
          return this.x == other.x && this.y == other.y && this.z == other.z;
        }
        return false;
      }
      get hashCode() {
        return ui.hashValues(dart.hashCode(this.x), dart.hashCode(this.y), dart.hashCode(this.z));
      }
    }
    (Coords.new = function(x, y) {
      this[z] = null;
      Coords.__proto__.new.call(this, x, y);
      ;
    }).prototype = Coords.prototype;
    dart.addTypeTests(Coords);
    Coords.prototype[_is_Coords_default] = true;
    dart.addTypeCaches(Coords);
    dart.setMethodSignature(Coords, () => ({
      __proto__: dart.getMethods(Coords.__proto__),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
    }));
    dart.setGetterSignature(Coords, () => ({
      __proto__: dart.getGetters(Coords.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(Coords, I[4]);
    dart.setFieldSignature(Coords, () => ({
      __proto__: dart.getFields(Coords.__proto__),
      z: dart.fieldType(dart.legacy(T))
    }));
    dart.defineExtensionMethods(Coords, ['toString', '_equals']);
    dart.defineExtensionAccessors(Coords, ['hashCode']);
    return Coords;
  });
  tile_layer.Coords = tile_layer.Coords$();
  dart.addTypeTests(tile_layer.Coords, _is_Coords_default);
  var polylines$ = dart.privateName(polyline_layer, "PolylineLayerOptions.polylines");
  var polylineCulling$ = dart.privateName(polyline_layer, "PolylineLayerOptions.polylineCulling");
  polyline_layer.PolylineLayerOptions = class PolylineLayerOptions extends layer.LayerOptions {
    get polylines() {
      return this[polylines$];
    }
    set polylines(value) {
      super.polylines = value;
    }
    get polylineCulling() {
      return this[polylineCulling$];
    }
    set polylineCulling(value) {
      super.polylineCulling = value;
    }
  };
  (polyline_layer.PolylineLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let polylines = opts && 'polylines' in opts ? opts.polylines : C[51] || CT.C51;
    let polylineCulling = opts && 'polylineCulling' in opts ? opts.polylineCulling : false;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[polylines$] = polylines;
    this[polylineCulling$] = polylineCulling;
    polyline_layer.PolylineLayerOptions.__proto__.new.call(this, {key: key, rebuild: T$.StreamLOfNull().as(rebuild)});
    if (dart.test(this.polylineCulling)) {
      for (let polyline of this.polylines) {
        polyline.boundingBox = new latlng_bounds.LatLngBounds.fromPoints(polyline.points);
      }
    }
  }).prototype = polyline_layer.PolylineLayerOptions.prototype;
  dart.addTypeTests(polyline_layer.PolylineLayerOptions);
  dart.addTypeCaches(polyline_layer.PolylineLayerOptions);
  dart.setLibraryUri(polyline_layer.PolylineLayerOptions, I[5]);
  dart.setFieldSignature(polyline_layer.PolylineLayerOptions, () => ({
    __proto__: dart.getFields(polyline_layer.PolylineLayerOptions.__proto__),
    polylines: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(polyline_layer.Polyline)))),
    polylineCulling: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var points$ = dart.privateName(polyline_layer, "Polyline.points");
  var offsets = dart.privateName(polyline_layer, "Polyline.offsets");
  var strokeWidth$ = dart.privateName(polyline_layer, "Polyline.strokeWidth");
  var color$ = dart.privateName(polyline_layer, "Polyline.color");
  var borderStrokeWidth$ = dart.privateName(polyline_layer, "Polyline.borderStrokeWidth");
  var borderColor$ = dart.privateName(polyline_layer, "Polyline.borderColor");
  var gradientColors$ = dart.privateName(polyline_layer, "Polyline.gradientColors");
  var colorsStop$ = dart.privateName(polyline_layer, "Polyline.colorsStop");
  var isDotted$ = dart.privateName(polyline_layer, "Polyline.isDotted");
  var boundingBox = dart.privateName(polyline_layer, "Polyline.boundingBox");
  polyline_layer.Polyline = class Polyline extends core.Object {
    get points() {
      return this[points$];
    }
    set points(value) {
      super.points = value;
    }
    get offsets() {
      return this[offsets];
    }
    set offsets(value) {
      super.offsets = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get borderStrokeWidth() {
      return this[borderStrokeWidth$];
    }
    set borderStrokeWidth(value) {
      super.borderStrokeWidth = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get gradientColors() {
      return this[gradientColors$];
    }
    set gradientColors(value) {
      super.gradientColors = value;
    }
    get colorsStop() {
      return this[colorsStop$];
    }
    set colorsStop(value) {
      super.colorsStop = value;
    }
    get isDotted() {
      return this[isDotted$];
    }
    set isDotted(value) {
      super.isDotted = value;
    }
    get boundingBox() {
      return this[boundingBox];
    }
    set boundingBox(value) {
      this[boundingBox] = value;
    }
  };
  (polyline_layer.Polyline.new = function(opts) {
    let points = opts && 'points' in opts ? opts.points : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    let color = opts && 'color' in opts ? opts.color : C[52] || CT.C52;
    let borderStrokeWidth = opts && 'borderStrokeWidth' in opts ? opts.borderStrokeWidth : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[53] || CT.C53;
    let gradientColors = opts && 'gradientColors' in opts ? opts.gradientColors : null;
    let colorsStop = opts && 'colorsStop' in opts ? opts.colorsStop : null;
    let isDotted = opts && 'isDotted' in opts ? opts.isDotted : false;
    this[offsets] = T$.JSArrayOfOffsetL().of([]);
    this[boundingBox] = null;
    this[points$] = points;
    this[strokeWidth$] = strokeWidth;
    this[color$] = color;
    this[borderStrokeWidth$] = borderStrokeWidth;
    this[borderColor$] = borderColor;
    this[gradientColors$] = gradientColors;
    this[colorsStop$] = colorsStop;
    this[isDotted$] = isDotted;
    ;
  }).prototype = polyline_layer.Polyline.prototype;
  dart.addTypeTests(polyline_layer.Polyline);
  dart.addTypeCaches(polyline_layer.Polyline);
  dart.setLibraryUri(polyline_layer.Polyline, I[5]);
  dart.setFieldSignature(polyline_layer.Polyline, () => ({
    __proto__: dart.getFields(polyline_layer.Polyline.__proto__),
    points: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(latlong.LatLng)))),
    offsets: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Offset)))),
    strokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(ui.Color)),
    borderStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    borderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    gradientColors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Color)))),
    colorsStop: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    isDotted: dart.finalFieldType(dart.legacy(core.bool)),
    boundingBox: dart.fieldType(dart.legacy(latlng_bounds.LatLngBounds))
  }));
  var options$1 = dart.privateName(polyline_layer, "PolylineLayerWidget.options");
  polyline_layer.PolylineLayerWidget = class PolylineLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$1];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = map.MapState.of(context);
      return new polyline_layer.PolylineLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[54] || CT.C54});
    }
  };
  (polyline_layer.PolylineLayerWidget.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$1] = options;
    polyline_layer.PolylineLayerWidget.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = polyline_layer.PolylineLayerWidget.prototype;
  dart.addTypeTests(polyline_layer.PolylineLayerWidget);
  dart.addTypeCaches(polyline_layer.PolylineLayerWidget);
  dart.setMethodSignature(polyline_layer.PolylineLayerWidget, () => ({
    __proto__: dart.getMethods(polyline_layer.PolylineLayerWidget.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(polyline_layer.PolylineLayerWidget, I[5]);
  dart.setFieldSignature(polyline_layer.PolylineLayerWidget, () => ({
    __proto__: dart.getFields(polyline_layer.PolylineLayerWidget.__proto__),
    options: dart.finalFieldType(dart.legacy(polyline_layer.PolylineLayerOptions))
  }));
  var polylineOpts$ = dart.privateName(polyline_layer, "PolylineLayer.polylineOpts");
  var map$ = dart.privateName(polyline_layer, "PolylineLayer.map");
  var stream$0 = dart.privateName(polyline_layer, "PolylineLayer.stream");
  var _build = dart.privateName(polyline_layer, "_build");
  var _fillOffsets = dart.privateName(polyline_layer, "_fillOffsets");
  polyline_layer.PolylineLayer = class PolylineLayer extends framework.StatelessWidget {
    get polylineOpts() {
      return this[polylineOpts$];
    }
    set polylineOpts(value) {
      super.polylineOpts = value;
    }
    get map() {
      return this[map$];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$0];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, bc) => {
          let size = new ui.Size.new(bc.maxWidth, bc.maxHeight);
          return this[_build](context, size);
        }, T$.BuildContextLAndBoxConstraintsLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[59] || CT.C59});
    }
    [_build](context, size) {
      return new (T$.StreamBuilderOfvoid()).new({stream: this.stream, builder: dart.fn((context, _) => {
          let polylines = T$.JSArrayOfWidgetL().of([]);
          for (let polylineOpt of this.polylineOpts.polylines) {
            polylineOpt.offsets[$clear]();
            if (dart.test(this.polylineOpts.polylineCulling) && !dart.test(polylineOpt.boundingBox.isOverlapping(this.map.bounds))) {
              continue;
            }
            this[_fillOffsets](polylineOpt.offsets, polylineOpt.points);
            polylines[$add](new basic.CustomPaint.new({painter: new polyline_layer.PolylinePainter.new(polylineOpt), size: size, $creationLocationd_0dea112b090073317d4: C[62] || CT.C62}));
          }
          return new container.Container.new({child: new basic.Stack.new({children: polylines, $creationLocationd_0dea112b090073317d4: C[66] || CT.C66}), $creationLocationd_0dea112b090073317d4: C[69] || CT.C69});
        }, T$.BuildContextLAndAsyncSnapshotLOfvoidToContainerL()), $creationLocationd_0dea112b090073317d4: C[72] || CT.C72});
    }
    [_fillOffsets](offsets, points) {
      for (let i = 0, len = points[$length]; i < dart.notNull(len); i = i + 1) {
        let point = points[$_get](i);
        let pos = this.map.project(point);
        pos = pos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
        offsets[$add](new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]()));
        if (i > 0) {
          offsets[$add](new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]()));
        }
      }
    }
  };
  (polyline_layer.PolylineLayer.new = function(polylineOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[polylineOpts$] = polylineOpts;
    this[map$] = map;
    this[stream$0] = stream;
    polyline_layer.PolylineLayer.__proto__.new.call(this, {key: polylineOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = polyline_layer.PolylineLayer.prototype;
  dart.addTypeTests(polyline_layer.PolylineLayer);
  dart.addTypeCaches(polyline_layer.PolylineLayer);
  dart.setMethodSignature(polyline_layer.PolylineLayer, () => ({
    __proto__: dart.getMethods(polyline_layer.PolylineLayer.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_build]: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(ui.Size)]),
    [_fillOffsets]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(ui.Offset))), dart.legacy(core.List$(dart.legacy(latlong.LatLng)))])
  }));
  dart.setLibraryUri(polyline_layer.PolylineLayer, I[5]);
  dart.setFieldSignature(polyline_layer.PolylineLayer, () => ({
    __proto__: dart.getFields(polyline_layer.PolylineLayer.__proto__),
    polylineOpts: dart.finalFieldType(dart.legacy(polyline_layer.PolylineLayerOptions)),
    map: dart.finalFieldType(dart.legacy(map.MapState)),
    stream: dart.finalFieldType(dart.legacy(async.Stream$(core.Null)))
  }));
  var polylineOpt$ = dart.privateName(polyline_layer, "PolylinePainter.polylineOpt");
  var _paintGradient = dart.privateName(polyline_layer, "_paintGradient");
  var _paintDottedLine = dart.privateName(polyline_layer, "_paintDottedLine");
  var _paintLine = dart.privateName(polyline_layer, "_paintLine");
  var _getColorsStop = dart.privateName(polyline_layer, "_getColorsStop");
  var _calculateColorsStop = dart.privateName(polyline_layer, "_calculateColorsStop");
  polyline_layer.PolylinePainter = class PolylinePainter extends custom_paint.CustomPainter {
    get polylineOpt() {
      return this[polylineOpt$];
    }
    set polylineOpt(value) {
      super.polylineOpt = value;
    }
    paint(canvas, size) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3;
      if (dart.test(this.polylineOpt.offsets[$isEmpty])) {
        return;
      }
      let rect = ui.Offset.zero['&'](size);
      canvas.clipRect(rect);
      let paint = (t2 = ui.Paint.new(), (() => {
        t2.strokeWidth = this.polylineOpt.strokeWidth;
        t2.strokeCap = ui.StrokeCap.round;
        t2.strokeJoin = ui.StrokeJoin.round;
        t2.blendMode = ui.BlendMode.srcOver;
        return t2;
      })());
      if (this.polylineOpt.gradientColors == null) {
        paint.color = this.polylineOpt.color;
      } else {
        dart.test(this.polylineOpt.gradientColors[$isNotEmpty]) ? paint.shader = this[_paintGradient]() : paint.color = this.polylineOpt.color;
      }
      let filterPaint = (t2$ = ui.Paint.new(), (() => {
        t2$.color = this.polylineOpt.borderColor.withAlpha(255);
        t2$.strokeWidth = this.polylineOpt.strokeWidth;
        t2$.strokeCap = ui.StrokeCap.round;
        t2$.strokeJoin = ui.StrokeJoin.round;
        t2$.blendMode = ui.BlendMode.dstOut;
        return t2$;
      })());
      let borderPaint = dart.notNull(this.polylineOpt.borderStrokeWidth) > 0.0 ? (t2$0 = ui.Paint.new(), (() => {
        t2$0.color = this.polylineOpt.borderColor;
        t2$0.strokeWidth = dart.notNull(this.polylineOpt.strokeWidth) + dart.notNull(this.polylineOpt.borderStrokeWidth);
        t2$0.strokeCap = ui.StrokeCap.round;
        t2$0.strokeJoin = ui.StrokeJoin.round;
        t2$0.blendMode = ui.BlendMode.srcOver;
        return t2$0;
      })()) : null;
      let radius = dart.notNull(paint.strokeWidth) / 2;
      let borderRadius = dart.notNull((t2$2 = (t2$1 = borderPaint, t2$1 == null ? null : t2$1.strokeWidth), t2$2 == null ? 0.0 : t2$2)) / 2;
      if (dart.test(this.polylineOpt.isDotted)) {
        let spacing = dart.notNull(this.polylineOpt.strokeWidth) * 1.5;
        canvas.saveLayer(rect, ui.Paint.new());
        if (borderPaint != null) {
          this[_paintDottedLine](canvas, this.polylineOpt.offsets, borderRadius, spacing, borderPaint);
          this[_paintDottedLine](canvas, this.polylineOpt.offsets, radius, spacing, filterPaint);
        }
        this[_paintDottedLine](canvas, this.polylineOpt.offsets, radius, spacing, paint);
        canvas.restore();
      } else {
        paint.style = ui.PaintingStyle.stroke;
        filterPaint.style = ui.PaintingStyle.stroke;
        t2$3 = borderPaint;
        t2$3 == null ? null : t2$3.style = ui.PaintingStyle.stroke;
        canvas.saveLayer(rect, ui.Paint.new());
        if (borderPaint != null) {
          this[_paintLine](canvas, this.polylineOpt.offsets, borderPaint);
          this[_paintLine](canvas, this.polylineOpt.offsets, filterPaint);
        }
        this[_paintLine](canvas, this.polylineOpt.offsets, paint);
        canvas.restore();
      }
    }
    [_paintDottedLine](canvas, offsets, radius, stepLength, paint) {
      let path = ui.Path.new();
      let startDistance = 0.0;
      for (let i = 0; i < dart.notNull(offsets[$length]) - 1; i = i + 1) {
        let o0 = offsets[$_get](i);
        let o1 = offsets[$_get](i + 1);
        let totalDistance = polyline_layer._dist(o0, o1);
        let distance = startDistance;
        while (distance < dart.notNull(totalDistance)) {
          let f1 = distance / dart.notNull(totalDistance);
          let f0 = 1.0 - f1;
          let offset = new ui.Offset.new(dart.notNull(o0.dx) * f0 + dart.notNull(o1.dx) * f1, dart.notNull(o0.dy) * f0 + dart.notNull(o1.dy) * f1);
          path.addOval(new ui.Rect.fromCircle({center: offset, radius: radius}));
          distance = distance + dart.notNull(stepLength);
        }
        startDistance = distance < dart.notNull(totalDistance) ? dart.notNull(stepLength) - (dart.notNull(totalDistance) - distance) : distance - dart.notNull(totalDistance);
      }
      path.addOval(new ui.Rect.fromCircle({center: this.polylineOpt.offsets[$last], radius: radius}));
      canvas.drawPath(path, paint);
    }
    [_paintLine](canvas, offsets, paint) {
      let t2;
      if (dart.test(offsets[$isNotEmpty])) {
        let path = (t2 = ui.Path.new(), (() => {
          t2.moveTo(offsets[$_get](0).dx, offsets[$_get](0).dy);
          return t2;
        })());
        for (let offset of offsets) {
          path.lineTo(offset.dx, offset.dy);
        }
        canvas.drawPath(path, paint);
      }
    }
    [_paintGradient]() {
      return ui.Gradient.linear(this.polylineOpt.offsets[$first], this.polylineOpt.offsets[$last], this.polylineOpt.gradientColors, this[_getColorsStop]());
    }
    [_getColorsStop]() {
      return this.polylineOpt.colorsStop != null && this.polylineOpt.colorsStop[$length] == this.polylineOpt.gradientColors[$length] ? this.polylineOpt.colorsStop : this[_calculateColorsStop]();
    }
    [_calculateColorsStop]() {
      let colorsStopInterval = 1.0 / dart.notNull(this.polylineOpt.gradientColors[$length]);
      return this.polylineOpt.gradientColors[$map](T$.doubleL(), dart.fn(gradientColor => dart.notNull(this.polylineOpt.gradientColors[$indexOf](gradientColor)) * colorsStopInterval, T$.ColorLTodoubleL()))[$toList]();
    }
    shouldRepaint(other) {
      T$.PolylinePainterL().as(other);
      return false;
    }
  };
  (polyline_layer.PolylinePainter.new = function(polylineOpt) {
    this[polylineOpt$] = polylineOpt;
    polyline_layer.PolylinePainter.__proto__.new.call(this);
    ;
  }).prototype = polyline_layer.PolylinePainter.prototype;
  dart.addTypeTests(polyline_layer.PolylinePainter);
  dart.addTypeCaches(polyline_layer.PolylinePainter);
  dart.setMethodSignature(polyline_layer.PolylinePainter, () => ({
    __proto__: dart.getMethods(polyline_layer.PolylinePainter.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Size)]),
    [_paintDottedLine]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(core.List$(dart.legacy(ui.Offset))), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(ui.Paint)]),
    [_paintLine]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(core.List$(dart.legacy(ui.Offset))), dart.legacy(ui.Paint)]),
    [_paintGradient]: dart.fnType(dart.legacy(ui.Gradient), []),
    [_getColorsStop]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.double))), []),
    [_calculateColorsStop]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.double))), []),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(polyline_layer.PolylinePainter, I[5]);
  dart.setFieldSignature(polyline_layer.PolylinePainter, () => ({
    __proto__: dart.getFields(polyline_layer.PolylinePainter.__proto__),
    polylineOpt: dart.finalFieldType(dart.legacy(polyline_layer.Polyline))
  }));
  polyline_layer._dist = function _dist(v, w) {
    return math.sqrt(polyline_layer._dist2(v, w));
  };
  polyline_layer._dist2 = function _dist2(v, w) {
    return dart.notNull(polyline_layer._sqr(dart.notNull(v.dx) - dart.notNull(w.dx))) + dart.notNull(polyline_layer._sqr(dart.notNull(v.dy) - dart.notNull(w.dy)));
  };
  polyline_layer._sqr = function _sqr(x) {
    return dart.notNull(x) * dart.notNull(x);
  };
  var polygons$ = dart.privateName(polygon_layer, "PolygonLayerOptions.polygons");
  var polygonCulling$ = dart.privateName(polygon_layer, "PolygonLayerOptions.polygonCulling");
  polygon_layer.PolygonLayerOptions = class PolygonLayerOptions extends layer.LayerOptions {
    get polygons() {
      return this[polygons$];
    }
    set polygons(value) {
      super.polygons = value;
    }
    get polygonCulling() {
      return this[polygonCulling$];
    }
    set polygonCulling(value) {
      super.polygonCulling = value;
    }
  };
  (polygon_layer.PolygonLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let polygons = opts && 'polygons' in opts ? opts.polygons : C[76] || CT.C76;
    let polygonCulling = opts && 'polygonCulling' in opts ? opts.polygonCulling : false;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[polygons$] = polygons;
    this[polygonCulling$] = polygonCulling;
    polygon_layer.PolygonLayerOptions.__proto__.new.call(this, {key: key, rebuild: T$.StreamLOfNull().as(rebuild)});
    if (dart.test(this.polygonCulling)) {
      for (let polygon of this.polygons) {
        polygon.boundingBox = new latlng_bounds.LatLngBounds.fromPoints(polygon.points);
      }
    }
  }).prototype = polygon_layer.PolygonLayerOptions.prototype;
  dart.addTypeTests(polygon_layer.PolygonLayerOptions);
  dart.addTypeCaches(polygon_layer.PolygonLayerOptions);
  dart.setLibraryUri(polygon_layer.PolygonLayerOptions, I[6]);
  dart.setFieldSignature(polygon_layer.PolygonLayerOptions, () => ({
    __proto__: dart.getFields(polygon_layer.PolygonLayerOptions.__proto__),
    polygons: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(polygon_layer.Polygon)))),
    polygonCulling: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var points$0 = dart.privateName(polygon_layer, "Polygon.points");
  var offsets$ = dart.privateName(polygon_layer, "Polygon.offsets");
  var holePointsList$ = dart.privateName(polygon_layer, "Polygon.holePointsList");
  var holeOffsetsList = dart.privateName(polygon_layer, "Polygon.holeOffsetsList");
  var color$0 = dart.privateName(polygon_layer, "Polygon.color");
  var borderStrokeWidth$0 = dart.privateName(polygon_layer, "Polygon.borderStrokeWidth");
  var borderColor$0 = dart.privateName(polygon_layer, "Polygon.borderColor");
  var disableHolesBorder$ = dart.privateName(polygon_layer, "Polygon.disableHolesBorder");
  var isDotted$0 = dart.privateName(polygon_layer, "Polygon.isDotted");
  var boundingBox$ = dart.privateName(polygon_layer, "Polygon.boundingBox");
  polygon_layer.Polygon = class Polygon extends core.Object {
    get points() {
      return this[points$0];
    }
    set points(value) {
      super.points = value;
    }
    get offsets() {
      return this[offsets$];
    }
    set offsets(value) {
      super.offsets = value;
    }
    get holePointsList() {
      return this[holePointsList$];
    }
    set holePointsList(value) {
      super.holePointsList = value;
    }
    get holeOffsetsList() {
      return this[holeOffsetsList];
    }
    set holeOffsetsList(value) {
      super.holeOffsetsList = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get borderStrokeWidth() {
      return this[borderStrokeWidth$0];
    }
    set borderStrokeWidth(value) {
      super.borderStrokeWidth = value;
    }
    get borderColor() {
      return this[borderColor$0];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get disableHolesBorder() {
      return this[disableHolesBorder$];
    }
    set disableHolesBorder(value) {
      super.disableHolesBorder = value;
    }
    get isDotted() {
      return this[isDotted$0];
    }
    set isDotted(value) {
      super.isDotted = value;
    }
    get boundingBox() {
      return this[boundingBox$];
    }
    set boundingBox(value) {
      this[boundingBox$] = value;
    }
  };
  (polygon_layer.Polygon.new = function(opts) {
    let points = opts && 'points' in opts ? opts.points : null;
    let holePointsList = opts && 'holePointsList' in opts ? opts.holePointsList : null;
    let color = opts && 'color' in opts ? opts.color : C[52] || CT.C52;
    let borderStrokeWidth = opts && 'borderStrokeWidth' in opts ? opts.borderStrokeWidth : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[53] || CT.C53;
    let disableHolesBorder = opts && 'disableHolesBorder' in opts ? opts.disableHolesBorder : false;
    let isDotted = opts && 'isDotted' in opts ? opts.isDotted : false;
    this[offsets$] = T$.JSArrayOfOffsetL().of([]);
    this[boundingBox$] = null;
    this[points$0] = points;
    this[holePointsList$] = holePointsList;
    this[color$0] = color;
    this[borderStrokeWidth$0] = borderStrokeWidth;
    this[borderColor$0] = borderColor;
    this[disableHolesBorder$] = disableHolesBorder;
    this[isDotted$0] = isDotted;
    this[holeOffsetsList] = null == holePointsList || dart.test(holePointsList[$isEmpty]) ? null : T$.ListOfListLOfOffsetL().generate(holePointsList[$length], dart.fn(_ => T$.JSArrayOfOffsetL().of([]), T$.intLToListLOfOffsetL()));
    ;
  }).prototype = polygon_layer.Polygon.prototype;
  dart.addTypeTests(polygon_layer.Polygon);
  dart.addTypeCaches(polygon_layer.Polygon);
  dart.setLibraryUri(polygon_layer.Polygon, I[6]);
  dart.setFieldSignature(polygon_layer.Polygon, () => ({
    __proto__: dart.getFields(polygon_layer.Polygon.__proto__),
    points: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(latlong.LatLng)))),
    offsets: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Offset)))),
    holePointsList: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(latlong.LatLng)))))),
    holeOffsetsList: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(ui.Offset)))))),
    color: dart.finalFieldType(dart.legacy(ui.Color)),
    borderStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    borderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    disableHolesBorder: dart.finalFieldType(dart.legacy(core.bool)),
    isDotted: dart.finalFieldType(dart.legacy(core.bool)),
    boundingBox: dart.fieldType(dart.legacy(latlng_bounds.LatLngBounds))
  }));
  var options$2 = dart.privateName(polygon_layer, "PolygonLayerWidget.options");
  polygon_layer.PolygonLayerWidget = class PolygonLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$2];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = map.MapState.of(context);
      return new polygon_layer.PolygonLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[77] || CT.C77});
    }
  };
  (polygon_layer.PolygonLayerWidget.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$2] = options;
    polygon_layer.PolygonLayerWidget.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = polygon_layer.PolygonLayerWidget.prototype;
  dart.addTypeTests(polygon_layer.PolygonLayerWidget);
  dart.addTypeCaches(polygon_layer.PolygonLayerWidget);
  dart.setMethodSignature(polygon_layer.PolygonLayerWidget, () => ({
    __proto__: dart.getMethods(polygon_layer.PolygonLayerWidget.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(polygon_layer.PolygonLayerWidget, I[6]);
  dart.setFieldSignature(polygon_layer.PolygonLayerWidget, () => ({
    __proto__: dart.getFields(polygon_layer.PolygonLayerWidget.__proto__),
    options: dart.finalFieldType(dart.legacy(polygon_layer.PolygonLayerOptions))
  }));
  var polygonOpts$ = dart.privateName(polygon_layer, "PolygonLayer.polygonOpts");
  var map$0 = dart.privateName(polygon_layer, "PolygonLayer.map");
  var stream$1 = dart.privateName(polygon_layer, "PolygonLayer.stream");
  var _build$ = dart.privateName(polygon_layer, "_build");
  var _fillOffsets$ = dart.privateName(polygon_layer, "_fillOffsets");
  polygon_layer.PolygonLayer = class PolygonLayer extends framework.StatelessWidget {
    get polygonOpts() {
      return this[polygonOpts$];
    }
    set polygonOpts(value) {
      super.polygonOpts = value;
    }
    get map() {
      return this[map$0];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$1];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, bc) => {
          let size = new ui.Size.new(bc.maxWidth, bc.maxHeight);
          return this[_build$](context, size);
        }, T$.BuildContextLAndBoxConstraintsLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[82] || CT.C82});
    }
    [_build$](context, size) {
      return new async$.StreamBuilder.new({stream: this.stream, builder: dart.fn((context, _) => {
          let polygons = T$.JSArrayOfWidgetL().of([]);
          for (let polygon of this.polygonOpts.polygons) {
            polygon.offsets[$clear]();
            if (null != polygon.holeOffsetsList) {
              for (let offsets of polygon.holeOffsetsList) {
                offsets[$clear]();
              }
            }
            if (dart.test(this.polygonOpts.polygonCulling) && !dart.test(polygon.boundingBox.isOverlapping(this.map.bounds))) {
              continue;
            }
            this[_fillOffsets$](polygon.offsets, polygon.points);
            if (null != polygon.holePointsList) {
              for (let i = 0, len = polygon.holePointsList[$length]; i < dart.notNull(len); i = i + 1) {
                this[_fillOffsets$](polygon.holeOffsetsList[$_get](i), polygon.holePointsList[$_get](i));
              }
            }
            polygons[$add](new basic.CustomPaint.new({painter: new polygon_layer.PolygonPainter.new(polygon), size: size, $creationLocationd_0dea112b090073317d4: C[85] || CT.C85}));
          }
          return new container.Container.new({child: new basic.Stack.new({children: polygons, $creationLocationd_0dea112b090073317d4: C[89] || CT.C89}), $creationLocationd_0dea112b090073317d4: C[92] || CT.C92});
        }, T$.BuildContextLAndAsyncSnapshotLToContainerL()), $creationLocationd_0dea112b090073317d4: C[95] || CT.C95});
    }
    [_fillOffsets$](offsets, points) {
      for (let i = 0, len = points[$length]; i < dart.notNull(len); i = i + 1) {
        let point = points[$_get](i);
        let pos = this.map.project(point);
        pos = pos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
        offsets[$add](new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]()));
        if (i > 0) {
          offsets[$add](new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]()));
        }
      }
    }
  };
  (polygon_layer.PolygonLayer.new = function(polygonOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[polygonOpts$] = polygonOpts;
    this[map$0] = map;
    this[stream$1] = stream;
    polygon_layer.PolygonLayer.__proto__.new.call(this, {key: polygonOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = polygon_layer.PolygonLayer.prototype;
  dart.addTypeTests(polygon_layer.PolygonLayer);
  dart.addTypeCaches(polygon_layer.PolygonLayer);
  dart.setMethodSignature(polygon_layer.PolygonLayer, () => ({
    __proto__: dart.getMethods(polygon_layer.PolygonLayer.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_build$]: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(ui.Size)]),
    [_fillOffsets$]: dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(ui.Offset))), dart.legacy(core.List$(dart.legacy(latlong.LatLng)))])
  }));
  dart.setLibraryUri(polygon_layer.PolygonLayer, I[6]);
  dart.setFieldSignature(polygon_layer.PolygonLayer, () => ({
    __proto__: dart.getFields(polygon_layer.PolygonLayer.__proto__),
    polygonOpts: dart.finalFieldType(dart.legacy(polygon_layer.PolygonLayerOptions)),
    map: dart.finalFieldType(dart.legacy(map.MapState)),
    stream: dart.finalFieldType(dart.legacy(async.Stream))
  }));
  var polygonOpt$ = dart.privateName(polygon_layer, "PolygonPainter.polygonOpt");
  var _paintPolygon = dart.privateName(polygon_layer, "_paintPolygon");
  var _paintDottedLine$ = dart.privateName(polygon_layer, "_paintDottedLine");
  var _paintLine$ = dart.privateName(polygon_layer, "_paintLine");
  var _paintBorder = dart.privateName(polygon_layer, "_paintBorder");
  var _dist$ = dart.privateName(polygon_layer, "_dist");
  var _dist2$ = dart.privateName(polygon_layer, "_dist2");
  var _sqr$ = dart.privateName(polygon_layer, "_sqr");
  polygon_layer.PolygonPainter = class PolygonPainter extends custom_paint.CustomPainter {
    get polygonOpt() {
      return this[polygonOpt$];
    }
    set polygonOpt(value) {
      super.polygonOpt = value;
    }
    paint(canvas, size) {
      if (dart.test(this.polygonOpt.offsets[$isEmpty])) {
        return;
      }
      let rect = ui.Offset.zero['&'](size);
      this[_paintPolygon](canvas, rect);
    }
    [_paintBorder](canvas) {
      let t2;
      if (dart.notNull(this.polygonOpt.borderStrokeWidth) > 0.0) {
        let borderRadius = dart.notNull(this.polygonOpt.borderStrokeWidth) / 2;
        let borderPaint = (t2 = ui.Paint.new(), (() => {
          t2.color = this.polygonOpt.borderColor;
          t2.strokeWidth = this.polygonOpt.borderStrokeWidth;
          return t2;
        })());
        if (dart.test(this.polygonOpt.isDotted)) {
          let spacing = dart.notNull(this.polygonOpt.borderStrokeWidth) * 1.5;
          this[_paintDottedLine$](canvas, this.polygonOpt.offsets, borderRadius, spacing, borderPaint);
          if (!dart.test(this.polygonOpt.disableHolesBorder) && null != this.polygonOpt.holeOffsetsList) {
            for (let offsets of this.polygonOpt.holeOffsetsList) {
              this[_paintDottedLine$](canvas, offsets, borderRadius, spacing, borderPaint);
            }
          }
        } else {
          this[_paintLine$](canvas, this.polygonOpt.offsets, borderRadius, borderPaint);
          if (!dart.test(this.polygonOpt.disableHolesBorder) && null != this.polygonOpt.holeOffsetsList) {
            for (let offsets of this.polygonOpt.holeOffsetsList) {
              this[_paintLine$](canvas, offsets, borderRadius, borderPaint);
            }
          }
        }
      }
    }
    [_paintDottedLine$](canvas, offsets, radius, stepLength, paint) {
      let startDistance = 0.0;
      for (let i = 0; i < dart.notNull(offsets[$length]) - 1; i = i + 1) {
        let o0 = offsets[$_get](i);
        let o1 = offsets[$_get](i + 1);
        let totalDistance = this[_dist$](o0, o1);
        let distance = startDistance;
        while (distance < dart.notNull(totalDistance)) {
          let f1 = distance / dart.notNull(totalDistance);
          let f0 = 1.0 - f1;
          let offset = new ui.Offset.new(dart.notNull(o0.dx) * f0 + dart.notNull(o1.dx) * f1, dart.notNull(o0.dy) * f0 + dart.notNull(o1.dy) * f1);
          canvas.drawCircle(offset, radius, paint);
          distance = distance + dart.notNull(stepLength);
        }
        startDistance = distance < dart.notNull(totalDistance) ? dart.notNull(stepLength) - (dart.notNull(totalDistance) - distance) : distance - dart.notNull(totalDistance);
      }
      canvas.drawCircle(offsets[$last], radius, paint);
    }
    [_paintLine$](canvas, offsets, radius, paint) {
      canvas.drawPoints(ui.PointMode.lines, (() => {
        let t2 = T$.ListOfOffsetL().of(offsets);
        t2[$add](offsets[$_get](0));
        return t2;
      })(), paint);
      for (let offset of offsets) {
        canvas.drawCircle(offset, radius, paint);
      }
    }
    [_paintPolygon](canvas, rect) {
      let t3, t3$;
      let paint = ui.Paint.new();
      if (null != this.polygonOpt.holeOffsetsList) {
        canvas.saveLayer(rect, paint);
        paint.style = ui.PaintingStyle.fill;
        for (let offsets of this.polygonOpt.holeOffsetsList) {
          let path = ui.Path.new();
          path.addPolygon(offsets, true);
          canvas.drawPath(path, paint);
        }
        t3 = paint;
        (() => {
          t3.color = this.polygonOpt.color;
          t3.blendMode = ui.BlendMode.srcOut;
          return t3;
        })();
        let path = ui.Path.new();
        path.addPolygon(this.polygonOpt.offsets, true);
        canvas.drawPath(path, paint);
        this[_paintBorder](canvas);
        canvas.restore();
      } else {
        canvas.clipRect(rect);
        t3$ = paint;
        (() => {
          t3$.style = ui.PaintingStyle.fill;
          t3$.color = this.polygonOpt.color;
          return t3$;
        })();
        let path = ui.Path.new();
        path.addPolygon(this.polygonOpt.offsets, true);
        canvas.drawPath(path, paint);
        this[_paintBorder](canvas);
      }
    }
    shouldRepaint(other) {
      T$.PolygonPainterL().as(other);
      return false;
    }
    [_dist$](v, w) {
      return math.sqrt(this[_dist2$](v, w));
    }
    [_dist2$](v, w) {
      return dart.notNull(this[_sqr$](dart.notNull(v.dx) - dart.notNull(w.dx))) + dart.notNull(this[_sqr$](dart.notNull(v.dy) - dart.notNull(w.dy)));
    }
    [_sqr$](x) {
      return dart.notNull(x) * dart.notNull(x);
    }
  };
  (polygon_layer.PolygonPainter.new = function(polygonOpt) {
    this[polygonOpt$] = polygonOpt;
    polygon_layer.PolygonPainter.__proto__.new.call(this);
    ;
  }).prototype = polygon_layer.PolygonPainter.prototype;
  dart.addTypeTests(polygon_layer.PolygonPainter);
  dart.addTypeCaches(polygon_layer.PolygonPainter);
  dart.setMethodSignature(polygon_layer.PolygonPainter, () => ({
    __proto__: dart.getMethods(polygon_layer.PolygonPainter.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Size)]),
    [_paintBorder]: dart.fnType(dart.void, [dart.legacy(ui.Canvas)]),
    [_paintDottedLine$]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(core.List$(dart.legacy(ui.Offset))), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(ui.Paint)]),
    [_paintLine$]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(core.List$(dart.legacy(ui.Offset))), dart.legacy(core.double), dart.legacy(ui.Paint)]),
    [_paintPolygon]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)]),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [_dist$]: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.Offset), dart.legacy(ui.Offset)]),
    [_dist2$]: dart.fnType(dart.legacy(core.double), [dart.legacy(ui.Offset), dart.legacy(ui.Offset)]),
    [_sqr$]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)])
  }));
  dart.setLibraryUri(polygon_layer.PolygonPainter, I[6]);
  dart.setFieldSignature(polygon_layer.PolygonPainter, () => ({
    __proto__: dart.getFields(polygon_layer.PolygonPainter.__proto__),
    polygonOpt: dart.finalFieldType(dart.legacy(polygon_layer.Polygon))
  }));
  var markers$ = dart.privateName(marker_layer, "MarkerLayerOptions.markers");
  marker_layer.MarkerLayerOptions = class MarkerLayerOptions extends layer.LayerOptions {
    get markers() {
      return this[markers$];
    }
    set markers(value) {
      super.markers = value;
    }
  };
  (marker_layer.MarkerLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let markers = opts && 'markers' in opts ? opts.markers : C[99] || CT.C99;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[markers$] = markers;
    marker_layer.MarkerLayerOptions.__proto__.new.call(this, {key: key, rebuild: T$.StreamLOfNull().as(rebuild)});
    ;
  }).prototype = marker_layer.MarkerLayerOptions.prototype;
  dart.addTypeTests(marker_layer.MarkerLayerOptions);
  dart.addTypeCaches(marker_layer.MarkerLayerOptions);
  dart.setLibraryUri(marker_layer.MarkerLayerOptions, I[7]);
  dart.setFieldSignature(marker_layer.MarkerLayerOptions, () => ({
    __proto__: dart.getFields(marker_layer.MarkerLayerOptions.__proto__),
    markers: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(marker_layer.Marker))))
  }));
  var left$ = dart.privateName(marker_layer, "Anchor.left");
  var top$ = dart.privateName(marker_layer, "Anchor.top");
  var _name$ = dart.privateName(marker_layer, "_name");
  marker_layer.Anchor = class Anchor extends core.Object {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    static _leftOffset(width, alignOpt) {
      switch (alignOpt) {
        case C[100] || CT.C100:
        {
          return 0.0;
        }
        case C[101] || CT.C101:
        {
          return width;
        }
        case C[102] || CT.C102:
        case C[103] || CT.C103:
        case C[104] || CT.C104:
        default:
        {
          return dart.notNull(width) / 2;
        }
      }
    }
    static _topOffset(height, alignOpt) {
      switch (alignOpt) {
        case C[102] || CT.C102:
        {
          return 0.0;
        }
        case C[103] || CT.C103:
        {
          return height;
        }
        case C[100] || CT.C100:
        case C[101] || CT.C101:
        case C[104] || CT.C104:
        default:
        {
          return dart.notNull(height) / 2;
        }
      }
    }
    static forPos(pos, width, height) {
      if (pos == null) return new marker_layer.Anchor.__(width, height, null);
      if (T$.AnchorAlignL().is(pos.value)) return new marker_layer.Anchor.__(width, height, T$.AnchorAlignL().as(pos.value));
      if (T$.AnchorL().is(pos.value)) return T$.AnchorL().as(pos.value);
      dart.throw(core.Exception.new("Unsupported AnchorPos value type: " + dart.str(dart.runtimeType(pos)) + "."));
    }
  };
  (marker_layer.Anchor.new = function(left, top) {
    this[left$] = left;
    this[top$] = top;
    ;
  }).prototype = marker_layer.Anchor.prototype;
  (marker_layer.Anchor.__ = function(width, height, alignOpt) {
    this[left$] = marker_layer.Anchor._leftOffset(width, alignOpt);
    this[top$] = marker_layer.Anchor._topOffset(height, alignOpt);
    ;
  }).prototype = marker_layer.Anchor.prototype;
  dart.addTypeTests(marker_layer.Anchor);
  dart.addTypeCaches(marker_layer.Anchor);
  dart.setLibraryUri(marker_layer.Anchor, I[7]);
  dart.setFieldSignature(marker_layer.Anchor, () => ({
    __proto__: dart.getFields(marker_layer.Anchor.__proto__),
    left: dart.finalFieldType(dart.legacy(core.double)),
    top: dart.finalFieldType(dart.legacy(core.double))
  }));
  var value$ = dart.privateName(marker_layer, "AnchorPos.value");
  const _is_AnchorPos_default = Symbol('_is_AnchorPos_default');
  marker_layer.AnchorPos$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class AnchorPos extends core.Object {
      get value() {
        return this[value$];
      }
      set value(value) {
        this[value$] = TL().as(value);
      }
      static exactly(anchor) {
        return new marker_layer.AnchorPos.__(anchor);
      }
      static align(alignOpt) {
        return new marker_layer.AnchorPos.__(alignOpt);
      }
    }
    (AnchorPos.__ = function(value) {
      this[value$] = value;
      ;
    }).prototype = AnchorPos.prototype;
    dart.addTypeTests(AnchorPos);
    AnchorPos.prototype[_is_AnchorPos_default] = true;
    dart.addTypeCaches(AnchorPos);
    dart.setLibraryUri(AnchorPos, I[7]);
    dart.setFieldSignature(AnchorPos, () => ({
      __proto__: dart.getFields(AnchorPos.__proto__),
      value: dart.fieldType(dart.legacy(T))
    }));
    return AnchorPos;
  });
  marker_layer.AnchorPos = marker_layer.AnchorPos$();
  dart.addTypeTests(marker_layer.AnchorPos, _is_AnchorPos_default);
  marker_layer.AnchorAlign = class AnchorAlign extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (marker_layer.AnchorAlign.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = marker_layer.AnchorAlign.prototype;
  dart.addTypeTests(marker_layer.AnchorAlign);
  dart.addTypeCaches(marker_layer.AnchorAlign);
  dart.setMethodSignature(marker_layer.AnchorAlign, () => ({
    __proto__: dart.getMethods(marker_layer.AnchorAlign.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(marker_layer.AnchorAlign, I[7]);
  dart.setFieldSignature(marker_layer.AnchorAlign, () => ({
    __proto__: dart.getFields(marker_layer.AnchorAlign.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(marker_layer.AnchorAlign, ['toString']);
  marker_layer.AnchorAlign.left = C[100] || CT.C100;
  marker_layer.AnchorAlign.right = C[101] || CT.C101;
  marker_layer.AnchorAlign.top = C[102] || CT.C102;
  marker_layer.AnchorAlign.bottom = C[103] || CT.C103;
  marker_layer.AnchorAlign.center = C[104] || CT.C104;
  marker_layer.AnchorAlign.values = C[105] || CT.C105;
  var point$ = dart.privateName(marker_layer, "Marker.point");
  var builder$ = dart.privateName(marker_layer, "Marker.builder");
  var width$ = dart.privateName(marker_layer, "Marker.width");
  var height$ = dart.privateName(marker_layer, "Marker.height");
  var anchor = dart.privateName(marker_layer, "Marker.anchor");
  marker_layer.Marker = class Marker extends core.Object {
    get point() {
      return this[point$];
    }
    set point(value) {
      super.point = value;
    }
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get anchor() {
      return this[anchor];
    }
    set anchor(value) {
      super.anchor = value;
    }
  };
  (marker_layer.Marker.new = function(opts) {
    let point = opts && 'point' in opts ? opts.point : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let width = opts && 'width' in opts ? opts.width : 30;
    let height = opts && 'height' in opts ? opts.height : 30;
    let anchorPos = opts && 'anchorPos' in opts ? opts.anchorPos : null;
    this[point$] = point;
    this[builder$] = builder;
    this[width$] = width;
    this[height$] = height;
    this[anchor] = marker_layer.Anchor.forPos(anchorPos, width, height);
    ;
  }).prototype = marker_layer.Marker.prototype;
  dart.addTypeTests(marker_layer.Marker);
  dart.addTypeCaches(marker_layer.Marker);
  dart.setLibraryUri(marker_layer.Marker, I[7]);
  dart.setFieldSignature(marker_layer.Marker, () => ({
    __proto__: dart.getFields(marker_layer.Marker.__proto__),
    point: dart.finalFieldType(dart.legacy(latlong.LatLng)),
    builder: dart.finalFieldType(dart.legacy(dart.fnType(framework.Widget, [framework.BuildContext]))),
    width: dart.finalFieldType(dart.legacy(core.double)),
    height: dart.finalFieldType(dart.legacy(core.double)),
    anchor: dart.finalFieldType(dart.legacy(marker_layer.Anchor))
  }));
  var options$3 = dart.privateName(marker_layer, "MarkerLayerWidget.options");
  marker_layer.MarkerLayerWidget = class MarkerLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$3];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = map.MapState.of(context);
      return new marker_layer.MarkerLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[106] || CT.C106});
    }
  };
  (marker_layer.MarkerLayerWidget.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$3] = options;
    marker_layer.MarkerLayerWidget.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = marker_layer.MarkerLayerWidget.prototype;
  dart.addTypeTests(marker_layer.MarkerLayerWidget);
  dart.addTypeCaches(marker_layer.MarkerLayerWidget);
  dart.setMethodSignature(marker_layer.MarkerLayerWidget, () => ({
    __proto__: dart.getMethods(marker_layer.MarkerLayerWidget.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(marker_layer.MarkerLayerWidget, I[7]);
  dart.setFieldSignature(marker_layer.MarkerLayerWidget, () => ({
    __proto__: dart.getFields(marker_layer.MarkerLayerWidget.__proto__),
    options: dart.finalFieldType(dart.legacy(marker_layer.MarkerLayerOptions))
  }));
  var markerOpts$ = dart.privateName(marker_layer, "MarkerLayer.markerOpts");
  var map$1 = dart.privateName(marker_layer, "MarkerLayer.map");
  var stream$2 = dart.privateName(marker_layer, "MarkerLayer.stream");
  var _boundsContainsMarker = dart.privateName(marker_layer, "_boundsContainsMarker");
  marker_layer.MarkerLayer = class MarkerLayer extends framework.StatelessWidget {
    get markerOpts() {
      return this[markerOpts$];
    }
    set markerOpts(value) {
      super.markerOpts = value;
    }
    get map() {
      return this[map$1];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$2];
    }
    set stream(value) {
      super.stream = value;
    }
    [_boundsContainsMarker](marker) {
      let pixelPoint = this.map.project(marker.point);
      let width = dart.notNull(marker.width) - dart.notNull(marker.anchor.left);
      let height = dart.notNull(marker.height) - dart.notNull(marker.anchor.top);
      let sw = new (T$.CustomPointOfnumL()).new(dart.notNull(pixelPoint.x) + width, dart.notNull(pixelPoint.y) - height);
      let ne = new (T$.CustomPointOfnumL()).new(dart.notNull(pixelPoint.x) - width, dart.notNull(pixelPoint.y) + height);
      return this.map.pixelBounds.containsPartialBounds(T$.BoundsOfnumL().new(sw, ne));
    }
    build(context) {
      return new (T$.StreamBuilderOfintL()).new({stream: this.stream, builder: dart.fn((context, snapshot) => {
          let t4, t3;
          let markers = T$.JSArrayOfWidgetL().of([]);
          for (let markerOpt of this.markerOpts.markers) {
            let pos = this.map.project(markerOpt.point);
            pos = pos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
            let pixelPosX = (dart.notNull(pos.x) - (dart.notNull(markerOpt.width) - dart.notNull(markerOpt.anchor.left)))[$toDouble]();
            let pixelPosY = (dart.notNull(pos.y) - (dart.notNull(markerOpt.height) - dart.notNull(markerOpt.anchor.top)))[$toDouble]();
            if (!dart.test(this[_boundsContainsMarker](markerOpt))) {
              continue;
            }
            markers[$add](new basic.Positioned.new({width: markerOpt.width, height: markerOpt.height, left: pixelPosX, top: pixelPosY, child: (t3 = markerOpt, t4 = context, t3.builder(t4)), $creationLocationd_0dea112b090073317d4: C[111] || CT.C111}));
          }
          return new container.Container.new({child: new basic.Stack.new({children: markers, $creationLocationd_0dea112b090073317d4: C[118] || CT.C118}), $creationLocationd_0dea112b090073317d4: C[121] || CT.C121});
        }, T$.BuildContextLAndAsyncSnapshotLOfintLToContainerL()), $creationLocationd_0dea112b090073317d4: C[124] || CT.C124});
    }
  };
  (marker_layer.MarkerLayer.new = function(markerOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[markerOpts$] = markerOpts;
    this[map$1] = map;
    this[stream$2] = stream;
    marker_layer.MarkerLayer.__proto__.new.call(this, {key: markerOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = marker_layer.MarkerLayer.prototype;
  dart.addTypeTests(marker_layer.MarkerLayer);
  dart.addTypeCaches(marker_layer.MarkerLayer);
  dart.setMethodSignature(marker_layer.MarkerLayer, () => ({
    __proto__: dart.getMethods(marker_layer.MarkerLayer.__proto__),
    [_boundsContainsMarker]: dart.fnType(dart.legacy(core.bool), [dart.legacy(marker_layer.Marker)]),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(marker_layer.MarkerLayer, I[7]);
  dart.setFieldSignature(marker_layer.MarkerLayer, () => ({
    __proto__: dart.getFields(marker_layer.MarkerLayer.__proto__),
    markerOpts: dart.finalFieldType(dart.legacy(marker_layer.MarkerLayerOptions)),
    map: dart.finalFieldType(dart.legacy(map.MapState)),
    stream: dart.finalFieldType(dart.legacy(async.Stream$(core.Null)))
  }));
  var circles$ = dart.privateName(circle_layer, "CircleLayerOptions.circles");
  circle_layer.CircleLayerOptions = class CircleLayerOptions extends layer.LayerOptions {
    get circles() {
      return this[circles$];
    }
    set circles(value) {
      super.circles = value;
    }
  };
  (circle_layer.CircleLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let circles = opts && 'circles' in opts ? opts.circles : C[128] || CT.C128;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[circles$] = circles;
    circle_layer.CircleLayerOptions.__proto__.new.call(this, {key: key, rebuild: T$.StreamLOfNull().as(rebuild)});
    ;
  }).prototype = circle_layer.CircleLayerOptions.prototype;
  dart.addTypeTests(circle_layer.CircleLayerOptions);
  dart.addTypeCaches(circle_layer.CircleLayerOptions);
  dart.setLibraryUri(circle_layer.CircleLayerOptions, I[8]);
  dart.setFieldSignature(circle_layer.CircleLayerOptions, () => ({
    __proto__: dart.getFields(circle_layer.CircleLayerOptions.__proto__),
    circles: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(circle_layer.CircleMarker))))
  }));
  var point$0 = dart.privateName(circle_layer, "CircleMarker.point");
  var radius$ = dart.privateName(circle_layer, "CircleMarker.radius");
  var color$1 = dart.privateName(circle_layer, "CircleMarker.color");
  var borderStrokeWidth$1 = dart.privateName(circle_layer, "CircleMarker.borderStrokeWidth");
  var borderColor$1 = dart.privateName(circle_layer, "CircleMarker.borderColor");
  var useRadiusInMeter$ = dart.privateName(circle_layer, "CircleMarker.useRadiusInMeter");
  var offset = dart.privateName(circle_layer, "CircleMarker.offset");
  var realRadius = dart.privateName(circle_layer, "CircleMarker.realRadius");
  circle_layer.CircleMarker = class CircleMarker extends core.Object {
    get point() {
      return this[point$0];
    }
    set point(value) {
      super.point = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get borderStrokeWidth() {
      return this[borderStrokeWidth$1];
    }
    set borderStrokeWidth(value) {
      super.borderStrokeWidth = value;
    }
    get borderColor() {
      return this[borderColor$1];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get useRadiusInMeter() {
      return this[useRadiusInMeter$];
    }
    set useRadiusInMeter(value) {
      super.useRadiusInMeter = value;
    }
    get offset() {
      return this[offset];
    }
    set offset(value) {
      this[offset] = value;
    }
    get realRadius() {
      return this[realRadius];
    }
    set realRadius(value) {
      this[realRadius] = value;
    }
  };
  (circle_layer.CircleMarker.new = function(opts) {
    let point = opts && 'point' in opts ? opts.point : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let useRadiusInMeter = opts && 'useRadiusInMeter' in opts ? opts.useRadiusInMeter : false;
    let color = opts && 'color' in opts ? opts.color : C[52] || CT.C52;
    let borderStrokeWidth = opts && 'borderStrokeWidth' in opts ? opts.borderStrokeWidth : 0;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[53] || CT.C53;
    this[offset] = ui.Offset.zero;
    this[realRadius] = 0;
    this[point$0] = point;
    this[radius$] = radius;
    this[useRadiusInMeter$] = useRadiusInMeter;
    this[color$1] = color;
    this[borderStrokeWidth$1] = borderStrokeWidth;
    this[borderColor$1] = borderColor;
    ;
  }).prototype = circle_layer.CircleMarker.prototype;
  dart.addTypeTests(circle_layer.CircleMarker);
  dart.addTypeCaches(circle_layer.CircleMarker);
  dart.setLibraryUri(circle_layer.CircleMarker, I[8]);
  dart.setFieldSignature(circle_layer.CircleMarker, () => ({
    __proto__: dart.getFields(circle_layer.CircleMarker.__proto__),
    point: dart.finalFieldType(dart.legacy(latlong.LatLng)),
    radius: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(ui.Color)),
    borderStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    borderColor: dart.finalFieldType(dart.legacy(ui.Color)),
    useRadiusInMeter: dart.finalFieldType(dart.legacy(core.bool)),
    offset: dart.fieldType(dart.legacy(ui.Offset)),
    realRadius: dart.fieldType(dart.legacy(core.num))
  }));
  var options$4 = dart.privateName(circle_layer, "CircleLayerWidget.options");
  circle_layer.CircleLayerWidget = class CircleLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$4];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = map.MapState.of(context);
      return new circle_layer.CircleLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[129] || CT.C129});
    }
  };
  (circle_layer.CircleLayerWidget.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$4] = options;
    circle_layer.CircleLayerWidget.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = circle_layer.CircleLayerWidget.prototype;
  dart.addTypeTests(circle_layer.CircleLayerWidget);
  dart.addTypeCaches(circle_layer.CircleLayerWidget);
  dart.setMethodSignature(circle_layer.CircleLayerWidget, () => ({
    __proto__: dart.getMethods(circle_layer.CircleLayerWidget.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(circle_layer.CircleLayerWidget, I[8]);
  dart.setFieldSignature(circle_layer.CircleLayerWidget, () => ({
    __proto__: dart.getFields(circle_layer.CircleLayerWidget.__proto__),
    options: dart.finalFieldType(dart.legacy(circle_layer.CircleLayerOptions))
  }));
  var circleOpts$ = dart.privateName(circle_layer, "CircleLayer.circleOpts");
  var map$2 = dart.privateName(circle_layer, "CircleLayer.map");
  var stream$3 = dart.privateName(circle_layer, "CircleLayer.stream");
  var _build$0 = dart.privateName(circle_layer, "_build");
  circle_layer.CircleLayer = class CircleLayer extends framework.StatelessWidget {
    get circleOpts() {
      return this[circleOpts$];
    }
    set circleOpts(value) {
      super.circleOpts = value;
    }
    get map() {
      return this[map$2];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$3];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, bc) => {
          let size = new ui.Size.new(bc.maxWidth, bc.maxHeight);
          return this[_build$0](context, size);
        }, T$.BuildContextLAndBoxConstraintsLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[134] || CT.C134});
    }
    [_build$0](context, size) {
      return new (T$.StreamBuilderOfvoid()).new({stream: this.stream, builder: dart.fn((context, _) => {
          let circleWidgets = T$.JSArrayOfWidgetL().of([]);
          for (let circle of this.circleOpts.circles) {
            let pos = this.map.project(circle.point);
            pos = pos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
            circle.offset = new ui.Offset.new(pos.x[$toDouble](), pos.y[$toDouble]());
            if (dart.test(circle.useRadiusInMeter)) {
              let r = new latlong.Distance.new().offset(circle.point, circle.radius, 180);
              let rpos = this.map.project(r);
              rpos = rpos.multiplyBy(this.map.getZoomScale(this.map.zoom, this.map.zoom))['-'](this.map.getPixelOrigin());
              circle.realRadius = dart.notNull(rpos.y) - dart.notNull(pos.y);
            }
            circleWidgets[$add](new basic.CustomPaint.new({painter: new circle_layer.CirclePainter.new(circle), size: size, $creationLocationd_0dea112b090073317d4: C[137] || CT.C137}));
          }
          return new container.Container.new({child: new basic.Stack.new({children: circleWidgets, $creationLocationd_0dea112b090073317d4: C[141] || CT.C141}), $creationLocationd_0dea112b090073317d4: C[144] || CT.C144});
        }, T$.BuildContextLAndAsyncSnapshotLOfvoidToContainerL()), $creationLocationd_0dea112b090073317d4: C[147] || CT.C147});
    }
  };
  (circle_layer.CircleLayer.new = function(circleOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[circleOpts$] = circleOpts;
    this[map$2] = map;
    this[stream$3] = stream;
    circle_layer.CircleLayer.__proto__.new.call(this, {key: circleOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = circle_layer.CircleLayer.prototype;
  dart.addTypeTests(circle_layer.CircleLayer);
  dart.addTypeCaches(circle_layer.CircleLayer);
  dart.setMethodSignature(circle_layer.CircleLayer, () => ({
    __proto__: dart.getMethods(circle_layer.CircleLayer.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_build$0]: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext), dart.legacy(ui.Size)])
  }));
  dart.setLibraryUri(circle_layer.CircleLayer, I[8]);
  dart.setFieldSignature(circle_layer.CircleLayer, () => ({
    __proto__: dart.getFields(circle_layer.CircleLayer.__proto__),
    circleOpts: dart.finalFieldType(dart.legacy(circle_layer.CircleLayerOptions)),
    map: dart.finalFieldType(dart.legacy(map.MapState)),
    stream: dart.finalFieldType(dart.legacy(async.Stream$(core.Null)))
  }));
  var circle$ = dart.privateName(circle_layer, "CirclePainter.circle");
  var _paintCircle = dart.privateName(circle_layer, "_paintCircle");
  circle_layer.CirclePainter = class CirclePainter extends custom_paint.CustomPainter {
    get circle() {
      return this[circle$];
    }
    set circle(value) {
      super.circle = value;
    }
    paint(canvas, size) {
      let t3, t3$;
      let rect = ui.Offset.zero['&'](size);
      canvas.clipRect(rect);
      let paint = (t3 = ui.Paint.new(), (() => {
        t3.style = ui.PaintingStyle.fill;
        t3.color = this.circle.color;
        return t3;
      })());
      this[_paintCircle](canvas, this.circle.offset, dart.test(this.circle.useRadiusInMeter) ? this.circle.realRadius : this.circle.radius, paint);
      if (dart.notNull(this.circle.borderStrokeWidth) > 0) {
        let paint = (t3$ = ui.Paint.new(), (() => {
          t3$.style = ui.PaintingStyle.stroke;
          t3$.color = this.circle.borderColor;
          t3$.strokeWidth = this.circle.borderStrokeWidth;
          return t3$;
        })());
        this[_paintCircle](canvas, this.circle.offset, dart.test(this.circle.useRadiusInMeter) ? this.circle.realRadius : this.circle.radius, paint);
      }
    }
    [_paintCircle](canvas, offset, radius, paint) {
      canvas.drawCircle(offset, radius, paint);
    }
    shouldRepaint(other) {
      T$.CirclePainterL().as(other);
      return false;
    }
  };
  (circle_layer.CirclePainter.new = function(circle) {
    this[circle$] = circle;
    circle_layer.CirclePainter.__proto__.new.call(this);
    ;
  }).prototype = circle_layer.CirclePainter.prototype;
  dart.addTypeTests(circle_layer.CirclePainter);
  dart.addTypeCaches(circle_layer.CirclePainter);
  dart.setMethodSignature(circle_layer.CirclePainter, () => ({
    __proto__: dart.getMethods(circle_layer.CirclePainter.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Size)]),
    [_paintCircle]: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Offset), dart.legacy(core.double), dart.legacy(ui.Paint)]),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(circle_layer.CirclePainter, I[8]);
  dart.setFieldSignature(circle_layer.CirclePainter, () => ({
    __proto__: dart.getFields(circle_layer.CirclePainter.__proto__),
    circle: dart.finalFieldType(dart.legacy(circle_layer.CircleMarker))
  }));
  plugin.MapPlugin = class MapPlugin extends core.Object {};
  (plugin.MapPlugin.new = function() {
    ;
  }).prototype = plugin.MapPlugin.prototype;
  dart.addTypeTests(plugin.MapPlugin);
  dart.addTypeCaches(plugin.MapPlugin);
  dart.setLibraryUri(plugin.MapPlugin, I[9]);
  var overlayImages$ = dart.privateName(overlay_image_layer, "OverlayImageLayerOptions.overlayImages");
  overlay_image_layer.OverlayImageLayerOptions = class OverlayImageLayerOptions extends layer.LayerOptions {
    get overlayImages() {
      return this[overlayImages$];
    }
    set overlayImages(value) {
      super.overlayImages = value;
    }
  };
  (overlay_image_layer.OverlayImageLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let overlayImages = opts && 'overlayImages' in opts ? opts.overlayImages : C[151] || CT.C151;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[overlayImages$] = overlayImages;
    overlay_image_layer.OverlayImageLayerOptions.__proto__.new.call(this, {key: key, rebuild: T$.StreamLOfNull().as(rebuild)});
    ;
  }).prototype = overlay_image_layer.OverlayImageLayerOptions.prototype;
  dart.addTypeTests(overlay_image_layer.OverlayImageLayerOptions);
  dart.addTypeCaches(overlay_image_layer.OverlayImageLayerOptions);
  dart.setLibraryUri(overlay_image_layer.OverlayImageLayerOptions, I[10]);
  dart.setFieldSignature(overlay_image_layer.OverlayImageLayerOptions, () => ({
    __proto__: dart.getFields(overlay_image_layer.OverlayImageLayerOptions.__proto__),
    overlayImages: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(overlay_image_layer.OverlayImage))))
  }));
  var bounds$ = dart.privateName(overlay_image_layer, "OverlayImage.bounds");
  var imageProvider$0 = dart.privateName(overlay_image_layer, "OverlayImage.imageProvider");
  var opacity$0 = dart.privateName(overlay_image_layer, "OverlayImage.opacity");
  var gaplessPlayback$ = dart.privateName(overlay_image_layer, "OverlayImage.gaplessPlayback");
  overlay_image_layer.OverlayImage = class OverlayImage extends core.Object {
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get imageProvider() {
      return this[imageProvider$0];
    }
    set imageProvider(value) {
      super.imageProvider = value;
    }
    get opacity() {
      return this[opacity$0];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get gaplessPlayback() {
      return this[gaplessPlayback$];
    }
    set gaplessPlayback(value) {
      super.gaplessPlayback = value;
    }
  };
  (overlay_image_layer.OverlayImage.new = function(opts) {
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let imageProvider = opts && 'imageProvider' in opts ? opts.imageProvider : null;
    let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
    let gaplessPlayback = opts && 'gaplessPlayback' in opts ? opts.gaplessPlayback : false;
    this[bounds$] = bounds;
    this[imageProvider$0] = imageProvider;
    this[opacity$0] = opacity;
    this[gaplessPlayback$] = gaplessPlayback;
    ;
  }).prototype = overlay_image_layer.OverlayImage.prototype;
  dart.addTypeTests(overlay_image_layer.OverlayImage);
  dart.addTypeCaches(overlay_image_layer.OverlayImage);
  dart.setLibraryUri(overlay_image_layer.OverlayImage, I[10]);
  dart.setFieldSignature(overlay_image_layer.OverlayImage, () => ({
    __proto__: dart.getFields(overlay_image_layer.OverlayImage.__proto__),
    bounds: dart.finalFieldType(dart.legacy(latlng_bounds.LatLngBounds)),
    imageProvider: dart.finalFieldType(dart.legacy(image_provider.ImageProvider$(dart.legacy(core.Object)))),
    opacity: dart.finalFieldType(dart.legacy(core.double)),
    gaplessPlayback: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var options$5 = dart.privateName(overlay_image_layer, "OverlayImageLayerWidget.options");
  overlay_image_layer.OverlayImageLayerWidget = class OverlayImageLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$5];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = map.MapState.of(context);
      return new overlay_image_layer.OverlayImageLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[152] || CT.C152});
    }
  };
  (overlay_image_layer.OverlayImageLayerWidget.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$5] = options;
    overlay_image_layer.OverlayImageLayerWidget.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overlay_image_layer.OverlayImageLayerWidget.prototype;
  dart.addTypeTests(overlay_image_layer.OverlayImageLayerWidget);
  dart.addTypeCaches(overlay_image_layer.OverlayImageLayerWidget);
  dart.setMethodSignature(overlay_image_layer.OverlayImageLayerWidget, () => ({
    __proto__: dart.getMethods(overlay_image_layer.OverlayImageLayerWidget.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(overlay_image_layer.OverlayImageLayerWidget, I[10]);
  dart.setFieldSignature(overlay_image_layer.OverlayImageLayerWidget, () => ({
    __proto__: dart.getFields(overlay_image_layer.OverlayImageLayerWidget.__proto__),
    options: dart.finalFieldType(dart.legacy(overlay_image_layer.OverlayImageLayerOptions))
  }));
  var overlayImageOpts$ = dart.privateName(overlay_image_layer, "OverlayImageLayer.overlayImageOpts");
  var map$3 = dart.privateName(overlay_image_layer, "OverlayImageLayer.map");
  var stream$4 = dart.privateName(overlay_image_layer, "OverlayImageLayer.stream");
  var _positionedForOverlay = dart.privateName(overlay_image_layer, "_positionedForOverlay");
  overlay_image_layer.OverlayImageLayer = class OverlayImageLayer extends framework.StatelessWidget {
    get overlayImageOpts() {
      return this[overlayImageOpts$];
    }
    set overlayImageOpts(value) {
      super.overlayImageOpts = value;
    }
    get map() {
      return this[map$3];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$4];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new (T$.StreamBuilderOfvoid()).new({stream: this.stream, builder: dart.fn((context, _) => new basic.ClipRect.new({child: new basic.Stack.new({children: (() => {
              let t3 = T$.JSArrayOfWidgetL().of([]);
              for (let overlayImage of this.overlayImageOpts.overlayImages)
                t3.push(this[_positionedForOverlay](overlayImage));
              return t3;
            })(), $creationLocationd_0dea112b090073317d4: C[157] || CT.C157}), $creationLocationd_0dea112b090073317d4: C[160] || CT.C160}), T$.BuildContextLAndAsyncSnapshotLOfvoidToClipRectL()), $creationLocationd_0dea112b090073317d4: C[163] || CT.C163});
    }
    [_positionedForOverlay](overlayImage) {
      let zoomScale = this.map.getZoomScale(this.map.zoom, this.map.zoom);
      let pixelOrigin = this.map.getPixelOrigin();
      let upperLeftPixel = this.map.project(overlayImage.bounds.northWest).multiplyBy(zoomScale)['-'](pixelOrigin);
      let bottomRightPixel = this.map.project(overlayImage.bounds.southEast).multiplyBy(zoomScale)['-'](pixelOrigin);
      return new basic.Positioned.new({left: upperLeftPixel.x[$toDouble](), top: upperLeftPixel.y[$toDouble](), width: (dart.notNull(bottomRightPixel.x) - dart.notNull(upperLeftPixel.x))[$toDouble](), height: (dart.notNull(bottomRightPixel.y) - dart.notNull(upperLeftPixel.y))[$toDouble](), child: new image.Image.new({image: overlayImage.imageProvider, fit: box_fit.BoxFit.fill, color: new ui.Color.fromRGBO(255, 255, 255, overlayImage.opacity), colorBlendMode: ui.BlendMode.modulate, gaplessPlayback: overlayImage.gaplessPlayback, $creationLocationd_0dea112b090073317d4: C[167] || CT.C167}), $creationLocationd_0dea112b090073317d4: C[174] || CT.C174});
    }
  };
  (overlay_image_layer.OverlayImageLayer.new = function(overlayImageOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[overlayImageOpts$] = overlayImageOpts;
    this[map$3] = map;
    this[stream$4] = stream;
    overlay_image_layer.OverlayImageLayer.__proto__.new.call(this, {key: overlayImageOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = overlay_image_layer.OverlayImageLayer.prototype;
  dart.addTypeTests(overlay_image_layer.OverlayImageLayer);
  dart.addTypeCaches(overlay_image_layer.OverlayImageLayer);
  dart.setMethodSignature(overlay_image_layer.OverlayImageLayer, () => ({
    __proto__: dart.getMethods(overlay_image_layer.OverlayImageLayer.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_positionedForOverlay]: dart.fnType(dart.legacy(basic.Positioned), [dart.legacy(overlay_image_layer.OverlayImage)])
  }));
  dart.setLibraryUri(overlay_image_layer.OverlayImageLayer, I[10]);
  dart.setFieldSignature(overlay_image_layer.OverlayImageLayer, () => ({
    __proto__: dart.getFields(overlay_image_layer.OverlayImageLayer.__proto__),
    overlayImageOpts: dart.finalFieldType(dart.legacy(overlay_image_layer.OverlayImageLayerOptions)),
    map: dart.finalFieldType(dart.legacy(map.MapState)),
    stream: dart.finalFieldType(dart.legacy(async.Stream$(core.Null)))
  }));
  var group$ = dart.privateName(group_layer, "GroupLayerOptions.group");
  group_layer.GroupLayerOptions = class GroupLayerOptions extends layer.LayerOptions {
    get group() {
      return this[group$];
    }
    set group(value) {
      this[group$] = value;
    }
  };
  (group_layer.GroupLayerOptions.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let group = opts && 'group' in opts ? opts.group : null;
    let rebuild = opts && 'rebuild' in opts ? opts.rebuild : null;
    this[group$] = T$.JSArrayOfLayerOptionsL().of([]);
    this[group$] = group;
    group_layer.GroupLayerOptions.__proto__.new.call(this, {key: key, rebuild: T$.StreamLOfNull().as(rebuild)});
    ;
  }).prototype = group_layer.GroupLayerOptions.prototype;
  dart.addTypeTests(group_layer.GroupLayerOptions);
  dart.addTypeCaches(group_layer.GroupLayerOptions);
  dart.setLibraryUri(group_layer.GroupLayerOptions, I[11]);
  dart.setFieldSignature(group_layer.GroupLayerOptions, () => ({
    __proto__: dart.getFields(group_layer.GroupLayerOptions.__proto__),
    group: dart.fieldType(dart.legacy(core.List$(dart.legacy(layer.LayerOptions))))
  }));
  var options$6 = dart.privateName(group_layer, "GroupLayerWidget.options");
  group_layer.GroupLayerWidget = class GroupLayerWidget extends framework.StatelessWidget {
    get options() {
      return this[options$6];
    }
    set options(value) {
      super.options = value;
    }
    build(context) {
      let mapState = map.MapState.of(context);
      return new group_layer.GroupLayer.new(this.options, mapState, mapState.onMoved, {$creationLocationd_0dea112b090073317d4: C[181] || CT.C181});
    }
  };
  (group_layer.GroupLayerWidget.new = function(opts) {
    let options = opts && 'options' in opts ? opts.options : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$6] = options;
    group_layer.GroupLayerWidget.__proto__.new.call(this, {key: options.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = group_layer.GroupLayerWidget.prototype;
  dart.addTypeTests(group_layer.GroupLayerWidget);
  dart.addTypeCaches(group_layer.GroupLayerWidget);
  dart.setMethodSignature(group_layer.GroupLayerWidget, () => ({
    __proto__: dart.getMethods(group_layer.GroupLayerWidget.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(group_layer.GroupLayerWidget, I[11]);
  dart.setFieldSignature(group_layer.GroupLayerWidget, () => ({
    __proto__: dart.getFields(group_layer.GroupLayerWidget.__proto__),
    options: dart.finalFieldType(dart.legacy(group_layer.GroupLayerOptions))
  }));
  var groupOpts$ = dart.privateName(group_layer, "GroupLayer.groupOpts");
  var map$4 = dart.privateName(group_layer, "GroupLayer.map");
  var stream$5 = dart.privateName(group_layer, "GroupLayer.stream");
  var _build$1 = dart.privateName(group_layer, "_build");
  var _createLayer = dart.privateName(group_layer, "_createLayer");
  group_layer.GroupLayer = class GroupLayer extends framework.StatelessWidget {
    get groupOpts() {
      return this[groupOpts$];
    }
    set groupOpts(value) {
      super.groupOpts = value;
    }
    get map() {
      return this[map$4];
    }
    set map(value) {
      super.map = value;
    }
    get stream() {
      return this[stream$5];
    }
    set stream(value) {
      super.stream = value;
    }
    build(context) {
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, bc) => this[_build$1](context), T$.BuildContextLAndBoxConstraintsLToWidgetL()), $creationLocationd_0dea112b090073317d4: C[186] || CT.C186});
    }
    [_build$1](context) {
      return new (T$.StreamBuilderOfNull()).new({stream: this.stream, builder: dart.fn((context, _) => {
          let layers = (() => {
            let t4 = T$.JSArrayOfWidgetL().of([]);
            for (let options of this.groupOpts.group)
              t4.push(this[_createLayer](options));
            return t4;
          })();
          return new container.Container.new({child: new basic.Stack.new({children: layers, $creationLocationd_0dea112b090073317d4: C[189] || CT.C189}), $creationLocationd_0dea112b090073317d4: C[192] || CT.C192});
        }, T$.BuildContextLAndAsyncSnapshotLToContainerL()), $creationLocationd_0dea112b090073317d4: C[195] || CT.C195});
    }
    [_createLayer](options) {
      if (T$.MarkerLayerOptionsL().is(options)) {
        return new marker_layer.MarkerLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[199] || CT.C199});
      }
      if (T$.CircleLayerOptionsL().is(options)) {
        return new circle_layer.CircleLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[204] || CT.C204});
      }
      if (T$.PolylineLayerOptionsL().is(options)) {
        return new polyline_layer.PolylineLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[209] || CT.C209});
      }
      if (T$.PolygonLayerOptionsL().is(options)) {
        return new polygon_layer.PolygonLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[214] || CT.C214});
      }
      if (T$.OverlayImageLayerOptionsL().is(options)) {
        return new overlay_image_layer.OverlayImageLayer.new(options, this.map, options.rebuild, {$creationLocationd_0dea112b090073317d4: C[219] || CT.C219});
      }
      dart.throw(core.Exception.new("Unknown options type for GeometryLayer: " + dart.str(options)));
    }
  };
  (group_layer.GroupLayer.new = function(groupOpts, map, stream, opts) {
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[groupOpts$] = groupOpts;
    this[map$4] = map;
    this[stream$5] = stream;
    group_layer.GroupLayer.__proto__.new.call(this, {key: groupOpts.key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = group_layer.GroupLayer.prototype;
  dart.addTypeTests(group_layer.GroupLayer);
  dart.addTypeCaches(group_layer.GroupLayer);
  dart.setMethodSignature(group_layer.GroupLayer, () => ({
    __proto__: dart.getMethods(group_layer.GroupLayer.__proto__),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_build$1]: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_createLayer]: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(layer.LayerOptions)])
  }));
  dart.setLibraryUri(group_layer.GroupLayer, I[11]);
  dart.setFieldSignature(group_layer.GroupLayer, () => ({
    __proto__: dart.getFields(group_layer.GroupLayer.__proto__),
    groupOpts: dart.finalFieldType(dart.legacy(group_layer.GroupLayerOptions)),
    map: dart.finalFieldType(dart.legacy(map.MapState)),
    stream: dart.finalFieldType(dart.legacy(async.Stream$(core.Null)))
  }));
  var mapState$0 = dart.privateName(map_state_widget, "MapStateInheritedWidget.mapState");
  map_state_widget.MapStateInheritedWidget = class MapStateInheritedWidget extends framework.InheritedWidget {
    get mapState() {
      return this[mapState$0];
    }
    set mapState(value) {
      super.mapState = value;
    }
    updateShouldNotify(oldWidget) {
      T$.MapStateInheritedWidgetL().as(oldWidget);
      return oldWidget.mapState.zoom == this.mapState.zoom && dart.equals(oldWidget.mapState.center, this.mapState.center) && dart.equals(oldWidget.mapState.bounds, this.mapState.bounds) && oldWidget.mapState.rotation == this.mapState.rotation;
    }
    static of(context) {
      return context.dependOnInheritedWidgetOfExactType(T$.MapStateInheritedWidgetL());
    }
  };
  (map_state_widget.MapStateInheritedWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let mapState = opts && 'mapState' in opts ? opts.mapState : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[mapState$0] = mapState;
    map_state_widget.MapStateInheritedWidget.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = map_state_widget.MapStateInheritedWidget.prototype;
  dart.addTypeTests(map_state_widget.MapStateInheritedWidget);
  dart.addTypeCaches(map_state_widget.MapStateInheritedWidget);
  dart.setMethodSignature(map_state_widget.MapStateInheritedWidget, () => ({
    __proto__: dart.getMethods(map_state_widget.MapStateInheritedWidget.__proto__),
    updateShouldNotify: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(map_state_widget.MapStateInheritedWidget, I[12]);
  dart.setFieldSignature(map_state_widget.MapStateInheritedWidget, () => ({
    __proto__: dart.getFields(map_state_widget.MapStateInheritedWidget.__proto__),
    mapState: dart.finalFieldType(dart.legacy(map.MapState))
  }));
  var onRotationChanged = dart.privateName(map, "MapControllerImpl.onRotationChanged");
  var _readyCompleter = dart.privateName(map, "_readyCompleter");
  var _state = dart.privateName(map, "_state");
  var FitBoundsOptions_zoom = dart.privateName(flutter_map, "FitBoundsOptions.zoom");
  var FitBoundsOptions_maxZoom = dart.privateName(flutter_map, "FitBoundsOptions.maxZoom");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var FitBoundsOptions_padding = dart.privateName(flutter_map, "FitBoundsOptions.padding");
  var _positionSink = dart.privateName(map, "_positionSink");
  map.MapControllerImpl = class MapControllerImpl extends core.Object {
    get onRotationChanged() {
      return this[onRotationChanged];
    }
    set onRotationChanged(value) {
      this[onRotationChanged] = value;
    }
    get onReady() {
      return this[_readyCompleter].future;
    }
    set state(state) {
      this[_state] = state;
      if (!dart.test(this[_readyCompleter].isCompleted)) {
        this[_readyCompleter].complete();
      }
    }
    move(center, zoom, opts) {
      let hasGesture = opts && 'hasGesture' in opts ? opts.hasGesture : false;
      this[_state].move(center, zoom, {hasGesture: hasGesture});
    }
    fitBounds(bounds, opts) {
      let options = opts && 'options' in opts ? opts.options : C[224] || CT.C224;
      this[_state].fitBounds(bounds, options);
    }
    get ready() {
      return this[_state] != null;
    }
    get center() {
      return this[_state].center;
    }
    get bounds() {
      return this[_state].bounds;
    }
    get zoom() {
      return this[_state].zoom;
    }
    rotate(degree) {
      let t5;
      this[_state].rotation = degree;
      if (this.onRotationChanged != null) {
        t5 = degree;
        this.onRotationChanged(t5);
      }
    }
    get position() {
      return this[_state][_positionSink].stream;
    }
  };
  (map.MapControllerImpl.new = function() {
    this[_readyCompleter] = T$.CompleterOfNull().new();
    this[_state] = null;
    this[onRotationChanged] = null;
    ;
  }).prototype = map.MapControllerImpl.prototype;
  dart.addTypeTests(map.MapControllerImpl);
  dart.addTypeCaches(map.MapControllerImpl);
  map.MapControllerImpl[dart.implements] = () => [flutter_map.MapController];
  dart.setMethodSignature(map.MapControllerImpl, () => ({
    __proto__: dart.getMethods(map.MapControllerImpl.__proto__),
    move: dart.fnType(dart.void, [dart.legacy(latlong.LatLng), dart.legacy(core.double)], {hasGesture: dart.legacy(core.bool)}, {}),
    fitBounds: dart.fnType(dart.void, [dart.legacy(latlng_bounds.LatLngBounds)], {options: dart.legacy(flutter_map.FitBoundsOptions)}, {}),
    rotate: dart.fnType(dart.void, [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(map.MapControllerImpl, () => ({
    __proto__: dart.getGetters(map.MapControllerImpl.__proto__),
    onReady: dart.legacy(async.Future$(core.Null)),
    ready: dart.legacy(core.bool),
    center: dart.legacy(latlong.LatLng),
    bounds: dart.legacy(latlng_bounds.LatLngBounds),
    zoom: dart.legacy(core.double),
    position: dart.legacy(async.Stream$(dart.legacy(flutter_map.MapPosition)))
  }));
  dart.setSetterSignature(map.MapControllerImpl, () => ({
    __proto__: dart.getSetters(map.MapControllerImpl.__proto__),
    state: dart.legacy(map.MapState)
  }));
  dart.setLibraryUri(map.MapControllerImpl, I[13]);
  dart.setFieldSignature(map.MapControllerImpl, () => ({
    __proto__: dart.getFields(map.MapControllerImpl.__proto__),
    [_readyCompleter]: dart.finalFieldType(dart.legacy(async.Completer$(core.Null))),
    [_state]: dart.fieldType(dart.legacy(map.MapState)),
    onRotationChanged: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.double)])))
  }));
  var options$7 = dart.privateName(map, "MapState.options");
  var rotation = dart.privateName(map, "MapState.rotation");
  var _lastCenter = dart.privateName(map, "_lastCenter");
  var _lastBounds = dart.privateName(map, "_lastBounds");
  var _lastPixelBounds = dart.privateName(map, "_lastPixelBounds");
  var _pixelOrigin = dart.privateName(map, "_pixelOrigin");
  var _initialized = dart.privateName(map, "_initialized");
  var _size = dart.privateName(map, "_size");
  var _zoom = dart.privateName(map, "_zoom");
  var _onMoveSink = dart.privateName(map, "_onMoveSink");
  var _init = dart.privateName(map, "_init");
  var _calculateBounds = dart.privateName(map, "_calculateBounds");
  var _centerLayerPoint = dart.privateName(map, "_centerLayerPoint");
  map.MapState = class MapState extends core.Object {
    get options() {
      return this[options$7];
    }
    set options(value) {
      this[options$7] = value;
    }
    get rotation() {
      return this[rotation];
    }
    set rotation(value) {
      this[rotation] = value;
    }
    get zoom() {
      return this[_zoom];
    }
    get onMoved() {
      return this[_onMoveSink].stream;
    }
    get size() {
      return this[_size];
    }
    set size(s) {
      this[_size] = s;
      if (!dart.test(this[_initialized])) {
        this[_init]();
        this[_initialized] = true;
      }
      this[_pixelOrigin] = this.getNewPixelOrigin(this[_lastCenter]);
    }
    get center() {
      let t5;
      t5 = this.getCenter();
      return t5 == null ? this.options.center : t5;
    }
    get bounds() {
      return this.getBounds();
    }
    get pixelBounds() {
      return this.getLastPixelBounds();
    }
    [_init]() {
      if (this.options.bounds != null) {
        this.fitBounds(this.options.bounds, this.options.boundsOptions);
      } else {
        this.move(this.options.center, this.zoom);
      }
    }
    dispose() {
      this[_onMoveSink].close();
    }
    forceRebuild() {
      let t5;
      t5 = this[_onMoveSink];
      t5 == null ? null : t5.add(null);
    }
    move(center, zoom, opts) {
      let t5, t7, t6, t5$;
      let hasGesture = opts && 'hasGesture' in opts ? opts.hasGesture : false;
      zoom = this.fitZoomToBounds(zoom);
      let mapMoved = !dart.equals(center, this[_lastCenter]) || zoom != this[_zoom];
      if (this[_lastCenter] != null && (!mapMoved || !dart.test(this.bounds.isValid))) {
        return;
      }
      if (dart.test(this.options.isOutOfBounds(center))) {
        if (!dart.test(this.options.slideOnBoundaries)) {
          return;
        }
        center = this.options.containPoint(center, (t5 = this[_lastCenter], t5 == null ? center : t5));
      }
      let mapPosition = new flutter_map.MapPosition.new({center: center, bounds: this.bounds, zoom: zoom, hasGesture: T$.boolL().as(hasGesture)});
      this[_zoom] = zoom;
      this[_lastCenter] = center;
      this[_lastPixelBounds] = this.getPixelBounds(this[_zoom]);
      this[_lastBounds] = this[_calculateBounds]();
      this[_pixelOrigin] = this.getNewPixelOrigin(center);
      this[_onMoveSink].add(null);
      this[_positionSink].add(mapPosition);
      if (this.options.onPositionChanged != null) {
        t5$ = this.options;
        t6 = mapPosition;
        t7 = hasGesture;
        t5$.onPositionChanged(t6, T$.boolL().as(t7));
      }
    }
    fitZoomToBounds(zoom) {
      zoom == null ? zoom = this[_zoom] : null;
      if (this.options.maxZoom != null) {
        zoom = dart.notNull(zoom) > dart.notNull(this.options.maxZoom) ? this.options.maxZoom : zoom;
      }
      if (this.options.minZoom != null) {
        zoom = dart.notNull(zoom) < dart.notNull(this.options.minZoom) ? this.options.minZoom : zoom;
      }
      return zoom;
    }
    fitBounds(bounds, options) {
      if (!dart.test(bounds.isValid)) {
        dart.throw(core.Exception.new("Bounds are not valid."));
      }
      let target = this.getBoundsCenterZoom(bounds, options);
      this.move(target.center, target.zoom);
    }
    getCenter() {
      if (this[_lastCenter] != null) {
        return this[_lastCenter];
      }
      return this.layerPointToLatLng(this[_centerLayerPoint]);
    }
    getBounds() {
      if (this[_lastBounds] != null) {
        return this[_lastBounds];
      }
      return this[_calculateBounds]();
    }
    getLastPixelBounds() {
      if (this[_lastPixelBounds] != null) {
        return this[_lastPixelBounds];
      }
      return this.getPixelBounds(this.zoom);
    }
    [_calculateBounds]() {
      let bounds = this.getLastPixelBounds();
      return new latlng_bounds.LatLngBounds.new(this.unproject(bounds.bottomLeft), this.unproject(bounds.topRight));
    }
    getBoundsCenterZoom(bounds, options) {
      let paddingTL = new (T$.CustomPointOfdoubleL()).new(options.padding.left, options.padding.top);
      let paddingBR = new (T$.CustomPointOfdoubleL()).new(options.padding.right, options.padding.bottom);
      let paddingTotalXY = paddingTL['+'](paddingBR);
      let zoom = this.getBoundsZoom(bounds, paddingTotalXY, {inside: false});
      zoom = math.min(T$.doubleL(), options.maxZoom, zoom);
      let paddingOffset = paddingBR['-'](paddingTL)['/'](2);
      let swPoint = this.project(bounds.southWest, zoom);
      let nePoint = this.project(bounds.northEast, zoom);
      let center = this.unproject(swPoint['+'](nePoint)['/'](2)['+'](paddingOffset), zoom);
      return new center_zoom.CenterZoom.new({center: center, zoom: zoom});
    }
    getBoundsZoom(bounds, padding, opts) {
      let t5, t5$, t5$0;
      let inside = opts && 'inside' in opts ? opts.inside : false;
      let zoom = (t5 = this.zoom, t5 == null ? 0.0 : t5);
      let min = (t5$ = this.options.minZoom, t5$ == null ? 0.0 : t5$);
      let max = (t5$0 = this.options.maxZoom, t5$0 == null ? 1 / 0 : t5$0);
      let nw = bounds.northWest;
      let se = bounds.southEast;
      let size = this.size['-'](padding);
      size = new (T$.CustomPointOfnumL()).new(math.max(T$.numL(), 0, size.x), math.max(T$.numL(), 0, size.y));
      let boundsSize = T$.BoundsOfnumL().new(this.project(se, zoom), this.project(nw, zoom)).size;
      let scaleX = dart.notNull(size.x) / dart.notNull(boundsSize.x);
      let scaleY = dart.notNull(size.y) / dart.notNull(boundsSize.y);
      let scale = dart.test(inside) ? math.max(T$.doubleL(), scaleX, scaleY) : math.min(T$.doubleL(), scaleX, scaleY);
      zoom = this.getScaleZoom(scale, zoom);
      return math.max(T$.doubleL(), min, math.min(T$.doubleL(), max, zoom));
    }
    project(latlng, zoom = null) {
      zoom == null ? zoom = this[_zoom] : null;
      return this.options.crs.latLngToPoint(latlng, zoom);
    }
    unproject(point, zoom = null) {
      zoom == null ? zoom = this[_zoom] : null;
      return this.options.crs.pointToLatLng(point, zoom);
    }
    layerPointToLatLng(point) {
      return this.unproject(point);
    }
    get [_centerLayerPoint]() {
      return this.size['/'](2);
    }
    getZoomScale(toZoom, fromZoom) {
      let t5;
      let crs = this.options.crs;
      fromZoom = (t5 = fromZoom, t5 == null ? this[_zoom] : t5);
      return dart.notNull(crs.scale(toZoom)) / dart.notNull(crs.scale(fromZoom));
    }
    getScaleZoom(scale, fromZoom) {
      let t5;
      let crs = this.options.crs;
      fromZoom = (t5 = fromZoom, t5 == null ? this[_zoom] : t5);
      return crs.zoom(dart.notNull(scale) * dart.notNull(crs.scale(fromZoom)));
    }
    getPixelWorldBounds(zoom) {
      let t5;
      return this.options.crs.getProjectedBounds((t5 = zoom, t5 == null ? this[_zoom] : t5));
    }
    getPixelOrigin() {
      return this[_pixelOrigin];
    }
    getNewPixelOrigin(center, zoom = null) {
      let viewHalf = this.size['/'](2.0);
      return this.project(center, zoom)['-'](viewHalf).round();
    }
    getPixelBounds(zoom) {
      let mapZoom = zoom;
      let scale = this.getZoomScale(mapZoom, zoom);
      let pixelCenter = this.project(this.center, zoom).floor();
      let halfSize = this.size['/'](dart.notNull(scale) * 2);
      return T$.BoundsOfnumL().new(pixelCenter['-'](halfSize), pixelCenter['+'](halfSize));
    }
    static of(context, opts) {
      let t5;
      let nullOk = opts && 'nullOk' in opts ? opts.nullOk : false;
      if (!(context != null)) dart.assertFailed(null, I[14], 300, 12, "context != null");
      if (!(nullOk != null)) dart.assertFailed(null, I[14], 301, 12, "nullOk != null");
      let widget = context.dependOnInheritedWidgetOfExactType(T$.MapStateInheritedWidgetL());
      if (dart.test(nullOk) || widget != null) {
        t5 = widget;
        return t5 == null ? null : t5.mapState;
      }
      dart.throw(assertions.FlutterError.new("MapState.of() called with a context that does not contain a FlutterMap."));
    }
  };
  (map.MapState.new = function(options) {
    this[_lastCenter] = null;
    this[_lastBounds] = null;
    this[_lastPixelBounds] = null;
    this[_pixelOrigin] = null;
    this[_initialized] = false;
    this[_size] = null;
    this[options$7] = options;
    this[rotation] = options.rotation;
    this[_zoom] = options.zoom;
    this[_onMoveSink] = T$.StreamControllerOfNull().broadcast();
    this[_positionSink] = T$.StreamControllerOfMapPositionL().broadcast();
    ;
  }).prototype = map.MapState.prototype;
  dart.addTypeTests(map.MapState);
  dart.addTypeCaches(map.MapState);
  dart.setMethodSignature(map.MapState, () => ({
    __proto__: dart.getMethods(map.MapState.__proto__),
    [_init]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    forceRebuild: dart.fnType(dart.void, []),
    move: dart.fnType(dart.void, [dart.legacy(latlong.LatLng), dart.legacy(core.double)], {hasGesture: dart.dynamic}, {}),
    fitZoomToBounds: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    fitBounds: dart.fnType(dart.void, [dart.legacy(latlng_bounds.LatLngBounds), dart.legacy(flutter_map.FitBoundsOptions)]),
    getCenter: dart.fnType(dart.legacy(latlong.LatLng), []),
    getBounds: dart.fnType(dart.legacy(latlng_bounds.LatLngBounds), []),
    getLastPixelBounds: dart.fnType(dart.legacy(bounds.Bounds$(dart.legacy(core.num))), []),
    [_calculateBounds]: dart.fnType(dart.legacy(latlng_bounds.LatLngBounds), []),
    getBoundsCenterZoom: dart.fnType(dart.legacy(center_zoom.CenterZoom), [dart.legacy(latlng_bounds.LatLngBounds), dart.legacy(flutter_map.FitBoundsOptions)]),
    getBoundsZoom: dart.fnType(dart.legacy(core.double), [dart.legacy(latlng_bounds.LatLngBounds), dart.legacy(point.CustomPoint$(dart.legacy(core.double)))], {inside: dart.legacy(core.bool)}, {}),
    project: dart.fnType(dart.legacy(point.CustomPoint$(dart.legacy(core.num))), [dart.legacy(latlong.LatLng)], [dart.legacy(core.double)]),
    unproject: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(point.CustomPoint$(dart.legacy(core.num)))], [dart.legacy(core.double)]),
    layerPointToLatLng: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(point.CustomPoint$(dart.legacy(core.num)))]),
    getZoomScale: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double)]),
    getScaleZoom: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double)]),
    getPixelWorldBounds: dart.fnType(dart.legacy(bounds.Bounds$(dart.legacy(core.num))), [dart.legacy(core.double)]),
    getPixelOrigin: dart.fnType(dart.legacy(point.CustomPoint$(dart.legacy(core.num))), []),
    getNewPixelOrigin: dart.fnType(dart.legacy(point.CustomPoint$(dart.legacy(core.num))), [dart.legacy(latlong.LatLng)], [dart.legacy(core.double)]),
    getPixelBounds: dart.fnType(dart.legacy(bounds.Bounds$(dart.legacy(core.num))), [dart.legacy(core.double)])
  }));
  dart.setGetterSignature(map.MapState, () => ({
    __proto__: dart.getGetters(map.MapState.__proto__),
    zoom: dart.legacy(core.double),
    onMoved: dart.legacy(async.Stream$(core.Null)),
    size: dart.legacy(point.CustomPoint$(dart.legacy(core.num))),
    center: dart.legacy(latlong.LatLng),
    bounds: dart.legacy(latlng_bounds.LatLngBounds),
    pixelBounds: dart.legacy(bounds.Bounds$(dart.legacy(core.num))),
    [_centerLayerPoint]: dart.legacy(point.CustomPoint$(dart.legacy(core.num)))
  }));
  dart.setSetterSignature(map.MapState, () => ({
    __proto__: dart.getSetters(map.MapState.__proto__),
    size: dart.legacy(point.CustomPoint$(dart.legacy(core.num)))
  }));
  dart.setLibraryUri(map.MapState, I[13]);
  dart.setFieldSignature(map.MapState, () => ({
    __proto__: dart.getFields(map.MapState.__proto__),
    options: dart.fieldType(dart.legacy(flutter_map.MapOptions)),
    [_onMoveSink]: dart.finalFieldType(dart.legacy(async.StreamController$(core.Null))),
    [_positionSink]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(flutter_map.MapPosition)))),
    [_zoom]: dart.fieldType(dart.legacy(core.double)),
    rotation: dart.fieldType(dart.legacy(core.double)),
    [_lastCenter]: dart.fieldType(dart.legacy(latlong.LatLng)),
    [_lastBounds]: dart.fieldType(dart.legacy(latlng_bounds.LatLngBounds)),
    [_lastPixelBounds]: dart.fieldType(dart.legacy(bounds.Bounds$(dart.legacy(core.num)))),
    [_pixelOrigin]: dart.fieldType(dart.legacy(point.CustomPoint$(dart.legacy(core.num)))),
    [_initialized]: dart.fieldType(dart.legacy(core.bool)),
    [_size]: dart.fieldType(dart.legacy(point.CustomPoint$(dart.legacy(core.num))))
  }));
  var _mapCenterStart = dart.privateName(gestures, "_mapCenterStart");
  var _mapZoomStart = dart.privateName(gestures, "_mapZoomStart");
  var _focalStartGlobal = dart.privateName(gestures, "_focalStartGlobal");
  var _focalStartLocal = dart.privateName(gestures, "_focalStartLocal");
  var _controller = dart.privateName(gestures, "_controller");
  var _flingAnimation = dart.privateName(gestures, "_flingAnimation");
  var _flingOffset = dart.privateName(gestures, "_flingOffset");
  var _doubleTapController = dart.privateName(gestures, "_doubleTapController");
  var _doubleTapZoomAnimation = dart.privateName(gestures, "_doubleTapZoomAnimation");
  var _doubleTapCenterAnimation = dart.privateName(gestures, "_doubleTapCenterAnimation");
  var _tapUpCounter = dart.privateName(gestures, "_tapUpCounter");
  var _doubleTapHoldMaxDelay = dart.privateName(gestures, "_doubleTapHoldMaxDelay");
  var _handleFlingAnimation = dart.privateName(gestures, "_handleFlingAnimation");
  var _handleDoubleTapZoomAnimation = dart.privateName(gestures, "_handleDoubleTapZoomAnimation");
  var _offsetToPoint = dart.privateName(gestures, "_offsetToPoint");
  var _offsetToCrs = dart.privateName(gestures, "_offsetToCrs");
  var _handleDoubleTapHold = dart.privateName(gestures, "_handleDoubleTapHold");
  var _getZoomForScale = dart.privateName(gestures, "_getZoomForScale");
  var _pointToOffset = dart.privateName(gestures, "_pointToOffset");
  var _resetDoubleTapHold = dart.privateName(gestures, "_resetDoubleTapHold");
  var _getDoubleTapFocalDelta = dart.privateName(gestures, "_getDoubleTapFocalDelta");
  var _startDoubleTapAnimation = dart.privateName(gestures, "_startDoubleTapAnimation");
  var _projectDeltaOnBounds = dart.privateName(gestures, "_projectDeltaOnBounds");
  var layers$0 = dart.privateName(flutter_map, "FlutterMap.layers");
  var children$ = dart.privateName(flutter_map, "FlutterMap.children");
  var options$8 = dart.privateName(flutter_map, "FlutterMap.options");
  var _mapController = dart.privateName(flutter_map, "_mapController");
  flutter_map.FlutterMap = class FlutterMap extends framework.StatefulWidget {
    get layers() {
      return this[layers$0];
    }
    set layers(value) {
      super.layers = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get options() {
      return this[options$8];
    }
    set options(value) {
      super.options = value;
    }
    createState() {
      return new flutter_map_state.FlutterMapState.new(this[_mapController]);
    }
  };
  (flutter_map.FlutterMap.new = function(opts) {
    let t5;
    let key = opts && 'key' in opts ? opts.key : null;
    let options = opts && 'options' in opts ? opts.options : null;
    let layers = opts && 'layers' in opts ? opts.layers : C[227] || CT.C227;
    let children = opts && 'children' in opts ? opts.children : C[228] || CT.C228;
    let mapController = opts && 'mapController' in opts ? opts.mapController : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[options$8] = options;
    this[layers$0] = layers;
    this[children$] = children;
    this[_mapController] = T$.MapControllerImplL().as((t5 = mapController, t5 == null ? flutter_map.MapController.new() : t5));
    flutter_map.FlutterMap.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = flutter_map.FlutterMap.prototype;
  dart.addTypeTests(flutter_map.FlutterMap);
  dart.addTypeCaches(flutter_map.FlutterMap);
  dart.setMethodSignature(flutter_map.FlutterMap, () => ({
    __proto__: dart.getMethods(flutter_map.FlutterMap.__proto__),
    createState: dart.fnType(dart.legacy(flutter_map_state.FlutterMapState), [])
  }));
  dart.setLibraryUri(flutter_map.FlutterMap, I[15]);
  dart.setFieldSignature(flutter_map.FlutterMap, () => ({
    __proto__: dart.getFields(flutter_map.FlutterMap.__proto__),
    layers: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(layer.LayerOptions)))),
    children: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(framework.Widget)))),
    options: dart.finalFieldType(dart.legacy(flutter_map.MapOptions)),
    [_mapController]: dart.finalFieldType(dart.legacy(map.MapControllerImpl))
  }));
  const State_TickerProviderStateMixin$36$ = class State_TickerProviderStateMixin extends framework.State$(dart.legacy(flutter_map.FlutterMap)) {};
  (State_TickerProviderStateMixin$36$.new = function() {
    ticker_provider.TickerProviderStateMixin$(dart.legacy(flutter_map.FlutterMap))[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36$.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36$.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36$, ticker_provider.TickerProviderStateMixin$(dart.legacy(flutter_map.FlutterMap)));
  gestures.MapGestureMixin = class MapGestureMixin extends State_TickerProviderStateMixin$36$ {
    get map() {
      return this.mapState;
    }
    initState() {
      let t5, t5$;
      super.initState();
      this[_controller] = (t5 = new animation_controller.AnimationController.new({vsync: this}), (() => {
        t5.addListener(dart.bind(this, _handleFlingAnimation));
        return t5;
      })());
      this[_doubleTapController] = (t5$ = new animation_controller.AnimationController.new({vsync: this, duration: new core.Duration.new({milliseconds: 200})}), (() => {
        t5$.addListener(dart.bind(this, _handleDoubleTapZoomAnimation));
        return t5$;
      })());
    }
    handleScaleStart(details) {
      this.setState(dart.fn(() => {
        this[_mapZoomStart] = this.map.zoom;
        this[_mapCenterStart] = this.map.center;
        let focalOffset = details.localFocalPoint;
        this[_focalStartLocal] = this[_offsetToPoint](focalOffset);
        this[_focalStartGlobal] = this[_offsetToCrs](focalOffset);
        this[_controller].stop();
      }, T$.VoidToNull()));
    }
    handleScaleUpdate(details) {
      if (this[_tapUpCounter] === 1) {
        this[_handleDoubleTapHold](details);
        return;
      }
      this.setState(dart.fn(() => {
        let focalOffset = this[_offsetToPoint](details.localFocalPoint);
        let newZoom = this[_getZoomForScale](this[_mapZoomStart], details.scale);
        let focalStartPt = this.map.project(this[_focalStartGlobal], newZoom);
        let newCenterPt = focalStartPt['-'](focalOffset)['+'](this.map.size['/'](2.0));
        let newCenter = this.map.unproject(newCenterPt, newZoom);
        this.map.move(newCenter, newZoom, {hasGesture: true});
        this[_flingOffset] = this[_pointToOffset](this[_focalStartLocal]['-'](focalOffset));
      }, T$.VoidToNull()));
    }
    handleScaleEnd(details) {
      let t5;
      this[_resetDoubleTapHold]();
      let magnitude = details.velocity.pixelsPerSecond.distance;
      if (dart.notNull(magnitude) < 800) {
        return;
      }
      let direction = details.velocity.pixelsPerSecond['/'](magnitude);
      let distance = ui.Offset.zero['&'](this.context.size).shortestSide;
      let v = vector_math_64.Matrix4.rotationZ(-dart.notNull(latlong.degToRadian(this.mapState.rotation)))['*'](vector_math_64.Vector4.new(direction.dx, direction.dy, 0.0, 0.0));
      direction = new ui.Offset.new(core.double.as(dart.dload(v, 'x')), core.double.as(dart.dload(v, 'y')));
      this[_flingAnimation] = new (T$.TweenOfOffsetL()).new({begin: this[_flingOffset], end: this[_flingOffset]['-'](direction['*'](distance))}).animate(this[_controller]);
      t5 = this[_controller];
      (() => {
        t5.value = 0.0;
        t5.fling({velocity: dart.notNull(magnitude) / 1000.0});
        return t5;
      })();
    }
    handleTap(position) {
      let t6, t5;
      if (this.options.onTap == null) {
        return;
      }
      let latlng = this[_offsetToCrs](position.relative);
      t5 = this.options;
      t6 = latlng;
      t5.onTap(t6);
    }
    handleLongPress(position) {
      let t6, t5;
      this[_resetDoubleTapHold]();
      if (this.options.onLongPress == null) {
        return;
      }
      let latlng = this[_offsetToCrs](position.relative);
      t5 = this.options;
      t6 = latlng;
      t5.onLongPress(t6);
    }
    [_offsetToCrs](offset) {
      let renderObject = T$.RenderBoxL().as(this.context.findRenderObject());
      let width = renderObject.size.width;
      let height = renderObject.size.height;
      let localPoint = this[_offsetToPoint](offset);
      let localPointCenterDistance = new (T$.CustomPointOfnumL()).new(dart.notNull(width) / 2 - dart.notNull(localPoint.x), dart.notNull(height) / 2 - dart.notNull(localPoint.y));
      let mapCenter = this.map.project(this.map.center);
      let point = mapCenter['-'](localPointCenterDistance);
      return this.map.unproject(point);
    }
    handleDoubleTap(tapPosition) {
      this[_resetDoubleTapHold]();
      let centerPos = this[_pointToOffset](this.map.size)['/'](2.0);
      let newZoom = this[_getZoomForScale](this.map.zoom, 2.0);
      let focalDelta = this[_getDoubleTapFocalDelta](centerPos, tapPosition.relative, dart.notNull(newZoom) - dart.notNull(this.map.zoom));
      let newCenter = this[_offsetToCrs](centerPos['+'](focalDelta));
      this[_startDoubleTapAnimation](newZoom, newCenter);
    }
    [_getDoubleTapFocalDelta](centerPos, tapPos, zoomDiff) {
      let tapDelta = tapPos['-'](centerPos);
      let zoomScale = 1 / math.pow(2, zoomDiff);
      let maxDelta = centerPos['*'](1 - zoomScale);
      let tappedOutExtent = tapDelta.dx[$abs]() > dart.notNull(maxDelta.dx) || tapDelta.dy[$abs]() > dart.notNull(maxDelta.dy);
      return tappedOutExtent ? this[_projectDeltaOnBounds](tapDelta, maxDelta) : tapDelta;
    }
    [_projectDeltaOnBounds](delta, maxDelta) {
      let weightX = delta.dx[$abs]() / dart.notNull(maxDelta.dx);
      let weightY = delta.dy[$abs]() / dart.notNull(maxDelta.dy);
      return delta['/'](math.max(T$.doubleL(), weightX, weightY));
    }
    [_startDoubleTapAnimation](newZoom, newCenter) {
      let t5;
      this[_doubleTapZoomAnimation] = new (T$.TweenOfdoubleL()).new({begin: this.map.zoom, end: newZoom}).chain(new tween.CurveTween.new({curve: curves.Curves.fastOutSlowIn})).animate(this[_doubleTapController]);
      this[_doubleTapCenterAnimation] = new latlng_tween.LatLngTween.new({begin: this.map.center, end: newCenter}).chain(new tween.CurveTween.new({curve: curves.Curves.fastOutSlowIn})).animate(this[_doubleTapController]);
      t5 = this[_doubleTapController];
      (() => {
        t5.value = 0.0;
        t5.forward();
        return t5;
      })();
    }
    [_handleDoubleTapZoomAnimation]() {
      this.setState(dart.fn(() => {
        this.map.move(T$.LatLngL().as(this[_doubleTapCenterAnimation].value), T$.doubleL().as(this[_doubleTapZoomAnimation].value), {hasGesture: true});
      }, T$.VoidToNull()));
    }
    handleOnTapUp(details) {
      let t5;
      t5 = this[_doubleTapHoldMaxDelay];
      t5 == null ? null : t5.cancel();
      if ((this[_tapUpCounter] = dart.notNull(this[_tapUpCounter]) + 1) === 1) {
        this[_doubleTapHoldMaxDelay] = async.Timer.new(C[226] || CT.C226, dart.bind(this, _resetDoubleTapHold));
      }
    }
    [_handleDoubleTapHold](details) {
      let t5;
      t5 = this[_doubleTapHoldMaxDelay];
      t5 == null ? null : t5.cancel();
      this.setState(dart.fn(() => {
        let t5, t5$;
        let zoom = this.map.zoom;
        let focalOffset = this[_offsetToPoint](details.localFocalPoint);
        let verticalOffset = this[_pointToOffset](this[_focalStartLocal]['-'](focalOffset)).dy;
        let newZoom = dart.notNull(this[_mapZoomStart]) - dart.notNull(verticalOffset) / 360 * dart.notNull(zoom);
        let min = (t5 = this.options.minZoom, t5 == null ? 0.0 : t5);
        let max = (t5$ = this.options.maxZoom, t5$ == null ? 1 / 0 : t5$);
        let actualZoom = math.max(T$.doubleL(), min, math.min(T$.doubleL(), max, newZoom));
        this.map.move(this.map.center, actualZoom, {hasGesture: true});
      }, T$.VoidToNull()));
    }
    [_resetDoubleTapHold]() {
      let t5;
      t5 = this[_doubleTapHoldMaxDelay];
      t5 == null ? null : t5.cancel();
      this[_tapUpCounter] = 0;
    }
    [_handleFlingAnimation]() {
      this[_flingOffset] = this[_flingAnimation].value;
      let newCenterPoint = this.map.project(this[_mapCenterStart])['+'](new (T$.CustomPointOfnumL()).new(this[_flingOffset].dx, this[_flingOffset].dy));
      let newCenter = this.map.unproject(newCenterPoint);
      this.map.move(newCenter, this.map.zoom, {hasGesture: true});
    }
    [_offsetToPoint](offset) {
      return new (T$.CustomPointOfnumL()).new(offset.dx, offset.dy);
    }
    [_pointToOffset](point) {
      return new ui.Offset.new(point.x[$toDouble](), point.y[$toDouble]());
    }
    [_getZoomForScale](startZoom, scale) {
      let resultZoom = dart.notNull(startZoom) + math.log(scale) / 0.6931471805599453;
      return this.map.fitZoomToBounds(resultZoom);
    }
    dispose() {
      this[_controller].dispose();
      this[_doubleTapController].dispose();
      super.dispose();
    }
  };
  (gestures.MapGestureMixin.new = function() {
    this[_mapCenterStart] = null;
    this[_mapZoomStart] = null;
    this[_focalStartGlobal] = null;
    this[_focalStartLocal] = null;
    this[_controller] = null;
    this[_flingAnimation] = null;
    this[_flingOffset] = ui.Offset.zero;
    this[_doubleTapController] = null;
    this[_doubleTapZoomAnimation] = null;
    this[_doubleTapCenterAnimation] = null;
    this[_tapUpCounter] = 0;
    this[_doubleTapHoldMaxDelay] = null;
    gestures.MapGestureMixin.__proto__.new.call(this);
    ;
  }).prototype = gestures.MapGestureMixin.prototype;
  dart.addTypeTests(gestures.MapGestureMixin);
  dart.addTypeCaches(gestures.MapGestureMixin);
  dart.setMethodSignature(gestures.MapGestureMixin, () => ({
    __proto__: dart.getMethods(gestures.MapGestureMixin.__proto__),
    handleScaleStart: dart.fnType(dart.void, [dart.legacy(scale.ScaleStartDetails)]),
    handleScaleUpdate: dart.fnType(dart.void, [dart.legacy(scale.ScaleUpdateDetails)]),
    handleScaleEnd: dart.fnType(dart.void, [dart.legacy(scale.ScaleEndDetails)]),
    handleTap: dart.fnType(dart.void, [dart.legacy(positioned_tap_detector.TapPosition)]),
    handleLongPress: dart.fnType(dart.void, [dart.legacy(positioned_tap_detector.TapPosition)]),
    [_offsetToCrs]: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(ui.Offset)]),
    handleDoubleTap: dart.fnType(dart.void, [dart.legacy(positioned_tap_detector.TapPosition)]),
    [_getDoubleTapFocalDelta]: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.Offset), dart.legacy(ui.Offset), dart.legacy(core.double)]),
    [_projectDeltaOnBounds]: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(ui.Offset), dart.legacy(ui.Offset)]),
    [_startDoubleTapAnimation]: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(latlong.LatLng)]),
    [_handleDoubleTapZoomAnimation]: dart.fnType(dart.void, []),
    handleOnTapUp: dart.fnType(dart.void, [dart.legacy(tap.TapUpDetails)]),
    [_handleDoubleTapHold]: dart.fnType(dart.void, [dart.legacy(scale.ScaleUpdateDetails)]),
    [_resetDoubleTapHold]: dart.fnType(dart.void, []),
    [_handleFlingAnimation]: dart.fnType(dart.void, []),
    [_offsetToPoint]: dart.fnType(dart.legacy(point.CustomPoint$(dart.legacy(core.num))), [dart.legacy(ui.Offset)]),
    [_pointToOffset]: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(point.CustomPoint$(dart.legacy(core.num)))]),
    [_getZoomForScale]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(gestures.MapGestureMixin, () => ({
    __proto__: dart.getGetters(gestures.MapGestureMixin.__proto__),
    map: dart.legacy(map.MapState)
  }));
  dart.setLibraryUri(gestures.MapGestureMixin, I[16]);
  dart.setFieldSignature(gestures.MapGestureMixin, () => ({
    __proto__: dart.getFields(gestures.MapGestureMixin.__proto__),
    [_mapCenterStart]: dart.fieldType(dart.legacy(latlong.LatLng)),
    [_mapZoomStart]: dart.fieldType(dart.legacy(core.double)),
    [_focalStartGlobal]: dart.fieldType(dart.legacy(latlong.LatLng)),
    [_focalStartLocal]: dart.fieldType(dart.legacy(point.CustomPoint$(dart.legacy(core.num)))),
    [_controller]: dart.fieldType(dart.legacy(animation_controller.AnimationController)),
    [_flingAnimation]: dart.fieldType(dart.legacy(animation.Animation$(dart.legacy(ui.Offset)))),
    [_flingOffset]: dart.fieldType(dart.legacy(ui.Offset)),
    [_doubleTapController]: dart.fieldType(dart.legacy(animation_controller.AnimationController)),
    [_doubleTapZoomAnimation]: dart.fieldType(dart.legacy(animation.Animation)),
    [_doubleTapCenterAnimation]: dart.fieldType(dart.legacy(animation.Animation)),
    [_tapUpCounter]: dart.fieldType(dart.legacy(core.int)),
    [_doubleTapHoldMaxDelay]: dart.fieldType(dart.legacy(async.Timer))
  }));
  dart.defineLazy(gestures.MapGestureMixin, {
    /*gestures.MapGestureMixin._kMinFlingVelocity*/get _kMinFlingVelocity() {
      return 800;
    }
  }, true);
  var mapController$ = dart.privateName(flutter_map_state, "FlutterMapState.mapController");
  var groups = dart.privateName(flutter_map_state, "FlutterMapState.groups");
  var rotation$ = dart.privateName(flutter_map_state, "FlutterMapState.rotation");
  var mapState = dart.privateName(flutter_map_state, "FlutterMapState.mapState");
  var _layerStackKey = dart.privateName(flutter_map_state, "_layerStackKey");
  var _positionedTapDetectorKey = dart.privateName(flutter_map_state, "_positionedTapDetectorKey");
  var _positionedTapController = dart.privateName(flutter_map_state, "_positionedTapController");
  var _dispose = dart.privateName(flutter_map_state, "_dispose");
  var _merge = dart.privateName(flutter_map_state, "_merge");
  var _createLayer$ = dart.privateName(flutter_map_state, "_createLayer");
  flutter_map_state.FlutterMapState = class FlutterMapState extends gestures.MapGestureMixin {
    get mapController() {
      return this[mapController$];
    }
    set mapController(value) {
      super.mapController = value;
    }
    get groups() {
      return this[groups];
    }
    set groups(value) {
      super.groups = value;
    }
    get rotation() {
      return this[rotation$];
    }
    set rotation(value) {
      this[rotation$] = value;
    }
    get mapState() {
      return this[mapState];
    }
    set mapState(value) {
      this[mapState] = value;
    }
    get options() {
      let t5;
      t5 = this.widget.options;
      return t5 == null ? new flutter_map.MapOptions.new() : t5;
    }
    didUpdateWidget(oldWidget) {
      T$.FlutterMapL().as(oldWidget);
      this.mapState.options = this.options;
      super.didUpdateWidget(oldWidget);
    }
    initState() {
      super.initState();
      this.mapState = new map.MapState.new(this.options);
      this.rotation = this.options.rotation;
      this.mapController.state = this.mapState;
      this.mapController.onRotationChanged = dart.fn(degree => this.setState(dart.fn(() => this.rotation = degree, T$.VoidTodoubleL())), T$.doubleLTovoid());
    }
    [_dispose]() {
      for (let group of this.groups) {
        group.close();
      }
      this.groups[$clear]();
    }
    dispose() {
      this[_dispose]();
      super.dispose();
    }
    [_merge](options) {
      let t5;
      if ((t5 = options, t5 == null ? null : t5.rebuild) == null) return this.mapState.onMoved;
      let group = new (T$.StreamGroupOfNull()).new();
      group.add(this.mapState.onMoved);
      group.add(options.rebuild);
      this.groups[$add](group);
      return group.stream;
    }
    build(context) {
      this[_dispose]();
      return new layout_builder.LayoutBuilder.new({builder: dart.fn((context, constraints) => {
          let t6, t6$;
          let angle = null;
          let width = null;
          let height = null;
          if (this.rotation !== 0.0) {
            angle = latlong.degToRadian(this.rotation);
            let rangle90 = math.sin(1.5707963267948966 - dart.notNull(angle))[$abs]();
            let sinangle = math.sin(angle)[$abs]();
            width = dart.notNull(constraints.maxWidth) * rangle90 + dart.notNull(constraints.maxHeight) * sinangle;
            height = dart.notNull(constraints.maxHeight) * rangle90 + dart.notNull(constraints.maxWidth) * sinangle;
            this.mapState.size = new (T$.CustomPointOfdoubleL()).new(width, height);
          } else {
            this.mapState.size = new (T$.CustomPointOfdoubleL()).new(constraints.maxWidth, constraints.maxHeight);
          }
          let layerStack = new basic.Stack.new({key: this[_layerStackKey], children: (() => {
              let t5 = T$.ListOfWidgetL().of((t6 = this.widget.children, t6 == null ? T$.JSArrayOfWidgetL().of([]) : t6));
              t5[$addAll]((t6$ = this.widget.layers[$map](T$.WidgetL(), dart.fn(layer => this[_createLayer$](layer, this.widget.options.plugins), T$.LayerOptionsLToWidgetL())), t6$ == null ? T$.JSArrayOfWidgetL().of([]) : t6$));
              return t5;
            })(), $creationLocationd_0dea112b090073317d4: C[229] || CT.C229});
          let mapRoot = null;
          if (!dart.test(this.options.interactive)) {
            mapRoot = layerStack;
          } else {
            mapRoot = new positioned_tap_detector.PositionedTapDetector.new({key: this[_positionedTapDetectorKey], controller: this[_positionedTapController], onTap: dart.bind(this, 'handleTap'), onLongPress: dart.bind(this, 'handleLongPress'), onDoubleTap: dart.bind(this, 'handleDoubleTap'), child: new gesture_detector.GestureDetector.new({onScaleStart: dart.bind(this, 'handleScaleStart'), onScaleUpdate: dart.bind(this, 'handleScaleUpdate'), onScaleEnd: dart.bind(this, 'handleScaleEnd'), onTap: dart.bind(this[_positionedTapController], 'onTap'), onLongPress: dart.bind(this[_positionedTapController], 'onLongPress'), onTapDown: dart.bind(this[_positionedTapController], 'onTapDown'), onTapUp: dart.bind(this, 'handleOnTapUp'), child: layerStack, $creationLocationd_0dea112b090073317d4: C[233] || CT.C233}), $creationLocationd_0dea112b090073317d4: C[243] || CT.C243});
          }
          if (this.rotation !== 0.0) {
            return new map_state_widget.MapStateInheritedWidget.new({mapState: this.mapState, child: new basic.ClipRect.new({child: new basic.Transform.rotate({angle: angle, child: new basic.OverflowBox.new({minWidth: width, maxWidth: width, minHeight: height, maxHeight: height, child: mapRoot, $creationLocationd_0dea112b090073317d4: C[250] || CT.C250}), $creationLocationd_0dea112b090073317d4: C[257] || CT.C257}), $creationLocationd_0dea112b090073317d4: C[261] || CT.C261}), $creationLocationd_0dea112b090073317d4: C[264] || CT.C264});
          } else {
            return new map_state_widget.MapStateInheritedWidget.new({mapState: this.mapState, child: mapRoot, $creationLocationd_0dea112b090073317d4: C[268] || CT.C268});
          }
        }, T$.BuildContextLAndBoxConstraintsLToMapStateInheritedWidgetL()), $creationLocationd_0dea112b090073317d4: C[272] || CT.C272});
    }
    [_createLayer$](options, plugins) {
      for (let plugin of plugins) {
        if (dart.test(plugin.supportsLayer(options))) {
          return plugin.createLayer(options, this.mapState, this[_merge](options));
        }
      }
      if (T$.TileLayerOptionsL().is(options)) {
        return new tile_layer.TileLayer.new({options: options, mapState: this.mapState, stream: this[_merge](options), $creationLocationd_0dea112b090073317d4: C[275] || CT.C275});
      }
      if (T$.MarkerLayerOptionsL().is(options)) {
        return new marker_layer.MarkerLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[280] || CT.C280});
      }
      if (T$.PolylineLayerOptionsL().is(options)) {
        return new polyline_layer.PolylineLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[285] || CT.C285});
      }
      if (T$.PolygonLayerOptionsL().is(options)) {
        return new polygon_layer.PolygonLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[290] || CT.C290});
      }
      if (T$.CircleLayerOptionsL().is(options)) {
        return new circle_layer.CircleLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[295] || CT.C295});
      }
      if (T$.GroupLayerOptionsL().is(options)) {
        return new group_layer.GroupLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[300] || CT.C300});
      }
      if (T$.OverlayImageLayerOptionsL().is(options)) {
        return new overlay_image_layer.OverlayImageLayer.new(options, this.mapState, this[_merge](options), {$creationLocationd_0dea112b090073317d4: C[305] || CT.C305});
      }
      if (!false) dart.assertFailed("Can't find correct layer for " + dart.str(options) + ". Perhaps when you create your FlutterMap you need something like this:\n\n    options: new MapOptions(plugins: [MyFlutterMapPlugin()])", I[17], 191, 12, "false");
      return null;
    }
  };
  (flutter_map_state.FlutterMapState.new = function(mapController) {
    this[_layerStackKey] = T$.GlobalKeyOfStateLOfStatefulWidgetL().new();
    this[_positionedTapDetectorKey] = T$.GlobalKeyOfStateLOfStatefulWidgetL().new();
    this[groups] = T$.JSArrayOfStreamGroupLOfNull().of([]);
    this[_positionedTapController] = new positioned_tap_detector.PositionedTapController.new();
    this[rotation$] = 0.0;
    this[mapState] = null;
    this[mapController$] = mapController;
    flutter_map_state.FlutterMapState.__proto__.new.call(this);
    ;
  }).prototype = flutter_map_state.FlutterMapState.prototype;
  dart.addTypeTests(flutter_map_state.FlutterMapState);
  dart.addTypeCaches(flutter_map_state.FlutterMapState);
  dart.setMethodSignature(flutter_map_state.FlutterMapState, () => ({
    __proto__: dart.getMethods(flutter_map_state.FlutterMapState.__proto__),
    didUpdateWidget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_dispose]: dart.fnType(dart.void, []),
    [_merge]: dart.fnType(dart.legacy(async.Stream$(core.Null)), [dart.legacy(layer.LayerOptions)]),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)]),
    [_createLayer$]: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(layer.LayerOptions), dart.legacy(core.List$(dart.legacy(plugin.MapPlugin)))])
  }));
  dart.setGetterSignature(flutter_map_state.FlutterMapState, () => ({
    __proto__: dart.getGetters(flutter_map_state.FlutterMapState.__proto__),
    options: dart.legacy(flutter_map.MapOptions)
  }));
  dart.setLibraryUri(flutter_map_state.FlutterMapState, I[18]);
  dart.setFieldSignature(flutter_map_state.FlutterMapState, () => ({
    __proto__: dart.getFields(flutter_map_state.FlutterMapState.__proto__),
    [_layerStackKey]: dart.finalFieldType(dart.legacy(key.Key)),
    [_positionedTapDetectorKey]: dart.finalFieldType(dart.legacy(key.Key)),
    mapController: dart.finalFieldType(dart.legacy(map.MapControllerImpl)),
    groups: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(stream_group.StreamGroup$(core.Null))))),
    [_positionedTapController]: dart.finalFieldType(dart.legacy(positioned_tap_detector.PositionedTapController)),
    rotation: dart.fieldType(dart.legacy(core.double)),
    mapState: dart.fieldType(dart.legacy(map.MapState))
  }));
  dart.defineLazy(flutter_map_state.FlutterMapState, {
    /*flutter_map_state.FlutterMapState._rad90*/get _rad90() {
      return 1.5707963267948966;
    }
  }, true);
  var onRotationChanged$ = dart.privateName(flutter_map, "MapController.onRotationChanged");
  flutter_map.MapController = class MapController extends core.Object {
    get onRotationChanged() {
      return this[onRotationChanged$];
    }
    set onRotationChanged(value) {
      this[onRotationChanged$] = value;
    }
    static new() {
      return new map.MapControllerImpl.new();
    }
  };
  (flutter_map.MapController[dart.mixinNew] = function() {
    this[onRotationChanged$] = null;
  }).prototype = flutter_map.MapController.prototype;
  dart.addTypeTests(flutter_map.MapController);
  dart.addTypeCaches(flutter_map.MapController);
  dart.setLibraryUri(flutter_map.MapController, I[15]);
  dart.setFieldSignature(flutter_map.MapController, () => ({
    __proto__: dart.getFields(flutter_map.MapController.__proto__),
    onRotationChanged: dart.fieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(core.double)])))
  }));
  var crs$0 = dart.privateName(flutter_map, "MapOptions.crs");
  var zoom$ = dart.privateName(flutter_map, "MapOptions.zoom");
  var rotation$0 = dart.privateName(flutter_map, "MapOptions.rotation");
  var minZoom$0 = dart.privateName(flutter_map, "MapOptions.minZoom");
  var maxZoom$0 = dart.privateName(flutter_map, "MapOptions.maxZoom");
  var debug$ = dart.privateName(flutter_map, "MapOptions.debug");
  var interactive$ = dart.privateName(flutter_map, "MapOptions.interactive");
  var onTap$ = dart.privateName(flutter_map, "MapOptions.onTap");
  var onLongPress$ = dart.privateName(flutter_map, "MapOptions.onLongPress");
  var onPositionChanged$ = dart.privateName(flutter_map, "MapOptions.onPositionChanged");
  var plugins$ = dart.privateName(flutter_map, "MapOptions.plugins");
  var slideOnBoundaries$ = dart.privateName(flutter_map, "MapOptions.slideOnBoundaries");
  var screenSize$ = dart.privateName(flutter_map, "MapOptions.screenSize");
  var adaptiveBoundaries$ = dart.privateName(flutter_map, "MapOptions.adaptiveBoundaries");
  var controller$ = dart.privateName(flutter_map, "MapOptions.controller");
  var center$ = dart.privateName(flutter_map, "MapOptions.center");
  var bounds$0 = dart.privateName(flutter_map, "MapOptions.bounds");
  var boundsOptions$ = dart.privateName(flutter_map, "MapOptions.boundsOptions");
  var swPanBoundary$ = dart.privateName(flutter_map, "MapOptions.swPanBoundary");
  var nePanBoundary$ = dart.privateName(flutter_map, "MapOptions.nePanBoundary");
  var _safeAreaCache = dart.privateName(flutter_map, "_safeAreaCache");
  var _safeAreaZoom = dart.privateName(flutter_map, "_safeAreaZoom");
  var _safeArea = dart.privateName(flutter_map, "_safeArea");
  var _getControllerZoom = dart.privateName(flutter_map, "_getControllerZoom");
  var _calculateScreenHeightInDegrees = dart.privateName(flutter_map, "_calculateScreenHeightInDegrees");
  var _calculateScreenWidthInDegrees = dart.privateName(flutter_map, "_calculateScreenWidthInDegrees");
  flutter_map.MapOptions = class MapOptions extends core.Object {
    get crs() {
      return this[crs$0];
    }
    set crs(value) {
      super.crs = value;
    }
    get zoom() {
      return this[zoom$];
    }
    set zoom(value) {
      super.zoom = value;
    }
    get rotation() {
      return this[rotation$0];
    }
    set rotation(value) {
      super.rotation = value;
    }
    get minZoom() {
      return this[minZoom$0];
    }
    set minZoom(value) {
      super.minZoom = value;
    }
    get maxZoom() {
      return this[maxZoom$0];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    get debug() {
      return this[debug$];
    }
    set debug(value) {
      super.debug = value;
    }
    get interactive() {
      return this[interactive$];
    }
    set interactive(value) {
      super.interactive = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onLongPress() {
      return this[onLongPress$];
    }
    set onLongPress(value) {
      super.onLongPress = value;
    }
    get onPositionChanged() {
      return this[onPositionChanged$];
    }
    set onPositionChanged(value) {
      super.onPositionChanged = value;
    }
    get plugins() {
      return this[plugins$];
    }
    set plugins(value) {
      super.plugins = value;
    }
    get slideOnBoundaries() {
      return this[slideOnBoundaries$];
    }
    set slideOnBoundaries(value) {
      super.slideOnBoundaries = value;
    }
    get screenSize() {
      return this[screenSize$];
    }
    set screenSize(value) {
      super.screenSize = value;
    }
    get adaptiveBoundaries() {
      return this[adaptiveBoundaries$];
    }
    set adaptiveBoundaries(value) {
      super.adaptiveBoundaries = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get center() {
      return this[center$];
    }
    set center(value) {
      this[center$] = value;
    }
    get bounds() {
      return this[bounds$0];
    }
    set bounds(value) {
      this[bounds$0] = value;
    }
    get boundsOptions() {
      return this[boundsOptions$];
    }
    set boundsOptions(value) {
      this[boundsOptions$] = value;
    }
    get swPanBoundary() {
      return this[swPanBoundary$];
    }
    set swPanBoundary(value) {
      this[swPanBoundary$] = value;
    }
    get nePanBoundary() {
      return this[nePanBoundary$];
    }
    set nePanBoundary(value) {
      this[nePanBoundary$] = value;
    }
    isOutOfBounds(center) {
      if (dart.test(this.adaptiveBoundaries)) {
        return !dart.test(this[_safeArea].contains(center));
      }
      if (this.swPanBoundary != null && this.nePanBoundary != null) {
        if (center == null) {
          return true;
        } else if (dart.notNull(center.latitude) < dart.notNull(this.swPanBoundary.latitude) || dart.notNull(center.latitude) > dart.notNull(this.nePanBoundary.latitude)) {
          return true;
        } else if (dart.notNull(center.longitude) < dart.notNull(this.swPanBoundary.longitude) || dart.notNull(center.longitude) > dart.notNull(this.nePanBoundary.longitude)) {
          return true;
        }
      }
      return false;
    }
    containPoint(point, fallback) {
      if (dart.test(this.adaptiveBoundaries)) {
        return this[_safeArea].containPoint(point, fallback);
      } else {
        return new latlong.LatLng.new(point.latitude[$clamp](this.swPanBoundary.latitude, this.nePanBoundary.latitude), point.longitude[$clamp](this.swPanBoundary.longitude, this.nePanBoundary.longitude));
      }
    }
    get [_safeArea]() {
      let controllerZoom = this[_getControllerZoom]();
      if (controllerZoom != this[_safeAreaZoom] || this[_safeAreaCache] == null) {
        this[_safeAreaZoom] = controllerZoom;
        let halfScreenHeight = dart.notNull(this[_calculateScreenHeightInDegrees]()) / 2;
        let halfScreenWidth = dart.notNull(this[_calculateScreenWidthInDegrees]()) / 2;
        let southWestLatitude = dart.notNull(this.swPanBoundary.latitude) + halfScreenHeight;
        let southWestLongitude = dart.notNull(this.swPanBoundary.longitude) + halfScreenWidth;
        let northEastLatitude = dart.notNull(this.nePanBoundary.latitude) - halfScreenHeight;
        let northEastLongitude = dart.notNull(this.nePanBoundary.longitude) - halfScreenWidth;
        this[_safeAreaCache] = new flutter_map._SafeArea.new(new latlong.LatLng.new(southWestLatitude, southWestLongitude), new latlong.LatLng.new(northEastLatitude, northEastLongitude));
      }
      return this[_safeAreaCache];
    }
    [_calculateScreenWidthInDegrees]() {
      let zoom = this[_getControllerZoom]();
      let degreesPerPixel = 360 / math.pow(2, dart.notNull(zoom) + 8);
      return dart.notNull(this.screenSize.width) * degreesPerPixel;
    }
    [_calculateScreenHeightInDegrees]() {
      return dart.notNull(this.screenSize.height) * 170.102258 / math.pow(2, dart.notNull(this[_getControllerZoom]()) + 8);
    }
    [_getControllerZoom]() {
      return dart.test(this.controller.ready) ? this.controller.zoom : this.zoom;
    }
  };
  (flutter_map.MapOptions.new = function(opts) {
    let crs = opts && 'crs' in opts ? opts.crs : C[4] || CT.C4;
    let center = opts && 'center' in opts ? opts.center : null;
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let boundsOptions = opts && 'boundsOptions' in opts ? opts.boundsOptions : C[310] || CT.C310;
    let zoom = opts && 'zoom' in opts ? opts.zoom : 13;
    let rotation = opts && 'rotation' in opts ? opts.rotation : 0;
    let minZoom = opts && 'minZoom' in opts ? opts.minZoom : null;
    let maxZoom = opts && 'maxZoom' in opts ? opts.maxZoom : null;
    let debug = opts && 'debug' in opts ? opts.debug : false;
    let interactive = opts && 'interactive' in opts ? opts.interactive : true;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let onPositionChanged = opts && 'onPositionChanged' in opts ? opts.onPositionChanged : null;
    let plugins = opts && 'plugins' in opts ? opts.plugins : C[312] || CT.C312;
    let slideOnBoundaries = opts && 'slideOnBoundaries' in opts ? opts.slideOnBoundaries : false;
    let adaptiveBoundaries = opts && 'adaptiveBoundaries' in opts ? opts.adaptiveBoundaries : false;
    let screenSize = opts && 'screenSize' in opts ? opts.screenSize : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let swPanBoundary = opts && 'swPanBoundary' in opts ? opts.swPanBoundary : null;
    let nePanBoundary = opts && 'nePanBoundary' in opts ? opts.nePanBoundary : null;
    this[_safeAreaCache] = null;
    this[_safeAreaZoom] = null;
    this[crs$0] = crs;
    this[center$] = center;
    this[bounds$0] = bounds;
    this[boundsOptions$] = boundsOptions;
    this[zoom$] = zoom;
    this[rotation$0] = rotation;
    this[minZoom$0] = minZoom;
    this[maxZoom$0] = maxZoom;
    this[debug$] = debug;
    this[interactive$] = interactive;
    this[onTap$] = onTap;
    this[onLongPress$] = onLongPress;
    this[onPositionChanged$] = onPositionChanged;
    this[plugins$] = plugins;
    this[slideOnBoundaries$] = slideOnBoundaries;
    this[adaptiveBoundaries$] = adaptiveBoundaries;
    this[screenSize$] = screenSize;
    this[controller$] = controller;
    this[swPanBoundary$] = swPanBoundary;
    this[nePanBoundary$] = nePanBoundary;
    this.center == null ? this.center = new latlong.LatLng.new(50.5, 30.51) : null;
    this[_safeAreaZoom] = this.zoom;
    if (!(dart.test(this.slideOnBoundaries) || !dart.test(this.isOutOfBounds(this.center)))) dart.assertFailed(null, I[19], 172, 12, "slideOnBoundaries ||\n        !isOutOfBounds(center)");
    if (!(!dart.test(this.adaptiveBoundaries) || this.screenSize != null)) dart.assertFailed("screenSize must be set in order to enable adaptive boundaries.", I[19], 174, 12, "!adaptiveBoundaries || screenSize != null");
    if (!(!dart.test(this.adaptiveBoundaries) || this.controller != null)) dart.assertFailed("controller must be set in order to enable adaptive boundaries.", I[19], 176, 12, "!adaptiveBoundaries || controller != null");
  }).prototype = flutter_map.MapOptions.prototype;
  dart.addTypeTests(flutter_map.MapOptions);
  dart.addTypeCaches(flutter_map.MapOptions);
  dart.setMethodSignature(flutter_map.MapOptions, () => ({
    __proto__: dart.getMethods(flutter_map.MapOptions.__proto__),
    isOutOfBounds: dart.fnType(dart.legacy(core.bool), [dart.legacy(latlong.LatLng)]),
    containPoint: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)]),
    [_calculateScreenWidthInDegrees]: dart.fnType(dart.legacy(core.double), []),
    [_calculateScreenHeightInDegrees]: dart.fnType(dart.legacy(core.double), []),
    [_getControllerZoom]: dart.fnType(dart.legacy(core.double), [])
  }));
  dart.setGetterSignature(flutter_map.MapOptions, () => ({
    __proto__: dart.getGetters(flutter_map.MapOptions.__proto__),
    [_safeArea]: dart.legacy(flutter_map._SafeArea)
  }));
  dart.setLibraryUri(flutter_map.MapOptions, I[15]);
  dart.setFieldSignature(flutter_map.MapOptions, () => ({
    __proto__: dart.getFields(flutter_map.MapOptions.__proto__),
    crs: dart.finalFieldType(dart.legacy(crs.Crs)),
    zoom: dart.finalFieldType(dart.legacy(core.double)),
    rotation: dart.finalFieldType(dart.legacy(core.double)),
    minZoom: dart.finalFieldType(dart.legacy(core.double)),
    maxZoom: dart.finalFieldType(dart.legacy(core.double)),
    debug: dart.finalFieldType(dart.legacy(core.bool)),
    interactive: dart.finalFieldType(dart.legacy(core.bool)),
    onTap: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(latlong.LatLng)]))),
    onLongPress: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(latlong.LatLng)]))),
    onPositionChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.legacy(flutter_map.MapPosition), dart.legacy(core.bool)]))),
    plugins: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(plugin.MapPlugin)))),
    slideOnBoundaries: dart.finalFieldType(dart.legacy(core.bool)),
    screenSize: dart.finalFieldType(dart.legacy(ui.Size)),
    adaptiveBoundaries: dart.finalFieldType(dart.legacy(core.bool)),
    controller: dart.finalFieldType(dart.legacy(flutter_map.MapController)),
    center: dart.fieldType(dart.legacy(latlong.LatLng)),
    bounds: dart.fieldType(dart.legacy(latlng_bounds.LatLngBounds)),
    boundsOptions: dart.fieldType(dart.legacy(flutter_map.FitBoundsOptions)),
    swPanBoundary: dart.fieldType(dart.legacy(latlong.LatLng)),
    nePanBoundary: dart.fieldType(dart.legacy(latlong.LatLng)),
    [_safeAreaCache]: dart.fieldType(dart.legacy(flutter_map._SafeArea)),
    [_safeAreaZoom]: dart.fieldType(dart.legacy(core.double))
  }));
  const padding$ = FitBoundsOptions_padding;
  const maxZoom$1 = FitBoundsOptions_maxZoom;
  const zoom$0 = FitBoundsOptions_zoom;
  flutter_map.FitBoundsOptions = class FitBoundsOptions extends core.Object {
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get maxZoom() {
      return this[maxZoom$1];
    }
    set maxZoom(value) {
      super.maxZoom = value;
    }
    get zoom() {
      return this[zoom$0];
    }
    set zoom(value) {
      super.zoom = value;
    }
  };
  (flutter_map.FitBoundsOptions.new = function(opts) {
    let padding = opts && 'padding' in opts ? opts.padding : C[311] || CT.C311;
    let maxZoom = opts && 'maxZoom' in opts ? opts.maxZoom : 17;
    let zoom = opts && 'zoom' in opts ? opts.zoom : null;
    this[padding$] = padding;
    this[maxZoom$1] = maxZoom;
    this[zoom$0] = zoom;
    ;
  }).prototype = flutter_map.FitBoundsOptions.prototype;
  dart.addTypeTests(flutter_map.FitBoundsOptions);
  dart.addTypeCaches(flutter_map.FitBoundsOptions);
  dart.setLibraryUri(flutter_map.FitBoundsOptions, I[15]);
  dart.setFieldSignature(flutter_map.FitBoundsOptions, () => ({
    __proto__: dart.getFields(flutter_map.FitBoundsOptions.__proto__),
    padding: dart.finalFieldType(dart.legacy(edge_insets.EdgeInsets)),
    maxZoom: dart.finalFieldType(dart.legacy(core.double)),
    zoom: dart.finalFieldType(dart.legacy(core.double))
  }));
  var center$0 = dart.privateName(flutter_map, "MapPosition.center");
  var bounds$1 = dart.privateName(flutter_map, "MapPosition.bounds");
  var zoom$1 = dart.privateName(flutter_map, "MapPosition.zoom");
  var hasGesture$ = dart.privateName(flutter_map, "MapPosition.hasGesture");
  flutter_map.MapPosition = class MapPosition extends core.Object {
    get center() {
      return this[center$0];
    }
    set center(value) {
      super.center = value;
    }
    get bounds() {
      return this[bounds$1];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get zoom() {
      return this[zoom$1];
    }
    set zoom(value) {
      super.zoom = value;
    }
    get hasGesture() {
      return this[hasGesture$];
    }
    set hasGesture(value) {
      super.hasGesture = value;
    }
  };
  (flutter_map.MapPosition.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : null;
    let bounds = opts && 'bounds' in opts ? opts.bounds : null;
    let zoom = opts && 'zoom' in opts ? opts.zoom : null;
    let hasGesture = opts && 'hasGesture' in opts ? opts.hasGesture : false;
    this[center$0] = center;
    this[bounds$1] = bounds;
    this[zoom$1] = zoom;
    this[hasGesture$] = hasGesture;
    ;
  }).prototype = flutter_map.MapPosition.prototype;
  dart.addTypeTests(flutter_map.MapPosition);
  dart.addTypeCaches(flutter_map.MapPosition);
  dart.setLibraryUri(flutter_map.MapPosition, I[15]);
  dart.setFieldSignature(flutter_map.MapPosition, () => ({
    __proto__: dart.getFields(flutter_map.MapPosition.__proto__),
    center: dart.finalFieldType(dart.legacy(latlong.LatLng)),
    bounds: dart.finalFieldType(dart.legacy(latlng_bounds.LatLngBounds)),
    zoom: dart.finalFieldType(dart.legacy(core.double)),
    hasGesture: dart.finalFieldType(dart.legacy(core.bool))
  }));
  flutter_map._SafeArea = class _SafeArea extends core.Object {
    contains(point) {
      return dart.test(this.isLatitudeBlocked) || dart.test(this.isLongitudeBlocked) ? false : this.bounds.contains(T$.LatLngL().as(point));
    }
    containPoint(point, fallback) {
      return new latlong.LatLng.new(dart.test(this.isLatitudeBlocked) ? fallback.latitude : point.latitude[$clamp](this.bounds.south, this.bounds.north), dart.test(this.isLongitudeBlocked) ? fallback.longitude : point.longitude[$clamp](this.bounds.west, this.bounds.east));
    }
  };
  (flutter_map._SafeArea.new = function(southWest, northEast) {
    this.bounds = new latlng_bounds.LatLngBounds.new(southWest, northEast);
    this.isLatitudeBlocked = dart.notNull(southWest.latitude) > dart.notNull(northEast.latitude);
    this.isLongitudeBlocked = dart.notNull(southWest.longitude) > dart.notNull(northEast.longitude);
    ;
  }).prototype = flutter_map._SafeArea.prototype;
  dart.addTypeTests(flutter_map._SafeArea);
  dart.addTypeCaches(flutter_map._SafeArea);
  dart.setMethodSignature(flutter_map._SafeArea, () => ({
    __proto__: dart.getMethods(flutter_map._SafeArea.__proto__),
    contains: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    containPoint: dart.fnType(dart.legacy(latlong.LatLng), [dart.legacy(latlong.LatLng), dart.legacy(latlong.LatLng)])
  }));
  dart.setLibraryUri(flutter_map._SafeArea, I[15]);
  dart.setFieldSignature(flutter_map._SafeArea, () => ({
    __proto__: dart.getFields(flutter_map._SafeArea.__proto__),
    bounds: dart.finalFieldType(dart.legacy(latlng_bounds.LatLngBounds)),
    isLatitudeBlocked: dart.finalFieldType(dart.legacy(core.bool)),
    isLongitudeBlocked: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.setBaseClass(mbtiles_image_provider.MBTileImage, image_provider.ImageProvider$(mbtiles_image_provider.MBTileImage));
  dart.trackLibraries("packages/flutter_map/src/layer/tile_provider/mbtiles_image_provider.dart", {
    "package:flutter_map/src/layer/tile_provider/mbtiles_image_provider.dart": mbtiles_image_provider,
    "package:flutter_map/src/layer/tile_provider/tile_provider.dart": tile_provider,
    "package:flutter_map/src/layer/tile_layer.dart": tile_layer,
    "package:flutter_map/src/layer/polyline_layer.dart": polyline_layer,
    "package:flutter_map/src/layer/polygon_layer.dart": polygon_layer,
    "package:flutter_map/src/layer/marker_layer.dart": marker_layer,
    "package:flutter_map/src/layer/circle_layer.dart": circle_layer,
    "package:flutter_map/src/plugins/plugin.dart": plugin,
    "package:flutter_map/src/layer/overlay_image_layer.dart": overlay_image_layer,
    "package:flutter_map/src/layer/group_layer.dart": group_layer,
    "package:flutter_map/src/map/map_state_widget.dart": map_state_widget,
    "package:flutter_map/src/map/map.dart": map,
    "package:flutter_map/src/gestures/gestures.dart": gestures,
    "package:flutter_map/src/map/flutter_map_state.dart": flutter_map_state,
    "package:flutter_map/flutter_map.dart": flutter_map
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tile_provider.dart","mbtiles_image_provider.dart","../tile_layer.dart","../polyline_layer.dart","../polygon_layer.dart","../marker_layer.dart","../circle_layer.dart","../../plugins/plugin.dart","../overlay_image_layer.dart","../group_layer.dart","../../map/map_state_widget.dart","../../map/map.dart","../../../flutter_map.dart","../../gestures/gestures.dart","../../map/flutter_map_state.dart"],"names":[],"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","file":"../../../../../../../../../../../packages/flutter_map/src/layer/tile_provider/mbtiles_image_provider.dart.lib.js"}');
  // Exports:
  return {
    src__layer__tile_provider__mbtiles_image_provider: mbtiles_image_provider,
    src__layer__tile_provider__tile_provider: tile_provider,
    src__layer__tile_layer: tile_layer,
    src__layer__polyline_layer: polyline_layer,
    src__layer__polygon_layer: polygon_layer,
    src__layer__marker_layer: marker_layer,
    src__layer__circle_layer: circle_layer,
    src__plugins__plugin: plugin,
    src__layer__overlay_image_layer: overlay_image_layer,
    src__layer__group_layer: group_layer,
    src__map__map_state_widget: map_state_widget,
    src__map__map: map,
    src__gestures__gestures: gestures,
    src__map__flutter_map_state: flutter_map_state,
    flutter_map: flutter_map
  };
}));

//# sourceMappingURL=mbtiles_image_provider.dart.lib.js.map
